<?php
/**
 * BroadbandOrderSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandOrderSummary Class Doc Comment
 *
 * @category Class
 * @description Represents a summary of broadband orders
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandOrderSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandOrderSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'int',
        'reference' => 'string',
        'product_id' => 'int',
        'technology' => 'string',
        'cli' => 'string',
        'mac_code' => 'string',
        'username' => 'string',
        'order_type' => 'string',
        'order_subtype' => 'string',
        'order_status' => 'string',
        'order_date' => '\DateTime',
        'required_date' => '\DateTime',
        'last_update' => '\DateTime',
        'commit_date' => '\DateTime',
        'sim_order' => 'bool',
        'sim_code' => 'string',
        'friendly_name' => 'string',
        'appointment_timeslot' => 'string',
        'number_transfer' => 'string',
        'cupid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => 'int32',
        'reference' => null,
        'product_id' => 'int32',
        'technology' => null,
        'cli' => null,
        'mac_code' => null,
        'username' => null,
        'order_type' => null,
        'order_subtype' => null,
        'order_status' => null,
        'order_date' => 'date-time',
        'required_date' => 'date-time',
        'last_update' => 'date-time',
        'commit_date' => 'date-time',
        'sim_order' => null,
        'sim_code' => null,
        'friendly_name' => null,
        'appointment_timeslot' => null,
        'number_transfer' => null,
        'cupid' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
		'reference' => true,
		'product_id' => false,
		'technology' => true,
		'cli' => true,
		'mac_code' => true,
		'username' => true,
		'order_type' => true,
		'order_subtype' => true,
		'order_status' => true,
		'order_date' => false,
		'required_date' => false,
		'last_update' => false,
		'commit_date' => false,
		'sim_order' => false,
		'sim_code' => true,
		'friendly_name' => true,
		'appointment_timeslot' => false,
		'number_transfer' => false,
		'cupid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'reference' => 'reference',
        'product_id' => 'product_id',
        'technology' => 'technology',
        'cli' => 'cli',
        'mac_code' => 'mac_code',
        'username' => 'username',
        'order_type' => 'order_type',
        'order_subtype' => 'order_subtype',
        'order_status' => 'order_status',
        'order_date' => 'order_date',
        'required_date' => 'required_date',
        'last_update' => 'last_update',
        'commit_date' => 'commit_date',
        'sim_order' => 'sim_order',
        'sim_code' => 'sim_code',
        'friendly_name' => 'friendly_name',
        'appointment_timeslot' => 'appointment_timeslot',
        'number_transfer' => 'number_transfer',
        'cupid' => 'cupid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'reference' => 'setReference',
        'product_id' => 'setProductId',
        'technology' => 'setTechnology',
        'cli' => 'setCli',
        'mac_code' => 'setMacCode',
        'username' => 'setUsername',
        'order_type' => 'setOrderType',
        'order_subtype' => 'setOrderSubtype',
        'order_status' => 'setOrderStatus',
        'order_date' => 'setOrderDate',
        'required_date' => 'setRequiredDate',
        'last_update' => 'setLastUpdate',
        'commit_date' => 'setCommitDate',
        'sim_order' => 'setSimOrder',
        'sim_code' => 'setSimCode',
        'friendly_name' => 'setFriendlyName',
        'appointment_timeslot' => 'setAppointmentTimeslot',
        'number_transfer' => 'setNumberTransfer',
        'cupid' => 'setCupid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'reference' => 'getReference',
        'product_id' => 'getProductId',
        'technology' => 'getTechnology',
        'cli' => 'getCli',
        'mac_code' => 'getMacCode',
        'username' => 'getUsername',
        'order_type' => 'getOrderType',
        'order_subtype' => 'getOrderSubtype',
        'order_status' => 'getOrderStatus',
        'order_date' => 'getOrderDate',
        'required_date' => 'getRequiredDate',
        'last_update' => 'getLastUpdate',
        'commit_date' => 'getCommitDate',
        'sim_order' => 'getSimOrder',
        'sim_code' => 'getSimCode',
        'friendly_name' => 'getFriendlyName',
        'appointment_timeslot' => 'getAppointmentTimeslot',
        'number_transfer' => 'getNumberTransfer',
        'cupid' => 'getCupid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORDER_TYPE_PROVIDE = 'PROVIDE';
    public const ORDER_TYPE_MIGRATE = 'MIGRATE';
    public const ORDER_TYPE_MODIFY = 'MODIFY';
    public const ORDER_TYPE_CEASE = 'CEASE';
    public const ORDER_TYPE_ALL = 'ALL';
    public const ORDER_SUBTYPE_PROVIDE_DIRECTORY_NUMBER = 'PROVIDE_DIRECTORY_NUMBER';
    public const ORDER_SUBTYPE_PROVIDE_ADDRESS = 'PROVIDE_ADDRESS';
    public const ORDER_SUBTYPE_MIGRATE_DIRECTORY_NUMBER = 'MIGRATE_DIRECTORY_NUMBER';
    public const ORDER_SUBTYPE_MIGRATE_ADDRESS = 'MIGRATE_ADDRESS';
    public const ORDER_SUBTYPE_MIGRATE_FAMILY = 'MIGRATE_FAMILY';
    public const ORDER_SUBTYPE_COPPER_TO_FIBRE = 'COPPER_TO_FIBRE';
    public const ORDER_SUBTYPE_FIBRE_TO_COPPER = 'FIBRE_TO_COPPER';
    public const ORDER_SUBTYPE_SIM_PROVIDE = 'SIM_PROVIDE';
    public const ORDER_SUBTYPE_HOME_MOVE = 'HOME_MOVE';
    public const ORDER_SUBTYPE_MODIFY_TRAFFIC_WEIGHTING = 'MODIFY_TRAFFIC_WEIGHTING';
    public const ORDER_SUBTYPE_MODIFY_ADVANCED_SERVICES = 'MODIFY_ADVANCED_SERVICES';
    public const ORDER_SUBTYPE_MODIFY_SPEED = 'MODIFY_SPEED';
    public const ORDER_SUBTYPE_MODIFY_CARE = 'MODIFY_CARE';
    public const ORDER_SUBTYPE_MODIFY_STABILITY = 'MODIFY_STABILITY';
    public const ORDER_SUBTYPE_MODIFY_MODIFIED_FAULT_THRESHOLD = 'MODIFY_MODIFIED_FAULT_THRESHOLD';
    public const ORDER_SUBTYPE_MODIFY_INTERLEAVING = 'MODIFY_INTERLEAVING';
    public const ORDER_SUBTYPE_CEASE = 'CEASE';
    public const ORDER_SUBTYPE_MIGRATE_AWAY = 'MIGRATE_AWAY';
    public const ORDER_SUBTYPE_CANCEL = 'CANCEL';
    public const ORDER_SUBTYPE_OTHER = 'OTHER';
    public const ORDER_SUBTYPE_FIBRE_TO_FIBRE = 'FIBRE_TO_FIBRE';
    public const ORDER_SUBTYPE_CEASE_UNSOLICITED = 'CEASE_UNSOLICITED';
    public const ORDER_SUBTYPE_AMEND = 'AMEND';
    public const ORDER_SUBTYPE_CEASE_LLU = 'CEASE_LLU';
    public const ORDER_SUBTYPE_CEASE_WLR = 'CEASE_WLR';
    public const ORDER_STATUS_RECEIVED = 'RECEIVED';
    public const ORDER_STATUS_PROCESSING = 'PROCESSING';
    public const ORDER_STATUS_COMMITTED = 'COMMITTED';
    public const ORDER_STATUS_DELAYED = 'DELAYED';
    public const ORDER_STATUS_COMPLETE = 'COMPLETE';
    public const ORDER_STATUS_REJECTED = 'REJECTED';
    public const ORDER_STATUS_CANCELLED = 'CANCELLED';
    public const ORDER_STATUS_SENT = 'SENT';
    public const ORDER_STATUS_CEASED = 'CEASED';
    public const ORDER_STATUS_MIGRATED_AWAY = 'MIGRATED_AWAY';
    public const ORDER_STATUS_AMENDED = 'AMENDED';
    public const ORDER_STATUS_ISSUED = 'ISSUED';
    public const ORDER_STATUS_ALL = 'ALL';
    public const APPOINTMENT_TIMESLOT_NONE = 'NONE';
    public const APPOINTMENT_TIMESLOT_AM = 'AM';
    public const APPOINTMENT_TIMESLOT_PM = 'PM';
    public const NUMBER_TRANSFER_NONE = 'NONE';
    public const NUMBER_TRANSFER_CEASE = 'CEASE';
    public const NUMBER_TRANSFER_PORT_TO_ICUK = 'PORT_TO_ICUK';
    public const NUMBER_TRANSFER_PORT_TO_3_RDPARTY = 'PORT_TO_3RDPARTY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues()
    {
        return [
            self::ORDER_TYPE_PROVIDE,
            self::ORDER_TYPE_MIGRATE,
            self::ORDER_TYPE_MODIFY,
            self::ORDER_TYPE_CEASE,
            self::ORDER_TYPE_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderSubtypeAllowableValues()
    {
        return [
            self::ORDER_SUBTYPE_PROVIDE_DIRECTORY_NUMBER,
            self::ORDER_SUBTYPE_PROVIDE_ADDRESS,
            self::ORDER_SUBTYPE_MIGRATE_DIRECTORY_NUMBER,
            self::ORDER_SUBTYPE_MIGRATE_ADDRESS,
            self::ORDER_SUBTYPE_MIGRATE_FAMILY,
            self::ORDER_SUBTYPE_COPPER_TO_FIBRE,
            self::ORDER_SUBTYPE_FIBRE_TO_COPPER,
            self::ORDER_SUBTYPE_SIM_PROVIDE,
            self::ORDER_SUBTYPE_HOME_MOVE,
            self::ORDER_SUBTYPE_MODIFY_TRAFFIC_WEIGHTING,
            self::ORDER_SUBTYPE_MODIFY_ADVANCED_SERVICES,
            self::ORDER_SUBTYPE_MODIFY_SPEED,
            self::ORDER_SUBTYPE_MODIFY_CARE,
            self::ORDER_SUBTYPE_MODIFY_STABILITY,
            self::ORDER_SUBTYPE_MODIFY_MODIFIED_FAULT_THRESHOLD,
            self::ORDER_SUBTYPE_MODIFY_INTERLEAVING,
            self::ORDER_SUBTYPE_CEASE,
            self::ORDER_SUBTYPE_MIGRATE_AWAY,
            self::ORDER_SUBTYPE_CANCEL,
            self::ORDER_SUBTYPE_OTHER,
            self::ORDER_SUBTYPE_FIBRE_TO_FIBRE,
            self::ORDER_SUBTYPE_CEASE_UNSOLICITED,
            self::ORDER_SUBTYPE_AMEND,
            self::ORDER_SUBTYPE_CEASE_LLU,
            self::ORDER_SUBTYPE_CEASE_WLR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS_RECEIVED,
            self::ORDER_STATUS_PROCESSING,
            self::ORDER_STATUS_COMMITTED,
            self::ORDER_STATUS_DELAYED,
            self::ORDER_STATUS_COMPLETE,
            self::ORDER_STATUS_REJECTED,
            self::ORDER_STATUS_CANCELLED,
            self::ORDER_STATUS_SENT,
            self::ORDER_STATUS_CEASED,
            self::ORDER_STATUS_MIGRATED_AWAY,
            self::ORDER_STATUS_AMENDED,
            self::ORDER_STATUS_ISSUED,
            self::ORDER_STATUS_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppointmentTimeslotAllowableValues()
    {
        return [
            self::APPOINTMENT_TIMESLOT_NONE,
            self::APPOINTMENT_TIMESLOT_AM,
            self::APPOINTMENT_TIMESLOT_PM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberTransferAllowableValues()
    {
        return [
            self::NUMBER_TRANSFER_NONE,
            self::NUMBER_TRANSFER_CEASE,
            self::NUMBER_TRANSFER_PORT_TO_ICUK,
            self::NUMBER_TRANSFER_PORT_TO_3_RDPARTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('technology', $data ?? [], null);
        $this->setIfExists('cli', $data ?? [], null);
        $this->setIfExists('mac_code', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('order_type', $data ?? [], null);
        $this->setIfExists('order_subtype', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('order_date', $data ?? [], null);
        $this->setIfExists('required_date', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('commit_date', $data ?? [], null);
        $this->setIfExists('sim_order', $data ?? [], null);
        $this->setIfExists('sim_code', $data ?? [], null);
        $this->setIfExists('friendly_name', $data ?? [], null);
        $this->setIfExists('appointment_timeslot', $data ?? [], null);
        $this->setIfExists('number_transfer', $data ?? [], null);
        $this->setIfExists('cupid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['order_type']) && !in_array($this->container['order_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_type', must be one of '%s'",
                $this->container['order_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderSubtypeAllowableValues();
        if (!is_null($this->container['order_subtype']) && !in_array($this->container['order_subtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_subtype', must be one of '%s'",
                $this->container['order_subtype'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['order_status']) && !in_array($this->container['order_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAppointmentTimeslotAllowableValues();
        if (!is_null($this->container['appointment_timeslot']) && !in_array($this->container['appointment_timeslot'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'appointment_timeslot', must be one of '%s'",
                $this->container['appointment_timeslot'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNumberTransferAllowableValues();
        if (!is_null($this->container['number_transfer']) && !in_array($this->container['number_transfer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'number_transfer', must be one of '%s'",
                $this->container['number_transfer'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id Order ID
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Carrier reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            array_push($this->openAPINullablesSetToNull, 'reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id Product ID
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets technology
     *
     * @return string|null
     */
    public function getTechnology()
    {
        return $this->container['technology'];
    }

    /**
     * Sets technology
     *
     * @param string|null $technology Technology
     *
     * @return self
     */
    public function setTechnology($technology)
    {
        if (is_null($technology)) {
            array_push($this->openAPINullablesSetToNull, 'technology');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('technology', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['technology'] = $technology;

        return $this;
    }

    /**
     * Gets cli
     *
     * @return string|null
     */
    public function getCli()
    {
        return $this->container['cli'];
    }

    /**
     * Sets cli
     *
     * @param string|null $cli Calling line identity
     *
     * @return self
     */
    public function setCli($cli)
    {
        if (is_null($cli)) {
            array_push($this->openAPINullablesSetToNull, 'cli');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cli', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cli'] = $cli;

        return $this;
    }

    /**
     * Gets mac_code
     *
     * @return string|null
     */
    public function getMacCode()
    {
        return $this->container['mac_code'];
    }

    /**
     * Sets mac_code
     *
     * @param string|null $mac_code DEPRECATED - MAC Code
     *
     * @return self
     */
    public function setMacCode($mac_code)
    {
        if (is_null($mac_code)) {
            array_push($this->openAPINullablesSetToNull, 'mac_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mac_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mac_code'] = $mac_code;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Name of the user
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string|null $order_type Order type
     *
     * @return self
     */
    public function setOrderType($order_type)
    {
        if (is_null($order_type)) {
            array_push($this->openAPINullablesSetToNull, 'order_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($order_type) && !in_array($order_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_type', must be one of '%s'",
                    $order_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets order_subtype
     *
     * @return string|null
     */
    public function getOrderSubtype()
    {
        return $this->container['order_subtype'];
    }

    /**
     * Sets order_subtype
     *
     * @param string|null $order_subtype Order subtype
     *
     * @return self
     */
    public function setOrderSubtype($order_subtype)
    {
        if (is_null($order_subtype)) {
            array_push($this->openAPINullablesSetToNull, 'order_subtype');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_subtype', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderSubtypeAllowableValues();
        if (!is_null($order_subtype) && !in_array($order_subtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_subtype', must be one of '%s'",
                    $order_subtype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_subtype'] = $order_subtype;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status Order status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            array_push($this->openAPINullablesSetToNull, 'order_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($order_status) && !in_array($order_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime|null $order_date Order date
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        if (is_null($order_date)) {
            throw new \InvalidArgumentException('non-nullable order_date cannot be null');
        }
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets required_date
     *
     * @return \DateTime|null
     */
    public function getRequiredDate()
    {
        return $this->container['required_date'];
    }

    /**
     * Sets required_date
     *
     * @param \DateTime|null $required_date Required date
     *
     * @return self
     */
    public function setRequiredDate($required_date)
    {
        if (is_null($required_date)) {
            throw new \InvalidArgumentException('non-nullable required_date cannot be null');
        }
        $this->container['required_date'] = $required_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update Last update
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets commit_date
     *
     * @return \DateTime|null
     */
    public function getCommitDate()
    {
        return $this->container['commit_date'];
    }

    /**
     * Sets commit_date
     *
     * @param \DateTime|null $commit_date Committed date
     *
     * @return self
     */
    public function setCommitDate($commit_date)
    {
        if (is_null($commit_date)) {
            throw new \InvalidArgumentException('non-nullable commit_date cannot be null');
        }
        $this->container['commit_date'] = $commit_date;

        return $this;
    }

    /**
     * Gets sim_order
     *
     * @return bool|null
     */
    public function getSimOrder()
    {
        return $this->container['sim_order'];
    }

    /**
     * Sets sim_order
     *
     * @param bool|null $sim_order Whether the order is simultaneous provide
     *
     * @return self
     */
    public function setSimOrder($sim_order)
    {
        if (is_null($sim_order)) {
            throw new \InvalidArgumentException('non-nullable sim_order cannot be null');
        }
        $this->container['sim_order'] = $sim_order;

        return $this;
    }

    /**
     * Gets sim_code
     *
     * @return string|null
     */
    public function getSimCode()
    {
        return $this->container['sim_code'];
    }

    /**
     * Sets sim_code
     *
     * @param string|null $sim_code The SIM/LORN Code
     *
     * @return self
     */
    public function setSimCode($sim_code)
    {
        if (is_null($sim_code)) {
            array_push($this->openAPINullablesSetToNull, 'sim_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_code'] = $sim_code;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string|null $friendly_name Friendly name
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {
        if (is_null($friendly_name)) {
            array_push($this->openAPINullablesSetToNull, 'friendly_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('friendly_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets appointment_timeslot
     *
     * @return string|null
     */
    public function getAppointmentTimeslot()
    {
        return $this->container['appointment_timeslot'];
    }

    /**
     * Sets appointment_timeslot
     *
     * @param string|null $appointment_timeslot Appointment timeslot for engineer visit<p>Possible values:</p>  <ul>  <li><b>0</b> - None.</li>  <li><b>1</b> - Morning.</li>  <li><b>2</b> - Afternoon.</li>  </ul>
     *
     * @return self
     */
    public function setAppointmentTimeslot($appointment_timeslot)
    {
        if (is_null($appointment_timeslot)) {
            throw new \InvalidArgumentException('non-nullable appointment_timeslot cannot be null');
        }
        $allowedValues = $this->getAppointmentTimeslotAllowableValues();
        if (!in_array($appointment_timeslot, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'appointment_timeslot', must be one of '%s'",
                    $appointment_timeslot,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['appointment_timeslot'] = $appointment_timeslot;

        return $this;
    }

    /**
     * Gets number_transfer
     *
     * @return string|null
     */
    public function getNumberTransfer()
    {
        return $this->container['number_transfer'];
    }

    /**
     * Sets number_transfer
     *
     * @param string|null $number_transfer Number transfer/port option<p>Possible values:</p>  <ul>  <li><b>0</b> - None.</li>  <li><b>1</b> - Morning.</li>  <li><b>2</b> - Afternoon.</li>  <li><b>3</b> - Afternoon.</li>  </ul>
     *
     * @return self
     */
    public function setNumberTransfer($number_transfer)
    {
        if (is_null($number_transfer)) {
            throw new \InvalidArgumentException('non-nullable number_transfer cannot be null');
        }
        $allowedValues = $this->getNumberTransferAllowableValues();
        if (!in_array($number_transfer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'number_transfer', must be one of '%s'",
                    $number_transfer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['number_transfer'] = $number_transfer;

        return $this;
    }

    /**
     * Gets cupid
     *
     * @return int|null
     */
    public function getCupid()
    {
        return $this->container['cupid'];
    }

    /**
     * Sets cupid
     *
     * @param int|null $cupid CUPID for 3rd party number transfers
     *
     * @return self
     */
    public function setCupid($cupid)
    {
        if (is_null($cupid)) {
            throw new \InvalidArgumentException('non-nullable cupid cannot be null');
        }
        $this->container['cupid'] = $cupid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


