<?php
/**
 * BroadbandKBDGea
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDGea Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD GEA Service subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDGea implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDGea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outcome' => 'string',
        'outcome_code' => 'string',
        'outcome_description' => 'string',
        'fault_location' => 'string',
        'sync_status' => 'string',
        'downstream_speed' => 'string',
        'upstream_speed' => 'string',
        'appointment' => 'string',
        'fault_report' => 'string',
        'gea_fault_target' => 'string',
        'nte_power_status' => 'string',
        'voice_test' => 'string',
        'bridge_tap' => 'string',
        'radio_frecuency' => 'string',
        'repetitive_electrical' => 'string',
        'cross_talk' => 'string',
        'rrt_response' => 'string',
        'last_sesion' => 'string',
        'current_policy' => 'string',
        'current_cp' => 'string',
        'line_rate' => '\OpenAPI\Client\Model\BroadbandKBDGeaParameters',
        'uptime' => '\OpenAPI\Client\Model\BroadbandKBDGeaParameters',
        'retrains' => '\OpenAPI\Client\Model\BroadbandKBDGeaParameters',
        'tx_traffic' => '\OpenAPI\Client\Model\BroadbandKBDGeaParameters',
        'rx_traffic' => '\OpenAPI\Client\Model\BroadbandKBDGeaParameters',
        'policing_discards' => '\OpenAPI\Client\Model\BroadbandKBDGeaParameters',
        'profile_name' => 'string',
        'profile_time' => 'string',
        'last_minutes' => '\OpenAPI\Client\Model\BroadbandKBDGeaVdsl',
        'current_minutes' => '\OpenAPI\Client\Model\BroadbandKBDGeaVdsl'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outcome' => null,
        'outcome_code' => null,
        'outcome_description' => null,
        'fault_location' => null,
        'sync_status' => null,
        'downstream_speed' => null,
        'upstream_speed' => null,
        'appointment' => null,
        'fault_report' => null,
        'gea_fault_target' => null,
        'nte_power_status' => null,
        'voice_test' => null,
        'bridge_tap' => null,
        'radio_frecuency' => null,
        'repetitive_electrical' => null,
        'cross_talk' => null,
        'rrt_response' => null,
        'last_sesion' => null,
        'current_policy' => null,
        'current_cp' => null,
        'line_rate' => null,
        'uptime' => null,
        'retrains' => null,
        'tx_traffic' => null,
        'rx_traffic' => null,
        'policing_discards' => null,
        'profile_name' => null,
        'profile_time' => null,
        'last_minutes' => null,
        'current_minutes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outcome' => true,
		'outcome_code' => true,
		'outcome_description' => true,
		'fault_location' => true,
		'sync_status' => true,
		'downstream_speed' => true,
		'upstream_speed' => true,
		'appointment' => true,
		'fault_report' => true,
		'gea_fault_target' => true,
		'nte_power_status' => true,
		'voice_test' => true,
		'bridge_tap' => true,
		'radio_frecuency' => true,
		'repetitive_electrical' => true,
		'cross_talk' => true,
		'rrt_response' => true,
		'last_sesion' => true,
		'current_policy' => true,
		'current_cp' => true,
		'line_rate' => false,
		'uptime' => false,
		'retrains' => false,
		'tx_traffic' => false,
		'rx_traffic' => false,
		'policing_discards' => false,
		'profile_name' => true,
		'profile_time' => true,
		'last_minutes' => false,
		'current_minutes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outcome' => 'outcome',
        'outcome_code' => 'outcome_code',
        'outcome_description' => 'outcome_description',
        'fault_location' => 'fault_location',
        'sync_status' => 'sync_status',
        'downstream_speed' => 'downstream_speed',
        'upstream_speed' => 'upstream_speed',
        'appointment' => 'appointment',
        'fault_report' => 'fault_report',
        'gea_fault_target' => 'gea_fault_target',
        'nte_power_status' => 'nte_power_status',
        'voice_test' => 'voice_test',
        'bridge_tap' => 'bridge_tap',
        'radio_frecuency' => 'radio_frecuency',
        'repetitive_electrical' => 'repetitive_electrical',
        'cross_talk' => 'cross_talk',
        'rrt_response' => 'rrt_response',
        'last_sesion' => 'last_sesion',
        'current_policy' => 'current_policy',
        'current_cp' => 'current_cp',
        'line_rate' => 'line_rate',
        'uptime' => 'uptime',
        'retrains' => 'retrains',
        'tx_traffic' => 'tx_traffic',
        'rx_traffic' => 'rx_traffic',
        'policing_discards' => 'policing_discards',
        'profile_name' => 'profile_name',
        'profile_time' => 'profile_time',
        'last_minutes' => 'last_minutes',
        'current_minutes' => 'current_minutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outcome' => 'setOutcome',
        'outcome_code' => 'setOutcomeCode',
        'outcome_description' => 'setOutcomeDescription',
        'fault_location' => 'setFaultLocation',
        'sync_status' => 'setSyncStatus',
        'downstream_speed' => 'setDownstreamSpeed',
        'upstream_speed' => 'setUpstreamSpeed',
        'appointment' => 'setAppointment',
        'fault_report' => 'setFaultReport',
        'gea_fault_target' => 'setGeaFaultTarget',
        'nte_power_status' => 'setNtePowerStatus',
        'voice_test' => 'setVoiceTest',
        'bridge_tap' => 'setBridgeTap',
        'radio_frecuency' => 'setRadioFrecuency',
        'repetitive_electrical' => 'setRepetitiveElectrical',
        'cross_talk' => 'setCrossTalk',
        'rrt_response' => 'setRrtResponse',
        'last_sesion' => 'setLastSesion',
        'current_policy' => 'setCurrentPolicy',
        'current_cp' => 'setCurrentCp',
        'line_rate' => 'setLineRate',
        'uptime' => 'setUptime',
        'retrains' => 'setRetrains',
        'tx_traffic' => 'setTxTraffic',
        'rx_traffic' => 'setRxTraffic',
        'policing_discards' => 'setPolicingDiscards',
        'profile_name' => 'setProfileName',
        'profile_time' => 'setProfileTime',
        'last_minutes' => 'setLastMinutes',
        'current_minutes' => 'setCurrentMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outcome' => 'getOutcome',
        'outcome_code' => 'getOutcomeCode',
        'outcome_description' => 'getOutcomeDescription',
        'fault_location' => 'getFaultLocation',
        'sync_status' => 'getSyncStatus',
        'downstream_speed' => 'getDownstreamSpeed',
        'upstream_speed' => 'getUpstreamSpeed',
        'appointment' => 'getAppointment',
        'fault_report' => 'getFaultReport',
        'gea_fault_target' => 'getGeaFaultTarget',
        'nte_power_status' => 'getNtePowerStatus',
        'voice_test' => 'getVoiceTest',
        'bridge_tap' => 'getBridgeTap',
        'radio_frecuency' => 'getRadioFrecuency',
        'repetitive_electrical' => 'getRepetitiveElectrical',
        'cross_talk' => 'getCrossTalk',
        'rrt_response' => 'getRrtResponse',
        'last_sesion' => 'getLastSesion',
        'current_policy' => 'getCurrentPolicy',
        'current_cp' => 'getCurrentCp',
        'line_rate' => 'getLineRate',
        'uptime' => 'getUptime',
        'retrains' => 'getRetrains',
        'tx_traffic' => 'getTxTraffic',
        'rx_traffic' => 'getRxTraffic',
        'policing_discards' => 'getPolicingDiscards',
        'profile_name' => 'getProfileName',
        'profile_time' => 'getProfileTime',
        'last_minutes' => 'getLastMinutes',
        'current_minutes' => 'getCurrentMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('outcome_code', $data ?? [], null);
        $this->setIfExists('outcome_description', $data ?? [], null);
        $this->setIfExists('fault_location', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
        $this->setIfExists('downstream_speed', $data ?? [], null);
        $this->setIfExists('upstream_speed', $data ?? [], null);
        $this->setIfExists('appointment', $data ?? [], null);
        $this->setIfExists('fault_report', $data ?? [], null);
        $this->setIfExists('gea_fault_target', $data ?? [], null);
        $this->setIfExists('nte_power_status', $data ?? [], null);
        $this->setIfExists('voice_test', $data ?? [], null);
        $this->setIfExists('bridge_tap', $data ?? [], null);
        $this->setIfExists('radio_frecuency', $data ?? [], null);
        $this->setIfExists('repetitive_electrical', $data ?? [], null);
        $this->setIfExists('cross_talk', $data ?? [], null);
        $this->setIfExists('rrt_response', $data ?? [], null);
        $this->setIfExists('last_sesion', $data ?? [], null);
        $this->setIfExists('current_policy', $data ?? [], null);
        $this->setIfExists('current_cp', $data ?? [], null);
        $this->setIfExists('line_rate', $data ?? [], null);
        $this->setIfExists('uptime', $data ?? [], null);
        $this->setIfExists('retrains', $data ?? [], null);
        $this->setIfExists('tx_traffic', $data ?? [], null);
        $this->setIfExists('rx_traffic', $data ?? [], null);
        $this->setIfExists('policing_discards', $data ?? [], null);
        $this->setIfExists('profile_name', $data ?? [], null);
        $this->setIfExists('profile_time', $data ?? [], null);
        $this->setIfExists('last_minutes', $data ?? [], null);
        $this->setIfExists('current_minutes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome Test Outcome.
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        if (is_null($outcome)) {
            array_push($this->openAPINullablesSetToNull, 'outcome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets outcome_code
     *
     * @return string|null
     */
    public function getOutcomeCode()
    {
        return $this->container['outcome_code'];
    }

    /**
     * Sets outcome_code
     *
     * @param string|null $outcome_code Outcome Code.
     *
     * @return self
     */
    public function setOutcomeCode($outcome_code)
    {
        if (is_null($outcome_code)) {
            array_push($this->openAPINullablesSetToNull, 'outcome_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome_code'] = $outcome_code;

        return $this;
    }

    /**
     * Gets outcome_description
     *
     * @return string|null
     */
    public function getOutcomeDescription()
    {
        return $this->container['outcome_description'];
    }

    /**
     * Sets outcome_description
     *
     * @param string|null $outcome_description Outcome Description.
     *
     * @return self
     */
    public function setOutcomeDescription($outcome_description)
    {
        if (is_null($outcome_description)) {
            array_push($this->openAPINullablesSetToNull, 'outcome_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome_description'] = $outcome_description;

        return $this;
    }

    /**
     * Gets fault_location
     *
     * @return string|null
     */
    public function getFaultLocation()
    {
        return $this->container['fault_location'];
    }

    /**
     * Sets fault_location
     *
     * @param string|null $fault_location Fault Location.
     *
     * @return self
     */
    public function setFaultLocation($fault_location)
    {
        if (is_null($fault_location)) {
            array_push($this->openAPINullablesSetToNull, 'fault_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_location'] = $fault_location;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status Sync Status.
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        if (is_null($sync_status)) {
            array_push($this->openAPINullablesSetToNull, 'sync_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets downstream_speed
     *
     * @return string|null
     */
    public function getDownstreamSpeed()
    {
        return $this->container['downstream_speed'];
    }

    /**
     * Sets downstream_speed
     *
     * @param string|null $downstream_speed Downstream Speed MBPS.
     *
     * @return self
     */
    public function setDownstreamSpeed($downstream_speed)
    {
        if (is_null($downstream_speed)) {
            array_push($this->openAPINullablesSetToNull, 'downstream_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downstream_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downstream_speed'] = $downstream_speed;

        return $this;
    }

    /**
     * Gets upstream_speed
     *
     * @return string|null
     */
    public function getUpstreamSpeed()
    {
        return $this->container['upstream_speed'];
    }

    /**
     * Sets upstream_speed
     *
     * @param string|null $upstream_speed Upstream Speed MBPS.
     *
     * @return self
     */
    public function setUpstreamSpeed($upstream_speed)
    {
        if (is_null($upstream_speed)) {
            array_push($this->openAPINullablesSetToNull, 'upstream_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upstream_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upstream_speed'] = $upstream_speed;

        return $this;
    }

    /**
     * Gets appointment
     *
     * @return string|null
     */
    public function getAppointment()
    {
        return $this->container['appointment'];
    }

    /**
     * Sets appointment
     *
     * @param string|null $appointment Appointment Required.
     *
     * @return self
     */
    public function setAppointment($appointment)
    {
        if (is_null($appointment)) {
            array_push($this->openAPINullablesSetToNull, 'appointment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('appointment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['appointment'] = $appointment;

        return $this;
    }

    /**
     * Gets fault_report
     *
     * @return string|null
     */
    public function getFaultReport()
    {
        return $this->container['fault_report'];
    }

    /**
     * Sets fault_report
     *
     * @param string|null $fault_report Fault Report Advised.
     *
     * @return self
     */
    public function setFaultReport($fault_report)
    {
        if (is_null($fault_report)) {
            array_push($this->openAPINullablesSetToNull, 'fault_report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_report'] = $fault_report;

        return $this;
    }

    /**
     * Gets gea_fault_target
     *
     * @return string|null
     */
    public function getGeaFaultTarget()
    {
        return $this->container['gea_fault_target'];
    }

    /**
     * Sets gea_fault_target
     *
     * @param string|null $gea_fault_target GEA Fault Target Fix Time.
     *
     * @return self
     */
    public function setGeaFaultTarget($gea_fault_target)
    {
        if (is_null($gea_fault_target)) {
            array_push($this->openAPINullablesSetToNull, 'gea_fault_target');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gea_fault_target', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gea_fault_target'] = $gea_fault_target;

        return $this;
    }

    /**
     * Gets nte_power_status
     *
     * @return string|null
     */
    public function getNtePowerStatus()
    {
        return $this->container['nte_power_status'];
    }

    /**
     * Sets nte_power_status
     *
     * @param string|null $nte_power_status NTE Power Status.
     *
     * @return self
     */
    public function setNtePowerStatus($nte_power_status)
    {
        if (is_null($nte_power_status)) {
            array_push($this->openAPINullablesSetToNull, 'nte_power_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nte_power_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nte_power_status'] = $nte_power_status;

        return $this;
    }

    /**
     * Gets voice_test
     *
     * @return string|null
     */
    public function getVoiceTest()
    {
        return $this->container['voice_test'];
    }

    /**
     * Sets voice_test
     *
     * @param string|null $voice_test Voice Line Test Result.
     *
     * @return self
     */
    public function setVoiceTest($voice_test)
    {
        if (is_null($voice_test)) {
            array_push($this->openAPINullablesSetToNull, 'voice_test');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voice_test', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voice_test'] = $voice_test;

        return $this;
    }

    /**
     * Gets bridge_tap
     *
     * @return string|null
     */
    public function getBridgeTap()
    {
        return $this->container['bridge_tap'];
    }

    /**
     * Sets bridge_tap
     *
     * @param string|null $bridge_tap Bridge Tap.
     *
     * @return self
     */
    public function setBridgeTap($bridge_tap)
    {
        if (is_null($bridge_tap)) {
            array_push($this->openAPINullablesSetToNull, 'bridge_tap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bridge_tap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bridge_tap'] = $bridge_tap;

        return $this;
    }

    /**
     * Gets radio_frecuency
     *
     * @return string|null
     */
    public function getRadioFrecuency()
    {
        return $this->container['radio_frecuency'];
    }

    /**
     * Sets radio_frecuency
     *
     * @param string|null $radio_frecuency Radio Frequency Ingress.
     *
     * @return self
     */
    public function setRadioFrecuency($radio_frecuency)
    {
        if (is_null($radio_frecuency)) {
            array_push($this->openAPINullablesSetToNull, 'radio_frecuency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('radio_frecuency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['radio_frecuency'] = $radio_frecuency;

        return $this;
    }

    /**
     * Gets repetitive_electrical
     *
     * @return string|null
     */
    public function getRepetitiveElectrical()
    {
        return $this->container['repetitive_electrical'];
    }

    /**
     * Sets repetitive_electrical
     *
     * @param string|null $repetitive_electrical Repetitive Electrical Impulse Noise.
     *
     * @return self
     */
    public function setRepetitiveElectrical($repetitive_electrical)
    {
        if (is_null($repetitive_electrical)) {
            array_push($this->openAPINullablesSetToNull, 'repetitive_electrical');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repetitive_electrical', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repetitive_electrical'] = $repetitive_electrical;

        return $this;
    }

    /**
     * Gets cross_talk
     *
     * @return string|null
     */
    public function getCrossTalk()
    {
        return $this->container['cross_talk'];
    }

    /**
     * Sets cross_talk
     *
     * @param string|null $cross_talk Crosstalk.
     *
     * @return self
     */
    public function setCrossTalk($cross_talk)
    {
        if (is_null($cross_talk)) {
            array_push($this->openAPINullablesSetToNull, 'cross_talk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cross_talk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cross_talk'] = $cross_talk;

        return $this;
    }

    /**
     * Gets rrt_response
     *
     * @return string|null
     */
    public function getRrtResponse()
    {
        return $this->container['rrt_response'];
    }

    /**
     * Sets rrt_response
     *
     * @param string|null $rrt_response RRT Response Code.
     *
     * @return self
     */
    public function setRrtResponse($rrt_response)
    {
        if (is_null($rrt_response)) {
            array_push($this->openAPINullablesSetToNull, 'rrt_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rrt_response', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rrt_response'] = $rrt_response;

        return $this;
    }

    /**
     * Gets last_sesion
     *
     * @return string|null
     */
    public function getLastSesion()
    {
        return $this->container['last_sesion'];
    }

    /**
     * Sets last_sesion
     *
     * @param string|null $last_sesion Last Session Uptime.
     *
     * @return self
     */
    public function setLastSesion($last_sesion)
    {
        if (is_null($last_sesion)) {
            array_push($this->openAPINullablesSetToNull, 'last_sesion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_sesion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_sesion'] = $last_sesion;

        return $this;
    }

    /**
     * Gets current_policy
     *
     * @return string|null
     */
    public function getCurrentPolicy()
    {
        return $this->container['current_policy'];
    }

    /**
     * Sets current_policy
     *
     * @param string|null $current_policy Current Policy.
     *
     * @return self
     */
    public function setCurrentPolicy($current_policy)
    {
        if (is_null($current_policy)) {
            array_push($this->openAPINullablesSetToNull, 'current_policy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_policy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_policy'] = $current_policy;

        return $this;
    }

    /**
     * Gets current_cp
     *
     * @return string|null
     */
    public function getCurrentCp()
    {
        return $this->container['current_cp'];
    }

    /**
     * Sets current_cp
     *
     * @param string|null $current_cp Current CP Capping.
     *
     * @return self
     */
    public function setCurrentCp($current_cp)
    {
        if (is_null($current_cp)) {
            array_push($this->openAPINullablesSetToNull, 'current_cp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_cp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_cp'] = $current_cp;

        return $this;
    }

    /**
     * Gets line_rate
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null
     */
    public function getLineRate()
    {
        return $this->container['line_rate'];
    }

    /**
     * Sets line_rate
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null $line_rate line_rate
     *
     * @return self
     */
    public function setLineRate($line_rate)
    {
        if (is_null($line_rate)) {
            throw new \InvalidArgumentException('non-nullable line_rate cannot be null');
        }
        $this->container['line_rate'] = $line_rate;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null $uptime uptime
     *
     * @return self
     */
    public function setUptime($uptime)
    {
        if (is_null($uptime)) {
            throw new \InvalidArgumentException('non-nullable uptime cannot be null');
        }
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets retrains
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null
     */
    public function getRetrains()
    {
        return $this->container['retrains'];
    }

    /**
     * Sets retrains
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null $retrains retrains
     *
     * @return self
     */
    public function setRetrains($retrains)
    {
        if (is_null($retrains)) {
            throw new \InvalidArgumentException('non-nullable retrains cannot be null');
        }
        $this->container['retrains'] = $retrains;

        return $this;
    }

    /**
     * Gets tx_traffic
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null
     */
    public function getTxTraffic()
    {
        return $this->container['tx_traffic'];
    }

    /**
     * Sets tx_traffic
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null $tx_traffic tx_traffic
     *
     * @return self
     */
    public function setTxTraffic($tx_traffic)
    {
        if (is_null($tx_traffic)) {
            throw new \InvalidArgumentException('non-nullable tx_traffic cannot be null');
        }
        $this->container['tx_traffic'] = $tx_traffic;

        return $this;
    }

    /**
     * Gets rx_traffic
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null
     */
    public function getRxTraffic()
    {
        return $this->container['rx_traffic'];
    }

    /**
     * Sets rx_traffic
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null $rx_traffic rx_traffic
     *
     * @return self
     */
    public function setRxTraffic($rx_traffic)
    {
        if (is_null($rx_traffic)) {
            throw new \InvalidArgumentException('non-nullable rx_traffic cannot be null');
        }
        $this->container['rx_traffic'] = $rx_traffic;

        return $this;
    }

    /**
     * Gets policing_discards
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null
     */
    public function getPolicingDiscards()
    {
        return $this->container['policing_discards'];
    }

    /**
     * Sets policing_discards
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaParameters|null $policing_discards policing_discards
     *
     * @return self
     */
    public function setPolicingDiscards($policing_discards)
    {
        if (is_null($policing_discards)) {
            throw new \InvalidArgumentException('non-nullable policing_discards cannot be null');
        }
        $this->container['policing_discards'] = $policing_discards;

        return $this;
    }

    /**
     * Gets profile_name
     *
     * @return string|null
     */
    public function getProfileName()
    {
        return $this->container['profile_name'];
    }

    /**
     * Sets profile_name
     *
     * @param string|null $profile_name Profile Name.
     *
     * @return self
     */
    public function setProfileName($profile_name)
    {
        if (is_null($profile_name)) {
            array_push($this->openAPINullablesSetToNull, 'profile_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_name'] = $profile_name;

        return $this;
    }

    /**
     * Gets profile_time
     *
     * @return string|null
     */
    public function getProfileTime()
    {
        return $this->container['profile_time'];
    }

    /**
     * Sets profile_time
     *
     * @param string|null $profile_time Profile Timestamp.
     *
     * @return self
     */
    public function setProfileTime($profile_time)
    {
        if (is_null($profile_time)) {
            array_push($this->openAPINullablesSetToNull, 'profile_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_time'] = $profile_time;

        return $this;
    }

    /**
     * Gets last_minutes
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaVdsl|null
     */
    public function getLastMinutes()
    {
        return $this->container['last_minutes'];
    }

    /**
     * Sets last_minutes
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaVdsl|null $last_minutes last_minutes
     *
     * @return self
     */
    public function setLastMinutes($last_minutes)
    {
        if (is_null($last_minutes)) {
            throw new \InvalidArgumentException('non-nullable last_minutes cannot be null');
        }
        $this->container['last_minutes'] = $last_minutes;

        return $this;
    }

    /**
     * Gets current_minutes
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGeaVdsl|null
     */
    public function getCurrentMinutes()
    {
        return $this->container['current_minutes'];
    }

    /**
     * Sets current_minutes
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGeaVdsl|null $current_minutes current_minutes
     *
     * @return self
     */
    public function setCurrentMinutes($current_minutes)
    {
        if (is_null($current_minutes)) {
            throw new \InvalidArgumentException('non-nullable current_minutes cannot be null');
        }
        $this->container['current_minutes'] = $current_minutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


