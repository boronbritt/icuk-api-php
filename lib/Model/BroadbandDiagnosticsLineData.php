<?php
/**
 * BroadbandDiagnosticsLineData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandDiagnosticsLineData Class Doc Comment
 *
 * @category Class
 * @description Represents a broadband diagnostics line data response
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandDiagnosticsLineData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandDiagnosticsLineData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_downstream_speed' => 'int',
        'max_upstream_speed' => 'int',
        'current_downstream_speed' => 'int',
        'current_upstream_speed' => 'int',
        'attenuation_downstream' => 'float',
        'attenuation_upstream' => 'float',
        'snr_margin' => 'float',
        'sync_count' => 'int',
        'lost_sync_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'max_downstream_speed' => 'int32',
        'max_upstream_speed' => 'int32',
        'current_downstream_speed' => 'int32',
        'current_upstream_speed' => 'int32',
        'attenuation_downstream' => 'double',
        'attenuation_upstream' => 'double',
        'snr_margin' => 'double',
        'sync_count' => 'int32',
        'lost_sync_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'max_downstream_speed' => false,
		'max_upstream_speed' => false,
		'current_downstream_speed' => false,
		'current_upstream_speed' => false,
		'attenuation_downstream' => false,
		'attenuation_upstream' => false,
		'snr_margin' => false,
		'sync_count' => false,
		'lost_sync_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_downstream_speed' => 'max_downstream_speed',
        'max_upstream_speed' => 'max_upstream_speed',
        'current_downstream_speed' => 'current_downstream_speed',
        'current_upstream_speed' => 'current_upstream_speed',
        'attenuation_downstream' => 'attenuation_downstream',
        'attenuation_upstream' => 'attenuation_upstream',
        'snr_margin' => 'snr_margin',
        'sync_count' => 'sync_count',
        'lost_sync_count' => 'lost_sync_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_downstream_speed' => 'setMaxDownstreamSpeed',
        'max_upstream_speed' => 'setMaxUpstreamSpeed',
        'current_downstream_speed' => 'setCurrentDownstreamSpeed',
        'current_upstream_speed' => 'setCurrentUpstreamSpeed',
        'attenuation_downstream' => 'setAttenuationDownstream',
        'attenuation_upstream' => 'setAttenuationUpstream',
        'snr_margin' => 'setSnrMargin',
        'sync_count' => 'setSyncCount',
        'lost_sync_count' => 'setLostSyncCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_downstream_speed' => 'getMaxDownstreamSpeed',
        'max_upstream_speed' => 'getMaxUpstreamSpeed',
        'current_downstream_speed' => 'getCurrentDownstreamSpeed',
        'current_upstream_speed' => 'getCurrentUpstreamSpeed',
        'attenuation_downstream' => 'getAttenuationDownstream',
        'attenuation_upstream' => 'getAttenuationUpstream',
        'snr_margin' => 'getSnrMargin',
        'sync_count' => 'getSyncCount',
        'lost_sync_count' => 'getLostSyncCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('max_downstream_speed', $data ?? [], null);
        $this->setIfExists('max_upstream_speed', $data ?? [], null);
        $this->setIfExists('current_downstream_speed', $data ?? [], null);
        $this->setIfExists('current_upstream_speed', $data ?? [], null);
        $this->setIfExists('attenuation_downstream', $data ?? [], null);
        $this->setIfExists('attenuation_upstream', $data ?? [], null);
        $this->setIfExists('snr_margin', $data ?? [], null);
        $this->setIfExists('sync_count', $data ?? [], null);
        $this->setIfExists('lost_sync_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_downstream_speed
     *
     * @return int|null
     */
    public function getMaxDownstreamSpeed()
    {
        return $this->container['max_downstream_speed'];
    }

    /**
     * Sets max_downstream_speed
     *
     * @param int|null $max_downstream_speed Max downstream speed in Kbps
     *
     * @return self
     */
    public function setMaxDownstreamSpeed($max_downstream_speed)
    {
        if (is_null($max_downstream_speed)) {
            throw new \InvalidArgumentException('non-nullable max_downstream_speed cannot be null');
        }
        $this->container['max_downstream_speed'] = $max_downstream_speed;

        return $this;
    }

    /**
     * Gets max_upstream_speed
     *
     * @return int|null
     */
    public function getMaxUpstreamSpeed()
    {
        return $this->container['max_upstream_speed'];
    }

    /**
     * Sets max_upstream_speed
     *
     * @param int|null $max_upstream_speed Max upstream speed in Kbps
     *
     * @return self
     */
    public function setMaxUpstreamSpeed($max_upstream_speed)
    {
        if (is_null($max_upstream_speed)) {
            throw new \InvalidArgumentException('non-nullable max_upstream_speed cannot be null');
        }
        $this->container['max_upstream_speed'] = $max_upstream_speed;

        return $this;
    }

    /**
     * Gets current_downstream_speed
     *
     * @return int|null
     */
    public function getCurrentDownstreamSpeed()
    {
        return $this->container['current_downstream_speed'];
    }

    /**
     * Sets current_downstream_speed
     *
     * @param int|null $current_downstream_speed Current downstream speed in Kbps
     *
     * @return self
     */
    public function setCurrentDownstreamSpeed($current_downstream_speed)
    {
        if (is_null($current_downstream_speed)) {
            throw new \InvalidArgumentException('non-nullable current_downstream_speed cannot be null');
        }
        $this->container['current_downstream_speed'] = $current_downstream_speed;

        return $this;
    }

    /**
     * Gets current_upstream_speed
     *
     * @return int|null
     */
    public function getCurrentUpstreamSpeed()
    {
        return $this->container['current_upstream_speed'];
    }

    /**
     * Sets current_upstream_speed
     *
     * @param int|null $current_upstream_speed Current upstream speed in Kbps
     *
     * @return self
     */
    public function setCurrentUpstreamSpeed($current_upstream_speed)
    {
        if (is_null($current_upstream_speed)) {
            throw new \InvalidArgumentException('non-nullable current_upstream_speed cannot be null');
        }
        $this->container['current_upstream_speed'] = $current_upstream_speed;

        return $this;
    }

    /**
     * Gets attenuation_downstream
     *
     * @return float|null
     */
    public function getAttenuationDownstream()
    {
        return $this->container['attenuation_downstream'];
    }

    /**
     * Sets attenuation_downstream
     *
     * @param float|null $attenuation_downstream Attenuation downstream in dB
     *
     * @return self
     */
    public function setAttenuationDownstream($attenuation_downstream)
    {
        if (is_null($attenuation_downstream)) {
            throw new \InvalidArgumentException('non-nullable attenuation_downstream cannot be null');
        }
        $this->container['attenuation_downstream'] = $attenuation_downstream;

        return $this;
    }

    /**
     * Gets attenuation_upstream
     *
     * @return float|null
     */
    public function getAttenuationUpstream()
    {
        return $this->container['attenuation_upstream'];
    }

    /**
     * Sets attenuation_upstream
     *
     * @param float|null $attenuation_upstream Attenuation upstream in dB
     *
     * @return self
     */
    public function setAttenuationUpstream($attenuation_upstream)
    {
        if (is_null($attenuation_upstream)) {
            throw new \InvalidArgumentException('non-nullable attenuation_upstream cannot be null');
        }
        $this->container['attenuation_upstream'] = $attenuation_upstream;

        return $this;
    }

    /**
     * Gets snr_margin
     *
     * @return float|null
     */
    public function getSnrMargin()
    {
        return $this->container['snr_margin'];
    }

    /**
     * Sets snr_margin
     *
     * @param float|null $snr_margin Downstream SNR margin in dB
     *
     * @return self
     */
    public function setSnrMargin($snr_margin)
    {
        if (is_null($snr_margin)) {
            throw new \InvalidArgumentException('non-nullable snr_margin cannot be null');
        }
        $this->container['snr_margin'] = $snr_margin;

        return $this;
    }

    /**
     * Gets sync_count
     *
     * @return int|null
     */
    public function getSyncCount()
    {
        return $this->container['sync_count'];
    }

    /**
     * Sets sync_count
     *
     * @param int|null $sync_count Sync count
     *
     * @return self
     */
    public function setSyncCount($sync_count)
    {
        if (is_null($sync_count)) {
            throw new \InvalidArgumentException('non-nullable sync_count cannot be null');
        }
        $this->container['sync_count'] = $sync_count;

        return $this;
    }

    /**
     * Gets lost_sync_count
     *
     * @return int|null
     */
    public function getLostSyncCount()
    {
        return $this->container['lost_sync_count'];
    }

    /**
     * Sets lost_sync_count
     *
     * @param int|null $lost_sync_count Lost sync count
     *
     * @return self
     */
    public function setLostSyncCount($lost_sync_count)
    {
        if (is_null($lost_sync_count)) {
            throw new \InvalidArgumentException('non-nullable lost_sync_count cannot be null');
        }
        $this->container['lost_sync_count'] = $lost_sync_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


