<?php
/**
 * BroadbandProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandProduct Class Doc Comment
 *
 * @category Class
 * @description Represents a broadband product details
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'category' => 'string',
        'price' => 'float',
        'activation_fee' => 'float',
        'adsl_migration_fee' => 'float',
        'adsl_llu_migration_fee' => 'float',
        'fttc_migration_fee' => 'float',
        'fttc_llu_migration_fee' => 'float',
        'fttc_reverse_migration_fee' => 'float',
        'fast_track_price' => 'float',
        'provider' => 'string',
        'technology' => 'string',
        'down_speed' => 'int',
        'up_speed' => 'int',
        'peak_cap' => 'int',
        'off_peak_cap' => 'int',
        'contention' => 'int',
        'product_class' => 'string',
        'provide_lead_time' => 'int',
        'migration_lead_time' => 'int',
        'peak_start' => 'string',
        'peak_end' => 'string',
        'contract_length' => 'int',
        'cease_lead_time' => 'int',
        'cease_first_date' => '\DateTime',
        'requires_our_line_rental' => 'bool',
        'unlimited_cap' => 'bool',
        'market' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'category' => null,
        'price' => 'double',
        'activation_fee' => 'double',
        'adsl_migration_fee' => 'double',
        'adsl_llu_migration_fee' => 'double',
        'fttc_migration_fee' => 'double',
        'fttc_llu_migration_fee' => 'double',
        'fttc_reverse_migration_fee' => 'double',
        'fast_track_price' => 'double',
        'provider' => null,
        'technology' => null,
        'down_speed' => 'int32',
        'up_speed' => 'int32',
        'peak_cap' => 'int32',
        'off_peak_cap' => 'int32',
        'contention' => 'int32',
        'product_class' => null,
        'provide_lead_time' => 'int32',
        'migration_lead_time' => 'int32',
        'peak_start' => null,
        'peak_end' => null,
        'contract_length' => 'int32',
        'cease_lead_time' => 'int32',
        'cease_first_date' => 'date-time',
        'requires_our_line_rental' => null,
        'unlimited_cap' => null,
        'market' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => true,
		'category' => true,
		'price' => false,
		'activation_fee' => false,
		'adsl_migration_fee' => false,
		'adsl_llu_migration_fee' => false,
		'fttc_migration_fee' => false,
		'fttc_llu_migration_fee' => false,
		'fttc_reverse_migration_fee' => false,
		'fast_track_price' => false,
		'provider' => false,
		'technology' => true,
		'down_speed' => false,
		'up_speed' => false,
		'peak_cap' => false,
		'off_peak_cap' => false,
		'contention' => false,
		'product_class' => false,
		'provide_lead_time' => false,
		'migration_lead_time' => false,
		'peak_start' => true,
		'peak_end' => true,
		'contract_length' => false,
		'cease_lead_time' => false,
		'cease_first_date' => false,
		'requires_our_line_rental' => false,
		'unlimited_cap' => false,
		'market' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'category' => 'category',
        'price' => 'price',
        'activation_fee' => 'activation_fee',
        'adsl_migration_fee' => 'adsl_migration_fee',
        'adsl_llu_migration_fee' => 'adsl_llu_migration_fee',
        'fttc_migration_fee' => 'fttc_migration_fee',
        'fttc_llu_migration_fee' => 'fttc_llu_migration_fee',
        'fttc_reverse_migration_fee' => 'fttc_reverse_migration_fee',
        'fast_track_price' => 'fast_track_price',
        'provider' => 'provider',
        'technology' => 'technology',
        'down_speed' => 'down_speed',
        'up_speed' => 'up_speed',
        'peak_cap' => 'peak_cap',
        'off_peak_cap' => 'off_peak_cap',
        'contention' => 'contention',
        'product_class' => 'product_class',
        'provide_lead_time' => 'provide_lead_time',
        'migration_lead_time' => 'migration_lead_time',
        'peak_start' => 'peak_start',
        'peak_end' => 'peak_end',
        'contract_length' => 'contract_length',
        'cease_lead_time' => 'cease_lead_time',
        'cease_first_date' => 'cease_first_date',
        'requires_our_line_rental' => 'requires_our_line_rental',
        'unlimited_cap' => 'unlimited_cap',
        'market' => 'market'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'category' => 'setCategory',
        'price' => 'setPrice',
        'activation_fee' => 'setActivationFee',
        'adsl_migration_fee' => 'setAdslMigrationFee',
        'adsl_llu_migration_fee' => 'setAdslLluMigrationFee',
        'fttc_migration_fee' => 'setFttcMigrationFee',
        'fttc_llu_migration_fee' => 'setFttcLluMigrationFee',
        'fttc_reverse_migration_fee' => 'setFttcReverseMigrationFee',
        'fast_track_price' => 'setFastTrackPrice',
        'provider' => 'setProvider',
        'technology' => 'setTechnology',
        'down_speed' => 'setDownSpeed',
        'up_speed' => 'setUpSpeed',
        'peak_cap' => 'setPeakCap',
        'off_peak_cap' => 'setOffPeakCap',
        'contention' => 'setContention',
        'product_class' => 'setProductClass',
        'provide_lead_time' => 'setProvideLeadTime',
        'migration_lead_time' => 'setMigrationLeadTime',
        'peak_start' => 'setPeakStart',
        'peak_end' => 'setPeakEnd',
        'contract_length' => 'setContractLength',
        'cease_lead_time' => 'setCeaseLeadTime',
        'cease_first_date' => 'setCeaseFirstDate',
        'requires_our_line_rental' => 'setRequiresOurLineRental',
        'unlimited_cap' => 'setUnlimitedCap',
        'market' => 'setMarket'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'category' => 'getCategory',
        'price' => 'getPrice',
        'activation_fee' => 'getActivationFee',
        'adsl_migration_fee' => 'getAdslMigrationFee',
        'adsl_llu_migration_fee' => 'getAdslLluMigrationFee',
        'fttc_migration_fee' => 'getFttcMigrationFee',
        'fttc_llu_migration_fee' => 'getFttcLluMigrationFee',
        'fttc_reverse_migration_fee' => 'getFttcReverseMigrationFee',
        'fast_track_price' => 'getFastTrackPrice',
        'provider' => 'getProvider',
        'technology' => 'getTechnology',
        'down_speed' => 'getDownSpeed',
        'up_speed' => 'getUpSpeed',
        'peak_cap' => 'getPeakCap',
        'off_peak_cap' => 'getOffPeakCap',
        'contention' => 'getContention',
        'product_class' => 'getProductClass',
        'provide_lead_time' => 'getProvideLeadTime',
        'migration_lead_time' => 'getMigrationLeadTime',
        'peak_start' => 'getPeakStart',
        'peak_end' => 'getPeakEnd',
        'contract_length' => 'getContractLength',
        'cease_lead_time' => 'getCeaseLeadTime',
        'cease_first_date' => 'getCeaseFirstDate',
        'requires_our_line_rental' => 'getRequiresOurLineRental',
        'unlimited_cap' => 'getUnlimitedCap',
        'market' => 'getMarket'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROVIDER_WBC_21_CN = 'WBC_21CN';
    public const PROVIDER_WBC_20_CN = 'WBC_20CN';
    public const PROVIDER_CABLE_AND_WIRELESS = 'CABLE_AND_WIRELESS';
    public const PROVIDER_TTB = 'TTB';
    public const PRODUCT_CLASS_HOME = 'HOME';
    public const PRODUCT_CLASS_BUSINESS = 'BUSINESS';
    public const PRODUCT_CLASS_ENTERPRISE = 'ENTERPRISE';
    public const MARKET_BOTH = 'BOTH';
    public const MARKET_B = 'B';
    public const MARKET_A = 'A';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_WBC_21_CN,
            self::PROVIDER_WBC_20_CN,
            self::PROVIDER_CABLE_AND_WIRELESS,
            self::PROVIDER_TTB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductClassAllowableValues()
    {
        return [
            self::PRODUCT_CLASS_HOME,
            self::PRODUCT_CLASS_BUSINESS,
            self::PRODUCT_CLASS_ENTERPRISE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMarketAllowableValues()
    {
        return [
            self::MARKET_BOTH,
            self::MARKET_B,
            self::MARKET_A,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('activation_fee', $data ?? [], null);
        $this->setIfExists('adsl_migration_fee', $data ?? [], null);
        $this->setIfExists('adsl_llu_migration_fee', $data ?? [], null);
        $this->setIfExists('fttc_migration_fee', $data ?? [], null);
        $this->setIfExists('fttc_llu_migration_fee', $data ?? [], null);
        $this->setIfExists('fttc_reverse_migration_fee', $data ?? [], null);
        $this->setIfExists('fast_track_price', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('technology', $data ?? [], null);
        $this->setIfExists('down_speed', $data ?? [], null);
        $this->setIfExists('up_speed', $data ?? [], null);
        $this->setIfExists('peak_cap', $data ?? [], null);
        $this->setIfExists('off_peak_cap', $data ?? [], null);
        $this->setIfExists('contention', $data ?? [], null);
        $this->setIfExists('product_class', $data ?? [], null);
        $this->setIfExists('provide_lead_time', $data ?? [], null);
        $this->setIfExists('migration_lead_time', $data ?? [], null);
        $this->setIfExists('peak_start', $data ?? [], null);
        $this->setIfExists('peak_end', $data ?? [], null);
        $this->setIfExists('contract_length', $data ?? [], null);
        $this->setIfExists('cease_lead_time', $data ?? [], null);
        $this->setIfExists('cease_first_date', $data ?? [], null);
        $this->setIfExists('requires_our_line_rental', $data ?? [], null);
        $this->setIfExists('unlimited_cap', $data ?? [], null);
        $this->setIfExists('market', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'provider', must be one of '%s'",
                $this->container['provider'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProductClassAllowableValues();
        if (!is_null($this->container['product_class']) && !in_array($this->container['product_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_class', must be one of '%s'",
                $this->container['product_class'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMarketAllowableValues();
        if (!is_null($this->container['market']) && !in_array($this->container['market'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'market', must be one of '%s'",
                $this->container['market'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the product
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the product
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price (£)
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets activation_fee
     *
     * @return float|null
     */
    public function getActivationFee()
    {
        return $this->container['activation_fee'];
    }

    /**
     * Sets activation_fee
     *
     * @param float|null $activation_fee Activation fee (£)
     *
     * @return self
     */
    public function setActivationFee($activation_fee)
    {
        if (is_null($activation_fee)) {
            throw new \InvalidArgumentException('non-nullable activation_fee cannot be null');
        }
        $this->container['activation_fee'] = $activation_fee;

        return $this;
    }

    /**
     * Gets adsl_migration_fee
     *
     * @return float|null
     */
    public function getAdslMigrationFee()
    {
        return $this->container['adsl_migration_fee'];
    }

    /**
     * Sets adsl_migration_fee
     *
     * @param float|null $adsl_migration_fee Migration fee (£)
     *
     * @return self
     */
    public function setAdslMigrationFee($adsl_migration_fee)
    {
        if (is_null($adsl_migration_fee)) {
            throw new \InvalidArgumentException('non-nullable adsl_migration_fee cannot be null');
        }
        $this->container['adsl_migration_fee'] = $adsl_migration_fee;

        return $this;
    }

    /**
     * Gets adsl_llu_migration_fee
     *
     * @return float|null
     */
    public function getAdslLluMigrationFee()
    {
        return $this->container['adsl_llu_migration_fee'];
    }

    /**
     * Sets adsl_llu_migration_fee
     *
     * @param float|null $adsl_llu_migration_fee LLU Migration fee (£)
     *
     * @return self
     */
    public function setAdslLluMigrationFee($adsl_llu_migration_fee)
    {
        if (is_null($adsl_llu_migration_fee)) {
            throw new \InvalidArgumentException('non-nullable adsl_llu_migration_fee cannot be null');
        }
        $this->container['adsl_llu_migration_fee'] = $adsl_llu_migration_fee;

        return $this;
    }

    /**
     * Gets fttc_migration_fee
     *
     * @return float|null
     */
    public function getFttcMigrationFee()
    {
        return $this->container['fttc_migration_fee'];
    }

    /**
     * Sets fttc_migration_fee
     *
     * @param float|null $fttc_migration_fee FTTC Migration fee (£)
     *
     * @return self
     */
    public function setFttcMigrationFee($fttc_migration_fee)
    {
        if (is_null($fttc_migration_fee)) {
            throw new \InvalidArgumentException('non-nullable fttc_migration_fee cannot be null');
        }
        $this->container['fttc_migration_fee'] = $fttc_migration_fee;

        return $this;
    }

    /**
     * Gets fttc_llu_migration_fee
     *
     * @return float|null
     */
    public function getFttcLluMigrationFee()
    {
        return $this->container['fttc_llu_migration_fee'];
    }

    /**
     * Sets fttc_llu_migration_fee
     *
     * @param float|null $fttc_llu_migration_fee FTTC LLU Migration fee (£)
     *
     * @return self
     */
    public function setFttcLluMigrationFee($fttc_llu_migration_fee)
    {
        if (is_null($fttc_llu_migration_fee)) {
            throw new \InvalidArgumentException('non-nullable fttc_llu_migration_fee cannot be null');
        }
        $this->container['fttc_llu_migration_fee'] = $fttc_llu_migration_fee;

        return $this;
    }

    /**
     * Gets fttc_reverse_migration_fee
     *
     * @return float|null
     */
    public function getFttcReverseMigrationFee()
    {
        return $this->container['fttc_reverse_migration_fee'];
    }

    /**
     * Sets fttc_reverse_migration_fee
     *
     * @param float|null $fttc_reverse_migration_fee FTTC Reverse Migration fee (£)
     *
     * @return self
     */
    public function setFttcReverseMigrationFee($fttc_reverse_migration_fee)
    {
        if (is_null($fttc_reverse_migration_fee)) {
            throw new \InvalidArgumentException('non-nullable fttc_reverse_migration_fee cannot be null');
        }
        $this->container['fttc_reverse_migration_fee'] = $fttc_reverse_migration_fee;

        return $this;
    }

    /**
     * Gets fast_track_price
     *
     * @return float|null
     */
    public function getFastTrackPrice()
    {
        return $this->container['fast_track_price'];
    }

    /**
     * Sets fast_track_price
     *
     * @param float|null $fast_track_price Fast-track price (£)
     *
     * @return self
     */
    public function setFastTrackPrice($fast_track_price)
    {
        if (is_null($fast_track_price)) {
            throw new \InvalidArgumentException('non-nullable fast_track_price cannot be null');
        }
        $this->container['fast_track_price'] = $fast_track_price;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider Provider<p>Possible values:</p>  <ul>  <li><b>1</b> - WBC 21CN.</li>  <li><b>3</b> - WBC 20CN.</li>  <li><b>4</b> - Cable & Wireless.</li>  <li><b>5</b> - TalkTalk</li>  </ul>
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'provider', must be one of '%s'",
                    $provider,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets technology
     *
     * @return string|null
     */
    public function getTechnology()
    {
        return $this->container['technology'];
    }

    /**
     * Sets technology
     *
     * @param string|null $technology Technology
     *
     * @return self
     */
    public function setTechnology($technology)
    {
        if (is_null($technology)) {
            array_push($this->openAPINullablesSetToNull, 'technology');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('technology', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['technology'] = $technology;

        return $this;
    }

    /**
     * Gets down_speed
     *
     * @return int|null
     */
    public function getDownSpeed()
    {
        return $this->container['down_speed'];
    }

    /**
     * Sets down_speed
     *
     * @param int|null $down_speed Down speed (kbps)
     *
     * @return self
     */
    public function setDownSpeed($down_speed)
    {
        if (is_null($down_speed)) {
            throw new \InvalidArgumentException('non-nullable down_speed cannot be null');
        }
        $this->container['down_speed'] = $down_speed;

        return $this;
    }

    /**
     * Gets up_speed
     *
     * @return int|null
     */
    public function getUpSpeed()
    {
        return $this->container['up_speed'];
    }

    /**
     * Sets up_speed
     *
     * @param int|null $up_speed Up speed (kbps)
     *
     * @return self
     */
    public function setUpSpeed($up_speed)
    {
        if (is_null($up_speed)) {
            throw new \InvalidArgumentException('non-nullable up_speed cannot be null');
        }
        $this->container['up_speed'] = $up_speed;

        return $this;
    }

    /**
     * Gets peak_cap
     *
     * @return int|null
     */
    public function getPeakCap()
    {
        return $this->container['peak_cap'];
    }

    /**
     * Sets peak_cap
     *
     * @param int|null $peak_cap Peak cap (GB)
     *
     * @return self
     */
    public function setPeakCap($peak_cap)
    {
        if (is_null($peak_cap)) {
            throw new \InvalidArgumentException('non-nullable peak_cap cannot be null');
        }
        $this->container['peak_cap'] = $peak_cap;

        return $this;
    }

    /**
     * Gets off_peak_cap
     *
     * @return int|null
     */
    public function getOffPeakCap()
    {
        return $this->container['off_peak_cap'];
    }

    /**
     * Sets off_peak_cap
     *
     * @param int|null $off_peak_cap Off peak cap (GB)
     *
     * @return self
     */
    public function setOffPeakCap($off_peak_cap)
    {
        if (is_null($off_peak_cap)) {
            throw new \InvalidArgumentException('non-nullable off_peak_cap cannot be null');
        }
        $this->container['off_peak_cap'] = $off_peak_cap;

        return $this;
    }

    /**
     * Gets contention
     *
     * @return int|null
     */
    public function getContention()
    {
        return $this->container['contention'];
    }

    /**
     * Sets contention
     *
     * @param int|null $contention Contention
     *
     * @return self
     */
    public function setContention($contention)
    {
        if (is_null($contention)) {
            throw new \InvalidArgumentException('non-nullable contention cannot be null');
        }
        $this->container['contention'] = $contention;

        return $this;
    }

    /**
     * Gets product_class
     *
     * @return string|null
     */
    public function getProductClass()
    {
        return $this->container['product_class'];
    }

    /**
     * Sets product_class
     *
     * @param string|null $product_class Product class<p>Possible values:</p>  <ul>  <li><b>1</b> - Home.</li>  <li><b>2</b> - Business.</li>  <li><b>3</b> - Enterprise.</li>  </ul>
     *
     * @return self
     */
    public function setProductClass($product_class)
    {
        if (is_null($product_class)) {
            throw new \InvalidArgumentException('non-nullable product_class cannot be null');
        }
        $allowedValues = $this->getProductClassAllowableValues();
        if (!in_array($product_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_class', must be one of '%s'",
                    $product_class,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_class'] = $product_class;

        return $this;
    }

    /**
     * Gets provide_lead_time
     *
     * @return int|null
     */
    public function getProvideLeadTime()
    {
        return $this->container['provide_lead_time'];
    }

    /**
     * Sets provide_lead_time
     *
     * @param int|null $provide_lead_time Provide lead time (days)
     *
     * @return self
     */
    public function setProvideLeadTime($provide_lead_time)
    {
        if (is_null($provide_lead_time)) {
            throw new \InvalidArgumentException('non-nullable provide_lead_time cannot be null');
        }
        $this->container['provide_lead_time'] = $provide_lead_time;

        return $this;
    }

    /**
     * Gets migration_lead_time
     *
     * @return int|null
     */
    public function getMigrationLeadTime()
    {
        return $this->container['migration_lead_time'];
    }

    /**
     * Sets migration_lead_time
     *
     * @param int|null $migration_lead_time Migration lead time (days)
     *
     * @return self
     */
    public function setMigrationLeadTime($migration_lead_time)
    {
        if (is_null($migration_lead_time)) {
            throw new \InvalidArgumentException('non-nullable migration_lead_time cannot be null');
        }
        $this->container['migration_lead_time'] = $migration_lead_time;

        return $this;
    }

    /**
     * Gets peak_start
     *
     * @return string|null
     */
    public function getPeakStart()
    {
        return $this->container['peak_start'];
    }

    /**
     * Sets peak_start
     *
     * @param string|null $peak_start Peak start (hh:mm:ss)
     *
     * @return self
     */
    public function setPeakStart($peak_start)
    {
        if (is_null($peak_start)) {
            array_push($this->openAPINullablesSetToNull, 'peak_start');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('peak_start', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['peak_start'] = $peak_start;

        return $this;
    }

    /**
     * Gets peak_end
     *
     * @return string|null
     */
    public function getPeakEnd()
    {
        return $this->container['peak_end'];
    }

    /**
     * Sets peak_end
     *
     * @param string|null $peak_end Peak end (hh:mm:ss)
     *
     * @return self
     */
    public function setPeakEnd($peak_end)
    {
        if (is_null($peak_end)) {
            array_push($this->openAPINullablesSetToNull, 'peak_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('peak_end', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['peak_end'] = $peak_end;

        return $this;
    }

    /**
     * Gets contract_length
     *
     * @return int|null
     */
    public function getContractLength()
    {
        return $this->container['contract_length'];
    }

    /**
     * Sets contract_length
     *
     * @param int|null $contract_length Contract length (months)
     *
     * @return self
     */
    public function setContractLength($contract_length)
    {
        if (is_null($contract_length)) {
            throw new \InvalidArgumentException('non-nullable contract_length cannot be null');
        }
        $this->container['contract_length'] = $contract_length;

        return $this;
    }

    /**
     * Gets cease_lead_time
     *
     * @return int|null
     */
    public function getCeaseLeadTime()
    {
        return $this->container['cease_lead_time'];
    }

    /**
     * Sets cease_lead_time
     *
     * @param int|null $cease_lead_time Cease lead time (days)
     *
     * @return self
     */
    public function setCeaseLeadTime($cease_lead_time)
    {
        if (is_null($cease_lead_time)) {
            throw new \InvalidArgumentException('non-nullable cease_lead_time cannot be null');
        }
        $this->container['cease_lead_time'] = $cease_lead_time;

        return $this;
    }

    /**
     * Gets cease_first_date
     *
     * @return \DateTime|null
     */
    public function getCeaseFirstDate()
    {
        return $this->container['cease_first_date'];
    }

    /**
     * Sets cease_first_date
     *
     * @param \DateTime|null $cease_first_date First acceptable cease date
     *
     * @return self
     */
    public function setCeaseFirstDate($cease_first_date)
    {
        if (is_null($cease_first_date)) {
            throw new \InvalidArgumentException('non-nullable cease_first_date cannot be null');
        }
        $this->container['cease_first_date'] = $cease_first_date;

        return $this;
    }

    /**
     * Gets requires_our_line_rental
     *
     * @return bool|null
     */
    public function getRequiresOurLineRental()
    {
        return $this->container['requires_our_line_rental'];
    }

    /**
     * Sets requires_our_line_rental
     *
     * @param bool|null $requires_our_line_rental Requires out line rental
     *
     * @return self
     */
    public function setRequiresOurLineRental($requires_our_line_rental)
    {
        if (is_null($requires_our_line_rental)) {
            throw new \InvalidArgumentException('non-nullable requires_our_line_rental cannot be null');
        }
        $this->container['requires_our_line_rental'] = $requires_our_line_rental;

        return $this;
    }

    /**
     * Gets unlimited_cap
     *
     * @return bool|null
     */
    public function getUnlimitedCap()
    {
        return $this->container['unlimited_cap'];
    }

    /**
     * Sets unlimited_cap
     *
     * @param bool|null $unlimited_cap Unlimited cap
     *
     * @return self
     */
    public function setUnlimitedCap($unlimited_cap)
    {
        if (is_null($unlimited_cap)) {
            throw new \InvalidArgumentException('non-nullable unlimited_cap cannot be null');
        }
        $this->container['unlimited_cap'] = $unlimited_cap;

        return $this;
    }

    /**
     * Gets market
     *
     * @return string|null
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     *
     * @param string|null $market Exchange market type<p>Possible values:</p>  <ul>  <li><b>0</b> - Both Markets.</li>  <li><b>1</b> - Market B.</li>  <li><b>2</b> - Market A.</li>  </ul>
     *
     * @return self
     */
    public function setMarket($market)
    {
        if (is_null($market)) {
            throw new \InvalidArgumentException('non-nullable market cannot be null');
        }
        $allowedValues = $this->getMarketAllowableValues();
        if (!in_array($market, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'market', must be one of '%s'",
                    $market,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['market'] = $market;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


