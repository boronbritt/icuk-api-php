<?php
/**
 * BroadbandKBDDecision
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDDecision Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD decision
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDDecision implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDDecision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'problem' => 'string',
        'resolution' => 'string',
        'overall_rag_status' => 'string',
        'location_rag_field' => 'string',
        'location_rag_value' => 'string',
        'circuit_service_status' => 'string',
        'dlm_info' => '\OpenAPI\Client\Model\BroadbandKBDDecisionDlm',
        'additional_inventory' => '\OpenAPI\Client\Model\BroadbandKBDDecisionAdditionalInventory'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'problem' => null,
        'resolution' => null,
        'overall_rag_status' => null,
        'location_rag_field' => null,
        'location_rag_value' => null,
        'circuit_service_status' => null,
        'dlm_info' => null,
        'additional_inventory' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'problem' => true,
		'resolution' => true,
		'overall_rag_status' => true,
		'location_rag_field' => true,
		'location_rag_value' => true,
		'circuit_service_status' => true,
		'dlm_info' => false,
		'additional_inventory' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'problem' => 'problem',
        'resolution' => 'resolution',
        'overall_rag_status' => 'overall_rag_status',
        'location_rag_field' => 'location_rag_field',
        'location_rag_value' => 'location_rag_value',
        'circuit_service_status' => 'circuit_service_status',
        'dlm_info' => 'dlm_info',
        'additional_inventory' => 'additional_inventory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'problem' => 'setProblem',
        'resolution' => 'setResolution',
        'overall_rag_status' => 'setOverallRagStatus',
        'location_rag_field' => 'setLocationRagField',
        'location_rag_value' => 'setLocationRagValue',
        'circuit_service_status' => 'setCircuitServiceStatus',
        'dlm_info' => 'setDlmInfo',
        'additional_inventory' => 'setAdditionalInventory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'problem' => 'getProblem',
        'resolution' => 'getResolution',
        'overall_rag_status' => 'getOverallRagStatus',
        'location_rag_field' => 'getLocationRagField',
        'location_rag_value' => 'getLocationRagValue',
        'circuit_service_status' => 'getCircuitServiceStatus',
        'dlm_info' => 'getDlmInfo',
        'additional_inventory' => 'getAdditionalInventory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('problem', $data ?? [], null);
        $this->setIfExists('resolution', $data ?? [], null);
        $this->setIfExists('overall_rag_status', $data ?? [], null);
        $this->setIfExists('location_rag_field', $data ?? [], null);
        $this->setIfExists('location_rag_value', $data ?? [], null);
        $this->setIfExists('circuit_service_status', $data ?? [], null);
        $this->setIfExists('dlm_info', $data ?? [], null);
        $this->setIfExists('additional_inventory', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Decision ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets problem
     *
     * @return string|null
     */
    public function getProblem()
    {
        return $this->container['problem'];
    }

    /**
     * Sets problem
     *
     * @param string|null $problem Description of the problem detected.
     *
     * @return self
     */
    public function setProblem($problem)
    {
        if (is_null($problem)) {
            array_push($this->openAPINullablesSetToNull, 'problem');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('problem', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['problem'] = $problem;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return string|null
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param string|null $resolution Proposed solution of the problem detected.
     *
     * @return self
     */
    public function setResolution($resolution)
    {
        if (is_null($resolution)) {
            array_push($this->openAPINullablesSetToNull, 'resolution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resolution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets overall_rag_status
     *
     * @return string|null
     */
    public function getOverallRagStatus()
    {
        return $this->container['overall_rag_status'];
    }

    /**
     * Sets overall_rag_status
     *
     * @param string|null $overall_rag_status The status of the decision in RAG notation.
     *
     * @return self
     */
    public function setOverallRagStatus($overall_rag_status)
    {
        if (is_null($overall_rag_status)) {
            array_push($this->openAPINullablesSetToNull, 'overall_rag_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overall_rag_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overall_rag_status'] = $overall_rag_status;

        return $this;
    }

    /**
     * Gets location_rag_field
     *
     * @return string|null
     */
    public function getLocationRagField()
    {
        return $this->container['location_rag_field'];
    }

    /**
     * Sets location_rag_field
     *
     * @param string|null $location_rag_field Name of the location RAG field.
     *
     * @return self
     */
    public function setLocationRagField($location_rag_field)
    {
        if (is_null($location_rag_field)) {
            array_push($this->openAPINullablesSetToNull, 'location_rag_field');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_rag_field', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_rag_field'] = $location_rag_field;

        return $this;
    }

    /**
     * Gets location_rag_value
     *
     * @return string|null
     */
    public function getLocationRagValue()
    {
        return $this->container['location_rag_value'];
    }

    /**
     * Sets location_rag_value
     *
     * @param string|null $location_rag_value Value of the location RAG field..
     *
     * @return self
     */
    public function setLocationRagValue($location_rag_value)
    {
        if (is_null($location_rag_value)) {
            array_push($this->openAPINullablesSetToNull, 'location_rag_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_rag_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_rag_value'] = $location_rag_value;

        return $this;
    }

    /**
     * Gets circuit_service_status
     *
     * @return string|null
     */
    public function getCircuitServiceStatus()
    {
        return $this->container['circuit_service_status'];
    }

    /**
     * Sets circuit_service_status
     *
     * @param string|null $circuit_service_status Status of the circuit service.
     *
     * @return self
     */
    public function setCircuitServiceStatus($circuit_service_status)
    {
        if (is_null($circuit_service_status)) {
            array_push($this->openAPINullablesSetToNull, 'circuit_service_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('circuit_service_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['circuit_service_status'] = $circuit_service_status;

        return $this;
    }

    /**
     * Gets dlm_info
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDDecisionDlm|null
     */
    public function getDlmInfo()
    {
        return $this->container['dlm_info'];
    }

    /**
     * Sets dlm_info
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDDecisionDlm|null $dlm_info dlm_info
     *
     * @return self
     */
    public function setDlmInfo($dlm_info)
    {
        if (is_null($dlm_info)) {
            throw new \InvalidArgumentException('non-nullable dlm_info cannot be null');
        }
        $this->container['dlm_info'] = $dlm_info;

        return $this;
    }

    /**
     * Gets additional_inventory
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDDecisionAdditionalInventory|null
     */
    public function getAdditionalInventory()
    {
        return $this->container['additional_inventory'];
    }

    /**
     * Sets additional_inventory
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDDecisionAdditionalInventory|null $additional_inventory additional_inventory
     *
     * @return self
     */
    public function setAdditionalInventory($additional_inventory)
    {
        if (is_null($additional_inventory)) {
            throw new \InvalidArgumentException('non-nullable additional_inventory cannot be null');
        }
        $this->container['additional_inventory'] = $additional_inventory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


