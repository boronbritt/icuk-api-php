<?php
/**
 * BroadbandAddress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandAddress Class Doc Comment
 *
 * @category Class
 * @description Represents an address
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sub_premises' => 'string',
        'premises_name' => 'string',
        'thoroughfare_number' => 'string',
        'thoroughfare_name' => 'string',
        'locality' => 'string',
        'post_town' => 'string',
        'county' => 'string',
        'postcode' => 'string',
        'district_id' => 'string',
        'nad_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sub_premises' => null,
        'premises_name' => null,
        'thoroughfare_number' => null,
        'thoroughfare_name' => null,
        'locality' => null,
        'post_town' => null,
        'county' => null,
        'postcode' => null,
        'district_id' => null,
        'nad_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sub_premises' => true,
		'premises_name' => true,
		'thoroughfare_number' => true,
		'thoroughfare_name' => true,
		'locality' => true,
		'post_town' => true,
		'county' => true,
		'postcode' => true,
		'district_id' => true,
		'nad_key' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sub_premises' => 'sub_premises',
        'premises_name' => 'premises_name',
        'thoroughfare_number' => 'thoroughfare_number',
        'thoroughfare_name' => 'thoroughfare_name',
        'locality' => 'locality',
        'post_town' => 'post_town',
        'county' => 'county',
        'postcode' => 'postcode',
        'district_id' => 'district_id',
        'nad_key' => 'nad_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sub_premises' => 'setSubPremises',
        'premises_name' => 'setPremisesName',
        'thoroughfare_number' => 'setThoroughfareNumber',
        'thoroughfare_name' => 'setThoroughfareName',
        'locality' => 'setLocality',
        'post_town' => 'setPostTown',
        'county' => 'setCounty',
        'postcode' => 'setPostcode',
        'district_id' => 'setDistrictId',
        'nad_key' => 'setNadKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sub_premises' => 'getSubPremises',
        'premises_name' => 'getPremisesName',
        'thoroughfare_number' => 'getThoroughfareNumber',
        'thoroughfare_name' => 'getThoroughfareName',
        'locality' => 'getLocality',
        'post_town' => 'getPostTown',
        'county' => 'getCounty',
        'postcode' => 'getPostcode',
        'district_id' => 'getDistrictId',
        'nad_key' => 'getNadKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sub_premises', $data ?? [], null);
        $this->setIfExists('premises_name', $data ?? [], null);
        $this->setIfExists('thoroughfare_number', $data ?? [], null);
        $this->setIfExists('thoroughfare_name', $data ?? [], null);
        $this->setIfExists('locality', $data ?? [], null);
        $this->setIfExists('post_town', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('postcode', $data ?? [], null);
        $this->setIfExists('district_id', $data ?? [], null);
        $this->setIfExists('nad_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sub_premises
     *
     * @return string|null
     */
    public function getSubPremises()
    {
        return $this->container['sub_premises'];
    }

    /**
     * Sets sub_premises
     *
     * @param string|null $sub_premises Name of the subpremises
     *
     * @return self
     */
    public function setSubPremises($sub_premises)
    {
        if (is_null($sub_premises)) {
            array_push($this->openAPINullablesSetToNull, 'sub_premises');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_premises', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_premises'] = $sub_premises;

        return $this;
    }

    /**
     * Gets premises_name
     *
     * @return string|null
     */
    public function getPremisesName()
    {
        return $this->container['premises_name'];
    }

    /**
     * Sets premises_name
     *
     * @param string|null $premises_name Name of the premises
     *
     * @return self
     */
    public function setPremisesName($premises_name)
    {
        if (is_null($premises_name)) {
            array_push($this->openAPINullablesSetToNull, 'premises_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('premises_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['premises_name'] = $premises_name;

        return $this;
    }

    /**
     * Gets thoroughfare_number
     *
     * @return string|null
     */
    public function getThoroughfareNumber()
    {
        return $this->container['thoroughfare_number'];
    }

    /**
     * Sets thoroughfare_number
     *
     * @param string|null $thoroughfare_number Number of the thoroughfare
     *
     * @return self
     */
    public function setThoroughfareNumber($thoroughfare_number)
    {
        if (is_null($thoroughfare_number)) {
            array_push($this->openAPINullablesSetToNull, 'thoroughfare_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thoroughfare_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thoroughfare_number'] = $thoroughfare_number;

        return $this;
    }

    /**
     * Gets thoroughfare_name
     *
     * @return string|null
     */
    public function getThoroughfareName()
    {
        return $this->container['thoroughfare_name'];
    }

    /**
     * Sets thoroughfare_name
     *
     * @param string|null $thoroughfare_name Name of the thoroughfare
     *
     * @return self
     */
    public function setThoroughfareName($thoroughfare_name)
    {
        if (is_null($thoroughfare_name)) {
            array_push($this->openAPINullablesSetToNull, 'thoroughfare_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thoroughfare_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thoroughfare_name'] = $thoroughfare_name;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string|null
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string|null $locality Locality of the address
     *
     * @return self
     */
    public function setLocality($locality)
    {
        if (is_null($locality)) {
            array_push($this->openAPINullablesSetToNull, 'locality');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locality', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets post_town
     *
     * @return string|null
     */
    public function getPostTown()
    {
        return $this->container['post_town'];
    }

    /**
     * Sets post_town
     *
     * @param string|null $post_town Name of the post town
     *
     * @return self
     */
    public function setPostTown($post_town)
    {
        if (is_null($post_town)) {
            array_push($this->openAPINullablesSetToNull, 'post_town');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post_town', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post_town'] = $post_town;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county Name of the county
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            array_push($this->openAPINullablesSetToNull, 'county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode Postcode of the address
     *
     * @return self
     */
    public function setPostcode($postcode)
    {
        if (is_null($postcode)) {
            array_push($this->openAPINullablesSetToNull, 'postcode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postcode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets district_id
     *
     * @return string|null
     */
    public function getDistrictId()
    {
        return $this->container['district_id'];
    }

    /**
     * Sets district_id
     *
     * @param string|null $district_id ID of the district
     *
     * @return self
     */
    public function setDistrictId($district_id)
    {
        if (is_null($district_id)) {
            array_push($this->openAPINullablesSetToNull, 'district_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['district_id'] = $district_id;

        return $this;
    }

    /**
     * Gets nad_key
     *
     * @return string|null
     */
    public function getNadKey()
    {
        return $this->container['nad_key'];
    }

    /**
     * Sets nad_key
     *
     * @param string|null $nad_key The NAD key. Required for TalkTalk checker
     *
     * @return self
     */
    public function setNadKey($nad_key)
    {
        if (is_null($nad_key)) {
            array_push($this->openAPINullablesSetToNull, 'nad_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nad_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nad_key'] = $nad_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


