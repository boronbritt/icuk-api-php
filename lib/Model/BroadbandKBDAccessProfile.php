<?php
/**
 * BroadbandKBDAccessProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDAccessProfile Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD access profile subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDAccessProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDAccessProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'service_speed' => 'string',
        'delta_speed_timestamp' => 'string',
        'max_stable' => 'string',
        'fault_acceptance' => 'string',
        'resysch' => 'string',
        'speed_timestamp' => 'string',
        'noise_margin' => 'string',
        'run_mode' => 'string',
        'profile_timestamp' => 'string',
        'noise_reset' => 'string',
        'run_mode_change' => 'string',
        'ilq_change' => 'string',
        'service_option' => 'string',
        'product_name' => 'string',
        'below_threshold' => 'string',
        'interleaving_flag' => 'string',
        'de_dlm_ilq' => 'string',
        'mtbe_down' => 'string',
        'mtbe_up' => 'string',
        'mtbr' => 'string',
        'uptime' => 'string',
        'h24_retrains' => 'string',
        'sync_rate' => 'string',
        'delta_sync_timestamp' => 'string',
        'bras_profile_name' => 'string',
        'service_option_update_timestamp' => 'string',
        'service_option_status' => 'string',
        'upstream_line_rate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'service_speed' => null,
        'delta_speed_timestamp' => null,
        'max_stable' => null,
        'fault_acceptance' => null,
        'resysch' => null,
        'speed_timestamp' => null,
        'noise_margin' => null,
        'run_mode' => null,
        'profile_timestamp' => null,
        'noise_reset' => null,
        'run_mode_change' => null,
        'ilq_change' => null,
        'service_option' => null,
        'product_name' => null,
        'below_threshold' => null,
        'interleaving_flag' => null,
        'de_dlm_ilq' => null,
        'mtbe_down' => null,
        'mtbe_up' => null,
        'mtbr' => null,
        'uptime' => null,
        'h24_retrains' => null,
        'sync_rate' => null,
        'delta_sync_timestamp' => null,
        'bras_profile_name' => null,
        'service_option_update_timestamp' => null,
        'service_option_status' => null,
        'upstream_line_rate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'service_speed' => true,
		'delta_speed_timestamp' => true,
		'max_stable' => true,
		'fault_acceptance' => true,
		'resysch' => true,
		'speed_timestamp' => true,
		'noise_margin' => true,
		'run_mode' => true,
		'profile_timestamp' => true,
		'noise_reset' => true,
		'run_mode_change' => true,
		'ilq_change' => true,
		'service_option' => true,
		'product_name' => true,
		'below_threshold' => true,
		'interleaving_flag' => true,
		'de_dlm_ilq' => true,
		'mtbe_down' => true,
		'mtbe_up' => true,
		'mtbr' => true,
		'uptime' => true,
		'h24_retrains' => true,
		'sync_rate' => true,
		'delta_sync_timestamp' => true,
		'bras_profile_name' => true,
		'service_option_update_timestamp' => true,
		'service_option_status' => true,
		'upstream_line_rate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_speed' => 'service_speed',
        'delta_speed_timestamp' => 'delta_speed_timestamp',
        'max_stable' => 'max_stable',
        'fault_acceptance' => 'fault_acceptance',
        'resysch' => 'resysch',
        'speed_timestamp' => 'speed_timestamp',
        'noise_margin' => 'noise_margin',
        'run_mode' => 'run_mode',
        'profile_timestamp' => 'profile_timestamp',
        'noise_reset' => 'noise_reset',
        'run_mode_change' => 'run_mode_change',
        'ilq_change' => 'ilq_change',
        'service_option' => 'service_option',
        'product_name' => 'product_name',
        'below_threshold' => 'below_threshold',
        'interleaving_flag' => 'interleaving_flag',
        'de_dlm_ilq' => 'de_dlm_ilq',
        'mtbe_down' => 'mtbe_down',
        'mtbe_up' => 'mtbe_up',
        'mtbr' => 'mtbr',
        'uptime' => 'uptime',
        'h24_retrains' => 'h24_retrains',
        'sync_rate' => 'sync_rate',
        'delta_sync_timestamp' => 'delta_sync_timestamp',
        'bras_profile_name' => 'bras_profile_name',
        'service_option_update_timestamp' => 'service_option_update_timestamp',
        'service_option_status' => 'service_option_status',
        'upstream_line_rate' => 'upstream_line_rate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_speed' => 'setServiceSpeed',
        'delta_speed_timestamp' => 'setDeltaSpeedTimestamp',
        'max_stable' => 'setMaxStable',
        'fault_acceptance' => 'setFaultAcceptance',
        'resysch' => 'setResysch',
        'speed_timestamp' => 'setSpeedTimestamp',
        'noise_margin' => 'setNoiseMargin',
        'run_mode' => 'setRunMode',
        'profile_timestamp' => 'setProfileTimestamp',
        'noise_reset' => 'setNoiseReset',
        'run_mode_change' => 'setRunModeChange',
        'ilq_change' => 'setIlqChange',
        'service_option' => 'setServiceOption',
        'product_name' => 'setProductName',
        'below_threshold' => 'setBelowThreshold',
        'interleaving_flag' => 'setInterleavingFlag',
        'de_dlm_ilq' => 'setDeDlmIlq',
        'mtbe_down' => 'setMtbeDown',
        'mtbe_up' => 'setMtbeUp',
        'mtbr' => 'setMtbr',
        'uptime' => 'setUptime',
        'h24_retrains' => 'setH24Retrains',
        'sync_rate' => 'setSyncRate',
        'delta_sync_timestamp' => 'setDeltaSyncTimestamp',
        'bras_profile_name' => 'setBrasProfileName',
        'service_option_update_timestamp' => 'setServiceOptionUpdateTimestamp',
        'service_option_status' => 'setServiceOptionStatus',
        'upstream_line_rate' => 'setUpstreamLineRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_speed' => 'getServiceSpeed',
        'delta_speed_timestamp' => 'getDeltaSpeedTimestamp',
        'max_stable' => 'getMaxStable',
        'fault_acceptance' => 'getFaultAcceptance',
        'resysch' => 'getResysch',
        'speed_timestamp' => 'getSpeedTimestamp',
        'noise_margin' => 'getNoiseMargin',
        'run_mode' => 'getRunMode',
        'profile_timestamp' => 'getProfileTimestamp',
        'noise_reset' => 'getNoiseReset',
        'run_mode_change' => 'getRunModeChange',
        'ilq_change' => 'getIlqChange',
        'service_option' => 'getServiceOption',
        'product_name' => 'getProductName',
        'below_threshold' => 'getBelowThreshold',
        'interleaving_flag' => 'getInterleavingFlag',
        'de_dlm_ilq' => 'getDeDlmIlq',
        'mtbe_down' => 'getMtbeDown',
        'mtbe_up' => 'getMtbeUp',
        'mtbr' => 'getMtbr',
        'uptime' => 'getUptime',
        'h24_retrains' => 'getH24Retrains',
        'sync_rate' => 'getSyncRate',
        'delta_sync_timestamp' => 'getDeltaSyncTimestamp',
        'bras_profile_name' => 'getBrasProfileName',
        'service_option_update_timestamp' => 'getServiceOptionUpdateTimestamp',
        'service_option_status' => 'getServiceOptionStatus',
        'upstream_line_rate' => 'getUpstreamLineRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('service_speed', $data ?? [], null);
        $this->setIfExists('delta_speed_timestamp', $data ?? [], null);
        $this->setIfExists('max_stable', $data ?? [], null);
        $this->setIfExists('fault_acceptance', $data ?? [], null);
        $this->setIfExists('resysch', $data ?? [], null);
        $this->setIfExists('speed_timestamp', $data ?? [], null);
        $this->setIfExists('noise_margin', $data ?? [], null);
        $this->setIfExists('run_mode', $data ?? [], null);
        $this->setIfExists('profile_timestamp', $data ?? [], null);
        $this->setIfExists('noise_reset', $data ?? [], null);
        $this->setIfExists('run_mode_change', $data ?? [], null);
        $this->setIfExists('ilq_change', $data ?? [], null);
        $this->setIfExists('service_option', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('below_threshold', $data ?? [], null);
        $this->setIfExists('interleaving_flag', $data ?? [], null);
        $this->setIfExists('de_dlm_ilq', $data ?? [], null);
        $this->setIfExists('mtbe_down', $data ?? [], null);
        $this->setIfExists('mtbe_up', $data ?? [], null);
        $this->setIfExists('mtbr', $data ?? [], null);
        $this->setIfExists('uptime', $data ?? [], null);
        $this->setIfExists('h24_retrains', $data ?? [], null);
        $this->setIfExists('sync_rate', $data ?? [], null);
        $this->setIfExists('delta_sync_timestamp', $data ?? [], null);
        $this->setIfExists('bras_profile_name', $data ?? [], null);
        $this->setIfExists('service_option_update_timestamp', $data ?? [], null);
        $this->setIfExists('service_option_status', $data ?? [], null);
        $this->setIfExists('upstream_line_rate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_speed
     *
     * @return string|null
     */
    public function getServiceSpeed()
    {
        return $this->container['service_speed'];
    }

    /**
     * Sets service_speed
     *
     * @param string|null $service_speed Headline Rate-Downstream Line Rate (KBPS).
     *
     * @return self
     */
    public function setServiceSpeed($service_speed)
    {
        if (is_null($service_speed)) {
            array_push($this->openAPINullablesSetToNull, 'service_speed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_speed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_speed'] = $service_speed;

        return $this;
    }

    /**
     * Gets delta_speed_timestamp
     *
     * @return string|null
     */
    public function getDeltaSpeedTimestamp()
    {
        return $this->container['delta_speed_timestamp'];
    }

    /**
     * Sets delta_speed_timestamp
     *
     * @param string|null $delta_speed_timestamp Downstream Line Rate Timestamp.
     *
     * @return self
     */
    public function setDeltaSpeedTimestamp($delta_speed_timestamp)
    {
        if (is_null($delta_speed_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'delta_speed_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delta_speed_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delta_speed_timestamp'] = $delta_speed_timestamp;

        return $this;
    }

    /**
     * Gets max_stable
     *
     * @return string|null
     */
    public function getMaxStable()
    {
        return $this->container['max_stable'];
    }

    /**
     * Sets max_stable
     *
     * @param string|null $max_stable Maximum Stable Rate (Kbps).
     *
     * @return self
     */
    public function setMaxStable($max_stable)
    {
        if (is_null($max_stable)) {
            array_push($this->openAPINullablesSetToNull, 'max_stable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_stable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_stable'] = $max_stable;

        return $this;
    }

    /**
     * Gets fault_acceptance
     *
     * @return string|null
     */
    public function getFaultAcceptance()
    {
        return $this->container['fault_acceptance'];
    }

    /**
     * Sets fault_acceptance
     *
     * @param string|null $fault_acceptance Fault Threshold Rate (Kbps).
     *
     * @return self
     */
    public function setFaultAcceptance($fault_acceptance)
    {
        if (is_null($fault_acceptance)) {
            array_push($this->openAPINullablesSetToNull, 'fault_acceptance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_acceptance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_acceptance'] = $fault_acceptance;

        return $this;
    }

    /**
     * Gets resysch
     *
     * @return string|null
     */
    public function getResysch()
    {
        return $this->container['resysch'];
    }

    /**
     * Sets resysch
     *
     * @param string|null $resysch Maximum Stable Rate Re-set (Y/N).
     *
     * @return self
     */
    public function setResysch($resysch)
    {
        if (is_null($resysch)) {
            array_push($this->openAPINullablesSetToNull, 'resysch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resysch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resysch'] = $resysch;

        return $this;
    }

    /**
     * Gets speed_timestamp
     *
     * @return string|null
     */
    public function getSpeedTimestamp()
    {
        return $this->container['speed_timestamp'];
    }

    /**
     * Sets speed_timestamp
     *
     * @param string|null $speed_timestamp Speed TimeStamp.
     *
     * @return self
     */
    public function setSpeedTimestamp($speed_timestamp)
    {
        if (is_null($speed_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'speed_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('speed_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['speed_timestamp'] = $speed_timestamp;

        return $this;
    }

    /**
     * Gets noise_margin
     *
     * @return string|null
     */
    public function getNoiseMargin()
    {
        return $this->container['noise_margin'];
    }

    /**
     * Sets noise_margin
     *
     * @param string|null $noise_margin Noise Margin.
     *
     * @return self
     */
    public function setNoiseMargin($noise_margin)
    {
        if (is_null($noise_margin)) {
            array_push($this->openAPINullablesSetToNull, 'noise_margin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('noise_margin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['noise_margin'] = $noise_margin;

        return $this;
    }

    /**
     * Gets run_mode
     *
     * @return string|null
     */
    public function getRunMode()
    {
        return $this->container['run_mode'];
    }

    /**
     * Sets run_mode
     *
     * @param string|null $run_mode Run mode.
     *
     * @return self
     */
    public function setRunMode($run_mode)
    {
        if (is_null($run_mode)) {
            array_push($this->openAPINullablesSetToNull, 'run_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_mode'] = $run_mode;

        return $this;
    }

    /**
     * Gets profile_timestamp
     *
     * @return string|null
     */
    public function getProfileTimestamp()
    {
        return $this->container['profile_timestamp'];
    }

    /**
     * Sets profile_timestamp
     *
     * @param string|null $profile_timestamp Profile Change Time.
     *
     * @return self
     */
    public function setProfileTimestamp($profile_timestamp)
    {
        if (is_null($profile_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'profile_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_timestamp'] = $profile_timestamp;

        return $this;
    }

    /**
     * Gets noise_reset
     *
     * @return string|null
     */
    public function getNoiseReset()
    {
        return $this->container['noise_reset'];
    }

    /**
     * Sets noise_reset
     *
     * @param string|null $noise_reset Noise reset.
     *
     * @return self
     */
    public function setNoiseReset($noise_reset)
    {
        if (is_null($noise_reset)) {
            array_push($this->openAPINullablesSetToNull, 'noise_reset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('noise_reset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['noise_reset'] = $noise_reset;

        return $this;
    }

    /**
     * Gets run_mode_change
     *
     * @return string|null
     */
    public function getRunModeChange()
    {
        return $this->container['run_mode_change'];
    }

    /**
     * Sets run_mode_change
     *
     * @param string|null $run_mode_change Run Mode Change.
     *
     * @return self
     */
    public function setRunModeChange($run_mode_change)
    {
        if (is_null($run_mode_change)) {
            array_push($this->openAPINullablesSetToNull, 'run_mode_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_mode_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_mode_change'] = $run_mode_change;

        return $this;
    }

    /**
     * Gets ilq_change
     *
     * @return string|null
     */
    public function getIlqChange()
    {
        return $this->container['ilq_change'];
    }

    /**
     * Sets ilq_change
     *
     * @param string|null $ilq_change ILQ Change.
     *
     * @return self
     */
    public function setIlqChange($ilq_change)
    {
        if (is_null($ilq_change)) {
            array_push($this->openAPINullablesSetToNull, 'ilq_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ilq_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ilq_change'] = $ilq_change;

        return $this;
    }

    /**
     * Gets service_option
     *
     * @return string|null
     */
    public function getServiceOption()
    {
        return $this->container['service_option'];
    }

    /**
     * Sets service_option
     *
     * @param string|null $service_option The service Option.
     *
     * @return self
     */
    public function setServiceOption($service_option)
    {
        if (is_null($service_option)) {
            array_push($this->openAPINullablesSetToNull, 'service_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_option'] = $service_option;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name The product name.
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            array_push($this->openAPINullablesSetToNull, 'product_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets below_threshold
     *
     * @return string|null
     */
    public function getBelowThreshold()
    {
        return $this->container['below_threshold'];
    }

    /**
     * Sets below_threshold
     *
     * @param string|null $below_threshold The below threshold.
     *
     * @return self
     */
    public function setBelowThreshold($below_threshold)
    {
        if (is_null($below_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'below_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('below_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['below_threshold'] = $below_threshold;

        return $this;
    }

    /**
     * Gets interleaving_flag
     *
     * @return string|null
     */
    public function getInterleavingFlag()
    {
        return $this->container['interleaving_flag'];
    }

    /**
     * Sets interleaving_flag
     *
     * @param string|null $interleaving_flag Interleaved.
     *
     * @return self
     */
    public function setInterleavingFlag($interleaving_flag)
    {
        if (is_null($interleaving_flag)) {
            array_push($this->openAPINullablesSetToNull, 'interleaving_flag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interleaving_flag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interleaving_flag'] = $interleaving_flag;

        return $this;
    }

    /**
     * Gets de_dlm_ilq
     *
     * @return string|null
     */
    public function getDeDlmIlq()
    {
        return $this->container['de_dlm_ilq'];
    }

    /**
     * Sets de_dlm_ilq
     *
     * @param string|null $de_dlm_ilq Indicated Line Quality.
     *
     * @return self
     */
    public function setDeDlmIlq($de_dlm_ilq)
    {
        if (is_null($de_dlm_ilq)) {
            array_push($this->openAPINullablesSetToNull, 'de_dlm_ilq');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('de_dlm_ilq', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['de_dlm_ilq'] = $de_dlm_ilq;

        return $this;
    }

    /**
     * Gets mtbe_down
     *
     * @return string|null
     */
    public function getMtbeDown()
    {
        return $this->container['mtbe_down'];
    }

    /**
     * Sets mtbe_down
     *
     * @param string|null $mtbe_down Mean Time Between Errors Downstream (sec).
     *
     * @return self
     */
    public function setMtbeDown($mtbe_down)
    {
        if (is_null($mtbe_down)) {
            array_push($this->openAPINullablesSetToNull, 'mtbe_down');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtbe_down', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mtbe_down'] = $mtbe_down;

        return $this;
    }

    /**
     * Gets mtbe_up
     *
     * @return string|null
     */
    public function getMtbeUp()
    {
        return $this->container['mtbe_up'];
    }

    /**
     * Sets mtbe_up
     *
     * @param string|null $mtbe_up Mean Time Between Errors Upstream (sec).
     *
     * @return self
     */
    public function setMtbeUp($mtbe_up)
    {
        if (is_null($mtbe_up)) {
            array_push($this->openAPINullablesSetToNull, 'mtbe_up');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtbe_up', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mtbe_up'] = $mtbe_up;

        return $this;
    }

    /**
     * Gets mtbr
     *
     * @return string|null
     */
    public function getMtbr()
    {
        return $this->container['mtbr'];
    }

    /**
     * Sets mtbr
     *
     * @param string|null $mtbr Mean Time Between Retrains (sec).
     *
     * @return self
     */
    public function setMtbr($mtbr)
    {
        if (is_null($mtbr)) {
            array_push($this->openAPINullablesSetToNull, 'mtbr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtbr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mtbr'] = $mtbr;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return string|null
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param string|null $uptime Uptime (sec).
     *
     * @return self
     */
    public function setUptime($uptime)
    {
        if (is_null($uptime)) {
            array_push($this->openAPINullablesSetToNull, 'uptime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uptime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets h24_retrains
     *
     * @return string|null
     */
    public function getH24Retrains()
    {
        return $this->container['h24_retrains'];
    }

    /**
     * Sets h24_retrains
     *
     * @param string|null $h24_retrains No. of Retrains in 24 Hour.
     *
     * @return self
     */
    public function setH24Retrains($h24_retrains)
    {
        if (is_null($h24_retrains)) {
            array_push($this->openAPINullablesSetToNull, 'h24_retrains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('h24_retrains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['h24_retrains'] = $h24_retrains;

        return $this;
    }

    /**
     * Gets sync_rate
     *
     * @return string|null
     */
    public function getSyncRate()
    {
        return $this->container['sync_rate'];
    }

    /**
     * Sets sync_rate
     *
     * @param string|null $sync_rate SYNC Rate(Current Minimum Line Rate).
     *
     * @return self
     */
    public function setSyncRate($sync_rate)
    {
        if (is_null($sync_rate)) {
            array_push($this->openAPINullablesSetToNull, 'sync_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sync_rate'] = $sync_rate;

        return $this;
    }

    /**
     * Gets delta_sync_timestamp
     *
     * @return string|null
     */
    public function getDeltaSyncTimestamp()
    {
        return $this->container['delta_sync_timestamp'];
    }

    /**
     * Sets delta_sync_timestamp
     *
     * @param string|null $delta_sync_timestamp Delta Sync TimeStamp.
     *
     * @return self
     */
    public function setDeltaSyncTimestamp($delta_sync_timestamp)
    {
        if (is_null($delta_sync_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'delta_sync_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delta_sync_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delta_sync_timestamp'] = $delta_sync_timestamp;

        return $this;
    }

    /**
     * Gets bras_profile_name
     *
     * @return string|null
     */
    public function getBrasProfileName()
    {
        return $this->container['bras_profile_name'];
    }

    /**
     * Sets bras_profile_name
     *
     * @param string|null $bras_profile_name BRAS Profile Name.
     *
     * @return self
     */
    public function setBrasProfileName($bras_profile_name)
    {
        if (is_null($bras_profile_name)) {
            array_push($this->openAPINullablesSetToNull, 'bras_profile_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bras_profile_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bras_profile_name'] = $bras_profile_name;

        return $this;
    }

    /**
     * Gets service_option_update_timestamp
     *
     * @return string|null
     */
    public function getServiceOptionUpdateTimestamp()
    {
        return $this->container['service_option_update_timestamp'];
    }

    /**
     * Sets service_option_update_timestamp
     *
     * @param string|null $service_option_update_timestamp Service Option update timestamp.
     *
     * @return self
     */
    public function setServiceOptionUpdateTimestamp($service_option_update_timestamp)
    {
        if (is_null($service_option_update_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'service_option_update_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_option_update_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_option_update_timestamp'] = $service_option_update_timestamp;

        return $this;
    }

    /**
     * Gets service_option_status
     *
     * @return string|null
     */
    public function getServiceOptionStatus()
    {
        return $this->container['service_option_status'];
    }

    /**
     * Sets service_option_status
     *
     * @param string|null $service_option_status Service Option Status.
     *
     * @return self
     */
    public function setServiceOptionStatus($service_option_status)
    {
        if (is_null($service_option_status)) {
            array_push($this->openAPINullablesSetToNull, 'service_option_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_option_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_option_status'] = $service_option_status;

        return $this;
    }

    /**
     * Gets upstream_line_rate
     *
     * @return string|null
     */
    public function getUpstreamLineRate()
    {
        return $this->container['upstream_line_rate'];
    }

    /**
     * Sets upstream_line_rate
     *
     * @param string|null $upstream_line_rate Upstream line rate.
     *
     * @return self
     */
    public function setUpstreamLineRate($upstream_line_rate)
    {
        if (is_null($upstream_line_rate)) {
            array_push($this->openAPINullablesSetToNull, 'upstream_line_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upstream_line_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upstream_line_rate'] = $upstream_line_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


