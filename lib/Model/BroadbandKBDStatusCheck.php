<?php
/**
 * BroadbandKBDStatusCheck
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDStatusCheck Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD status check subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDStatusCheck implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDStatusCheck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'circuit_sync_status' => 'string',
        'msan_status' => 'string',
        'power_status' => 'string',
        'upstream' => '\OpenAPI\Client\Model\BroadbandKBDStatusCheckLinkInfo',
        'downstream' => '\OpenAPI\Client\Model\BroadbandKBDStatusCheckLinkInfo',
        'maximum_stable_rate' => 'string',
        'fault_threshold_rate' => 'string',
        'mtbr' => 'string',
        'mtbe_up' => 'string',
        'mtbe_down' => 'string',
        'ilq' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'circuit_sync_status' => null,
        'msan_status' => null,
        'power_status' => null,
        'upstream' => null,
        'downstream' => null,
        'maximum_stable_rate' => null,
        'fault_threshold_rate' => null,
        'mtbr' => null,
        'mtbe_up' => null,
        'mtbe_down' => null,
        'ilq' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'circuit_sync_status' => true,
		'msan_status' => true,
		'power_status' => true,
		'upstream' => false,
		'downstream' => false,
		'maximum_stable_rate' => true,
		'fault_threshold_rate' => true,
		'mtbr' => true,
		'mtbe_up' => true,
		'mtbe_down' => true,
		'ilq' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'circuit_sync_status' => 'circuit_sync_status',
        'msan_status' => 'msan_status',
        'power_status' => 'power_status',
        'upstream' => 'upstream',
        'downstream' => 'downstream',
        'maximum_stable_rate' => 'maximum_stable_rate',
        'fault_threshold_rate' => 'fault_threshold_rate',
        'mtbr' => 'mtbr',
        'mtbe_up' => 'mtbe_up',
        'mtbe_down' => 'mtbe_down',
        'ilq' => 'ilq'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'circuit_sync_status' => 'setCircuitSyncStatus',
        'msan_status' => 'setMsanStatus',
        'power_status' => 'setPowerStatus',
        'upstream' => 'setUpstream',
        'downstream' => 'setDownstream',
        'maximum_stable_rate' => 'setMaximumStableRate',
        'fault_threshold_rate' => 'setFaultThresholdRate',
        'mtbr' => 'setMtbr',
        'mtbe_up' => 'setMtbeUp',
        'mtbe_down' => 'setMtbeDown',
        'ilq' => 'setIlq'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'circuit_sync_status' => 'getCircuitSyncStatus',
        'msan_status' => 'getMsanStatus',
        'power_status' => 'getPowerStatus',
        'upstream' => 'getUpstream',
        'downstream' => 'getDownstream',
        'maximum_stable_rate' => 'getMaximumStableRate',
        'fault_threshold_rate' => 'getFaultThresholdRate',
        'mtbr' => 'getMtbr',
        'mtbe_up' => 'getMtbeUp',
        'mtbe_down' => 'getMtbeDown',
        'ilq' => 'getIlq'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('circuit_sync_status', $data ?? [], null);
        $this->setIfExists('msan_status', $data ?? [], null);
        $this->setIfExists('power_status', $data ?? [], null);
        $this->setIfExists('upstream', $data ?? [], null);
        $this->setIfExists('downstream', $data ?? [], null);
        $this->setIfExists('maximum_stable_rate', $data ?? [], null);
        $this->setIfExists('fault_threshold_rate', $data ?? [], null);
        $this->setIfExists('mtbr', $data ?? [], null);
        $this->setIfExists('mtbe_up', $data ?? [], null);
        $this->setIfExists('mtbe_down', $data ?? [], null);
        $this->setIfExists('ilq', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets circuit_sync_status
     *
     * @return string|null
     */
    public function getCircuitSyncStatus()
    {
        return $this->container['circuit_sync_status'];
    }

    /**
     * Sets circuit_sync_status
     *
     * @param string|null $circuit_sync_status Sync Status.
     *
     * @return self
     */
    public function setCircuitSyncStatus($circuit_sync_status)
    {
        if (is_null($circuit_sync_status)) {
            array_push($this->openAPINullablesSetToNull, 'circuit_sync_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('circuit_sync_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['circuit_sync_status'] = $circuit_sync_status;

        return $this;
    }

    /**
     * Gets msan_status
     *
     * @return string|null
     */
    public function getMsanStatus()
    {
        return $this->container['msan_status'];
    }

    /**
     * Sets msan_status
     *
     * @param string|null $msan_status MSAN Status.
     *
     * @return self
     */
    public function setMsanStatus($msan_status)
    {
        if (is_null($msan_status)) {
            array_push($this->openAPINullablesSetToNull, 'msan_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msan_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['msan_status'] = $msan_status;

        return $this;
    }

    /**
     * Gets power_status
     *
     * @return string|null
     */
    public function getPowerStatus()
    {
        return $this->container['power_status'];
    }

    /**
     * Sets power_status
     *
     * @param string|null $power_status NTE Power Status.
     *
     * @return self
     */
    public function setPowerStatus($power_status)
    {
        if (is_null($power_status)) {
            array_push($this->openAPINullablesSetToNull, 'power_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('power_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['power_status'] = $power_status;

        return $this;
    }

    /**
     * Gets upstream
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDStatusCheckLinkInfo|null
     */
    public function getUpstream()
    {
        return $this->container['upstream'];
    }

    /**
     * Sets upstream
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDStatusCheckLinkInfo|null $upstream upstream
     *
     * @return self
     */
    public function setUpstream($upstream)
    {
        if (is_null($upstream)) {
            throw new \InvalidArgumentException('non-nullable upstream cannot be null');
        }
        $this->container['upstream'] = $upstream;

        return $this;
    }

    /**
     * Gets downstream
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDStatusCheckLinkInfo|null
     */
    public function getDownstream()
    {
        return $this->container['downstream'];
    }

    /**
     * Sets downstream
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDStatusCheckLinkInfo|null $downstream downstream
     *
     * @return self
     */
    public function setDownstream($downstream)
    {
        if (is_null($downstream)) {
            throw new \InvalidArgumentException('non-nullable downstream cannot be null');
        }
        $this->container['downstream'] = $downstream;

        return $this;
    }

    /**
     * Gets maximum_stable_rate
     *
     * @return string|null
     */
    public function getMaximumStableRate()
    {
        return $this->container['maximum_stable_rate'];
    }

    /**
     * Sets maximum_stable_rate
     *
     * @param string|null $maximum_stable_rate Maximum Stable Rate.
     *
     * @return self
     */
    public function setMaximumStableRate($maximum_stable_rate)
    {
        if (is_null($maximum_stable_rate)) {
            array_push($this->openAPINullablesSetToNull, 'maximum_stable_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximum_stable_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maximum_stable_rate'] = $maximum_stable_rate;

        return $this;
    }

    /**
     * Gets fault_threshold_rate
     *
     * @return string|null
     */
    public function getFaultThresholdRate()
    {
        return $this->container['fault_threshold_rate'];
    }

    /**
     * Sets fault_threshold_rate
     *
     * @param string|null $fault_threshold_rate Fault Threshold Rate.
     *
     * @return self
     */
    public function setFaultThresholdRate($fault_threshold_rate)
    {
        if (is_null($fault_threshold_rate)) {
            array_push($this->openAPINullablesSetToNull, 'fault_threshold_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_threshold_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_threshold_rate'] = $fault_threshold_rate;

        return $this;
    }

    /**
     * Gets mtbr
     *
     * @return string|null
     */
    public function getMtbr()
    {
        return $this->container['mtbr'];
    }

    /**
     * Sets mtbr
     *
     * @param string|null $mtbr Mean Time Between Retrains.
     *
     * @return self
     */
    public function setMtbr($mtbr)
    {
        if (is_null($mtbr)) {
            array_push($this->openAPINullablesSetToNull, 'mtbr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtbr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mtbr'] = $mtbr;

        return $this;
    }

    /**
     * Gets mtbe_up
     *
     * @return string|null
     */
    public function getMtbeUp()
    {
        return $this->container['mtbe_up'];
    }

    /**
     * Sets mtbe_up
     *
     * @param string|null $mtbe_up Mean Time Between Errors Upstream.
     *
     * @return self
     */
    public function setMtbeUp($mtbe_up)
    {
        if (is_null($mtbe_up)) {
            array_push($this->openAPINullablesSetToNull, 'mtbe_up');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtbe_up', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mtbe_up'] = $mtbe_up;

        return $this;
    }

    /**
     * Gets mtbe_down
     *
     * @return string|null
     */
    public function getMtbeDown()
    {
        return $this->container['mtbe_down'];
    }

    /**
     * Sets mtbe_down
     *
     * @param string|null $mtbe_down Mean Time Between Errors Downstream.
     *
     * @return self
     */
    public function setMtbeDown($mtbe_down)
    {
        if (is_null($mtbe_down)) {
            array_push($this->openAPINullablesSetToNull, 'mtbe_down');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mtbe_down', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mtbe_down'] = $mtbe_down;

        return $this;
    }

    /**
     * Gets ilq
     *
     * @return string|null
     */
    public function getIlq()
    {
        return $this->container['ilq'];
    }

    /**
     * Sets ilq
     *
     * @param string|null $ilq Indicative Line Quality.
     *
     * @return self
     */
    public function setIlq($ilq)
    {
        if (is_null($ilq)) {
            array_push($this->openAPINullablesSetToNull, 'ilq');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ilq', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ilq'] = $ilq;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


