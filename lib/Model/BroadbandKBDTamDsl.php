<?php
/**
 * BroadbandKBDTamDsl
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDTamDsl Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD TAM DSL subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDTamDsl implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDTamDsl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outcome' => 'string',
        'vendorname' => 'string',
        'vendorid' => 'string',
        'vendorrev' => 'string',
        'trainingtime' => 'string',
        'synccounter' => 'string',
        'uprate' => 'string',
        'uprate_result' => 'string',
        'downrate' => 'string',
        'downrate_result' => 'string',
        'upmaxrate' => 'string',
        'downmaxrate' => 'string',
        'upattn' => 'string',
        'downattn' => 'string',
        'upnoisemargin' => 'string',
        'upnoisemargin_result' => 'string',
        'downnoisemargin' => 'string',
        'downnoisemargin_result' => 'string',
        'lclcrcerrors' => 'string',
        'rmtcrcerrors' => 'string',
        'lcles' => 'string',
        'rmtes' => 'string',
        'lclses' => 'string',
        'rmtses' => 'string',
        'updatapath' => 'string',
        'downdatapath' => 'string',
        'standardused' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outcome' => null,
        'vendorname' => null,
        'vendorid' => null,
        'vendorrev' => null,
        'trainingtime' => null,
        'synccounter' => null,
        'uprate' => null,
        'uprate_result' => null,
        'downrate' => null,
        'downrate_result' => null,
        'upmaxrate' => null,
        'downmaxrate' => null,
        'upattn' => null,
        'downattn' => null,
        'upnoisemargin' => null,
        'upnoisemargin_result' => null,
        'downnoisemargin' => null,
        'downnoisemargin_result' => null,
        'lclcrcerrors' => null,
        'rmtcrcerrors' => null,
        'lcles' => null,
        'rmtes' => null,
        'lclses' => null,
        'rmtses' => null,
        'updatapath' => null,
        'downdatapath' => null,
        'standardused' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outcome' => true,
		'vendorname' => true,
		'vendorid' => true,
		'vendorrev' => true,
		'trainingtime' => true,
		'synccounter' => true,
		'uprate' => true,
		'uprate_result' => true,
		'downrate' => true,
		'downrate_result' => true,
		'upmaxrate' => true,
		'downmaxrate' => true,
		'upattn' => true,
		'downattn' => true,
		'upnoisemargin' => true,
		'upnoisemargin_result' => true,
		'downnoisemargin' => true,
		'downnoisemargin_result' => true,
		'lclcrcerrors' => true,
		'rmtcrcerrors' => true,
		'lcles' => true,
		'rmtes' => true,
		'lclses' => true,
		'rmtses' => true,
		'updatapath' => true,
		'downdatapath' => true,
		'standardused' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outcome' => 'outcome',
        'vendorname' => 'vendorname',
        'vendorid' => 'vendorid',
        'vendorrev' => 'vendorrev',
        'trainingtime' => 'trainingtime',
        'synccounter' => 'synccounter',
        'uprate' => 'uprate',
        'uprate_result' => 'uprate_result',
        'downrate' => 'downrate',
        'downrate_result' => 'downrate_result',
        'upmaxrate' => 'upmaxrate',
        'downmaxrate' => 'downmaxrate',
        'upattn' => 'upattn',
        'downattn' => 'downattn',
        'upnoisemargin' => 'upnoisemargin',
        'upnoisemargin_result' => 'upnoisemargin_result',
        'downnoisemargin' => 'downnoisemargin',
        'downnoisemargin_result' => 'downnoisemargin_result',
        'lclcrcerrors' => 'lclcrcerrors',
        'rmtcrcerrors' => 'rmtcrcerrors',
        'lcles' => 'lcles',
        'rmtes' => 'rmtes',
        'lclses' => 'lclses',
        'rmtses' => 'rmtses',
        'updatapath' => 'updatapath',
        'downdatapath' => 'downdatapath',
        'standardused' => 'standardused'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outcome' => 'setOutcome',
        'vendorname' => 'setVendorname',
        'vendorid' => 'setVendorid',
        'vendorrev' => 'setVendorrev',
        'trainingtime' => 'setTrainingtime',
        'synccounter' => 'setSynccounter',
        'uprate' => 'setUprate',
        'uprate_result' => 'setUprateResult',
        'downrate' => 'setDownrate',
        'downrate_result' => 'setDownrateResult',
        'upmaxrate' => 'setUpmaxrate',
        'downmaxrate' => 'setDownmaxrate',
        'upattn' => 'setUpattn',
        'downattn' => 'setDownattn',
        'upnoisemargin' => 'setUpnoisemargin',
        'upnoisemargin_result' => 'setUpnoisemarginResult',
        'downnoisemargin' => 'setDownnoisemargin',
        'downnoisemargin_result' => 'setDownnoisemarginResult',
        'lclcrcerrors' => 'setLclcrcerrors',
        'rmtcrcerrors' => 'setRmtcrcerrors',
        'lcles' => 'setLcles',
        'rmtes' => 'setRmtes',
        'lclses' => 'setLclses',
        'rmtses' => 'setRmtses',
        'updatapath' => 'setUpdatapath',
        'downdatapath' => 'setDowndatapath',
        'standardused' => 'setStandardused'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outcome' => 'getOutcome',
        'vendorname' => 'getVendorname',
        'vendorid' => 'getVendorid',
        'vendorrev' => 'getVendorrev',
        'trainingtime' => 'getTrainingtime',
        'synccounter' => 'getSynccounter',
        'uprate' => 'getUprate',
        'uprate_result' => 'getUprateResult',
        'downrate' => 'getDownrate',
        'downrate_result' => 'getDownrateResult',
        'upmaxrate' => 'getUpmaxrate',
        'downmaxrate' => 'getDownmaxrate',
        'upattn' => 'getUpattn',
        'downattn' => 'getDownattn',
        'upnoisemargin' => 'getUpnoisemargin',
        'upnoisemargin_result' => 'getUpnoisemarginResult',
        'downnoisemargin' => 'getDownnoisemargin',
        'downnoisemargin_result' => 'getDownnoisemarginResult',
        'lclcrcerrors' => 'getLclcrcerrors',
        'rmtcrcerrors' => 'getRmtcrcerrors',
        'lcles' => 'getLcles',
        'rmtes' => 'getRmtes',
        'lclses' => 'getLclses',
        'rmtses' => 'getRmtses',
        'updatapath' => 'getUpdatapath',
        'downdatapath' => 'getDowndatapath',
        'standardused' => 'getStandardused'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('vendorname', $data ?? [], null);
        $this->setIfExists('vendorid', $data ?? [], null);
        $this->setIfExists('vendorrev', $data ?? [], null);
        $this->setIfExists('trainingtime', $data ?? [], null);
        $this->setIfExists('synccounter', $data ?? [], null);
        $this->setIfExists('uprate', $data ?? [], null);
        $this->setIfExists('uprate_result', $data ?? [], null);
        $this->setIfExists('downrate', $data ?? [], null);
        $this->setIfExists('downrate_result', $data ?? [], null);
        $this->setIfExists('upmaxrate', $data ?? [], null);
        $this->setIfExists('downmaxrate', $data ?? [], null);
        $this->setIfExists('upattn', $data ?? [], null);
        $this->setIfExists('downattn', $data ?? [], null);
        $this->setIfExists('upnoisemargin', $data ?? [], null);
        $this->setIfExists('upnoisemargin_result', $data ?? [], null);
        $this->setIfExists('downnoisemargin', $data ?? [], null);
        $this->setIfExists('downnoisemargin_result', $data ?? [], null);
        $this->setIfExists('lclcrcerrors', $data ?? [], null);
        $this->setIfExists('rmtcrcerrors', $data ?? [], null);
        $this->setIfExists('lcles', $data ?? [], null);
        $this->setIfExists('rmtes', $data ?? [], null);
        $this->setIfExists('lclses', $data ?? [], null);
        $this->setIfExists('rmtses', $data ?? [], null);
        $this->setIfExists('updatapath', $data ?? [], null);
        $this->setIfExists('downdatapath', $data ?? [], null);
        $this->setIfExists('standardused', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome The test outcome.
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        if (is_null($outcome)) {
            array_push($this->openAPINullablesSetToNull, 'outcome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets vendorname
     *
     * @return string|null
     */
    public function getVendorname()
    {
        return $this->container['vendorname'];
    }

    /**
     * Sets vendorname
     *
     * @param string|null $vendorname Equipment Vendor Name.
     *
     * @return self
     */
    public function setVendorname($vendorname)
    {
        if (is_null($vendorname)) {
            array_push($this->openAPINullablesSetToNull, 'vendorname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorname'] = $vendorname;

        return $this;
    }

    /**
     * Gets vendorid
     *
     * @return string|null
     */
    public function getVendorid()
    {
        return $this->container['vendorid'];
    }

    /**
     * Sets vendorid
     *
     * @param string|null $vendorid Equipment Vendor Id.
     *
     * @return self
     */
    public function setVendorid($vendorid)
    {
        if (is_null($vendorid)) {
            array_push($this->openAPINullablesSetToNull, 'vendorid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorid'] = $vendorid;

        return $this;
    }

    /**
     * Gets vendorrev
     *
     * @return string|null
     */
    public function getVendorrev()
    {
        return $this->container['vendorrev'];
    }

    /**
     * Sets vendorrev
     *
     * @param string|null $vendorrev Equipment Vendor Revision.
     *
     * @return self
     */
    public function setVendorrev($vendorrev)
    {
        if (is_null($vendorrev)) {
            array_push($this->openAPINullablesSetToNull, 'vendorrev');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorrev', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorrev'] = $vendorrev;

        return $this;
    }

    /**
     * Gets trainingtime
     *
     * @return string|null
     */
    public function getTrainingtime()
    {
        return $this->container['trainingtime'];
    }

    /**
     * Sets trainingtime
     *
     * @param string|null $trainingtime Training Time.
     *
     * @return self
     */
    public function setTrainingtime($trainingtime)
    {
        if (is_null($trainingtime)) {
            array_push($this->openAPINullablesSetToNull, 'trainingtime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trainingtime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trainingtime'] = $trainingtime;

        return $this;
    }

    /**
     * Gets synccounter
     *
     * @return string|null
     */
    public function getSynccounter()
    {
        return $this->container['synccounter'];
    }

    /**
     * Sets synccounter
     *
     * @param string|null $synccounter Num Syncs.
     *
     * @return self
     */
    public function setSynccounter($synccounter)
    {
        if (is_null($synccounter)) {
            array_push($this->openAPINullablesSetToNull, 'synccounter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('synccounter', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['synccounter'] = $synccounter;

        return $this;
    }

    /**
     * Gets uprate
     *
     * @return string|null
     */
    public function getUprate()
    {
        return $this->container['uprate'];
    }

    /**
     * Sets uprate
     *
     * @param string|null $uprate Upstream Bit Rate.
     *
     * @return self
     */
    public function setUprate($uprate)
    {
        if (is_null($uprate)) {
            array_push($this->openAPINullablesSetToNull, 'uprate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uprate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uprate'] = $uprate;

        return $this;
    }

    /**
     * Gets uprate_result
     *
     * @return string|null
     */
    public function getUprateResult()
    {
        return $this->container['uprate_result'];
    }

    /**
     * Sets uprate_result
     *
     * @param string|null $uprate_result Upstream Bit Rate Result.
     *
     * @return self
     */
    public function setUprateResult($uprate_result)
    {
        if (is_null($uprate_result)) {
            array_push($this->openAPINullablesSetToNull, 'uprate_result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uprate_result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uprate_result'] = $uprate_result;

        return $this;
    }

    /**
     * Gets downrate
     *
     * @return string|null
     */
    public function getDownrate()
    {
        return $this->container['downrate'];
    }

    /**
     * Sets downrate
     *
     * @param string|null $downrate Downstream Bit Rate.
     *
     * @return self
     */
    public function setDownrate($downrate)
    {
        if (is_null($downrate)) {
            array_push($this->openAPINullablesSetToNull, 'downrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downrate'] = $downrate;

        return $this;
    }

    /**
     * Gets downrate_result
     *
     * @return string|null
     */
    public function getDownrateResult()
    {
        return $this->container['downrate_result'];
    }

    /**
     * Sets downrate_result
     *
     * @param string|null $downrate_result Downstream Bit Rate Result.
     *
     * @return self
     */
    public function setDownrateResult($downrate_result)
    {
        if (is_null($downrate_result)) {
            array_push($this->openAPINullablesSetToNull, 'downrate_result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downrate_result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downrate_result'] = $downrate_result;

        return $this;
    }

    /**
     * Gets upmaxrate
     *
     * @return string|null
     */
    public function getUpmaxrate()
    {
        return $this->container['upmaxrate'];
    }

    /**
     * Sets upmaxrate
     *
     * @param string|null $upmaxrate Upstream Maximum Bit Rate.
     *
     * @return self
     */
    public function setUpmaxrate($upmaxrate)
    {
        if (is_null($upmaxrate)) {
            array_push($this->openAPINullablesSetToNull, 'upmaxrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upmaxrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upmaxrate'] = $upmaxrate;

        return $this;
    }

    /**
     * Gets downmaxrate
     *
     * @return string|null
     */
    public function getDownmaxrate()
    {
        return $this->container['downmaxrate'];
    }

    /**
     * Sets downmaxrate
     *
     * @param string|null $downmaxrate Downstream Maximum Bit Rate.
     *
     * @return self
     */
    public function setDownmaxrate($downmaxrate)
    {
        if (is_null($downmaxrate)) {
            array_push($this->openAPINullablesSetToNull, 'downmaxrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downmaxrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downmaxrate'] = $downmaxrate;

        return $this;
    }

    /**
     * Gets upattn
     *
     * @return string|null
     */
    public function getUpattn()
    {
        return $this->container['upattn'];
    }

    /**
     * Sets upattn
     *
     * @param string|null $upattn Upstream Attenuation.
     *
     * @return self
     */
    public function setUpattn($upattn)
    {
        if (is_null($upattn)) {
            array_push($this->openAPINullablesSetToNull, 'upattn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upattn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upattn'] = $upattn;

        return $this;
    }

    /**
     * Gets downattn
     *
     * @return string|null
     */
    public function getDownattn()
    {
        return $this->container['downattn'];
    }

    /**
     * Sets downattn
     *
     * @param string|null $downattn Downstream Attenuation.
     *
     * @return self
     */
    public function setDownattn($downattn)
    {
        if (is_null($downattn)) {
            array_push($this->openAPINullablesSetToNull, 'downattn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downattn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downattn'] = $downattn;

        return $this;
    }

    /**
     * Gets upnoisemargin
     *
     * @return string|null
     */
    public function getUpnoisemargin()
    {
        return $this->container['upnoisemargin'];
    }

    /**
     * Sets upnoisemargin
     *
     * @param string|null $upnoisemargin Upstream Noise Margin.
     *
     * @return self
     */
    public function setUpnoisemargin($upnoisemargin)
    {
        if (is_null($upnoisemargin)) {
            array_push($this->openAPINullablesSetToNull, 'upnoisemargin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upnoisemargin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upnoisemargin'] = $upnoisemargin;

        return $this;
    }

    /**
     * Gets upnoisemargin_result
     *
     * @return string|null
     */
    public function getUpnoisemarginResult()
    {
        return $this->container['upnoisemargin_result'];
    }

    /**
     * Sets upnoisemargin_result
     *
     * @param string|null $upnoisemargin_result Upstream Noise Margin Result.
     *
     * @return self
     */
    public function setUpnoisemarginResult($upnoisemargin_result)
    {
        if (is_null($upnoisemargin_result)) {
            array_push($this->openAPINullablesSetToNull, 'upnoisemargin_result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upnoisemargin_result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upnoisemargin_result'] = $upnoisemargin_result;

        return $this;
    }

    /**
     * Gets downnoisemargin
     *
     * @return string|null
     */
    public function getDownnoisemargin()
    {
        return $this->container['downnoisemargin'];
    }

    /**
     * Sets downnoisemargin
     *
     * @param string|null $downnoisemargin Downstream Noise Margin.
     *
     * @return self
     */
    public function setDownnoisemargin($downnoisemargin)
    {
        if (is_null($downnoisemargin)) {
            array_push($this->openAPINullablesSetToNull, 'downnoisemargin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downnoisemargin', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downnoisemargin'] = $downnoisemargin;

        return $this;
    }

    /**
     * Gets downnoisemargin_result
     *
     * @return string|null
     */
    public function getDownnoisemarginResult()
    {
        return $this->container['downnoisemargin_result'];
    }

    /**
     * Sets downnoisemargin_result
     *
     * @param string|null $downnoisemargin_result Downstream Noise Margin Result.
     *
     * @return self
     */
    public function setDownnoisemarginResult($downnoisemargin_result)
    {
        if (is_null($downnoisemargin_result)) {
            array_push($this->openAPINullablesSetToNull, 'downnoisemargin_result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downnoisemargin_result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downnoisemargin_result'] = $downnoisemargin_result;

        return $this;
    }

    /**
     * Gets lclcrcerrors
     *
     * @return string|null
     */
    public function getLclcrcerrors()
    {
        return $this->container['lclcrcerrors'];
    }

    /**
     * Sets lclcrcerrors
     *
     * @param string|null $lclcrcerrors Local CRC Errors.
     *
     * @return self
     */
    public function setLclcrcerrors($lclcrcerrors)
    {
        if (is_null($lclcrcerrors)) {
            array_push($this->openAPINullablesSetToNull, 'lclcrcerrors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lclcrcerrors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lclcrcerrors'] = $lclcrcerrors;

        return $this;
    }

    /**
     * Gets rmtcrcerrors
     *
     * @return string|null
     */
    public function getRmtcrcerrors()
    {
        return $this->container['rmtcrcerrors'];
    }

    /**
     * Sets rmtcrcerrors
     *
     * @param string|null $rmtcrcerrors Remote CRC Errors.
     *
     * @return self
     */
    public function setRmtcrcerrors($rmtcrcerrors)
    {
        if (is_null($rmtcrcerrors)) {
            array_push($this->openAPINullablesSetToNull, 'rmtcrcerrors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rmtcrcerrors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rmtcrcerrors'] = $rmtcrcerrors;

        return $this;
    }

    /**
     * Gets lcles
     *
     * @return string|null
     */
    public function getLcles()
    {
        return $this->container['lcles'];
    }

    /**
     * Sets lcles
     *
     * @param string|null $lcles Local Errored Seconds.
     *
     * @return self
     */
    public function setLcles($lcles)
    {
        if (is_null($lcles)) {
            array_push($this->openAPINullablesSetToNull, 'lcles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lcles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lcles'] = $lcles;

        return $this;
    }

    /**
     * Gets rmtes
     *
     * @return string|null
     */
    public function getRmtes()
    {
        return $this->container['rmtes'];
    }

    /**
     * Sets rmtes
     *
     * @param string|null $rmtes Remote Errored Seconds.
     *
     * @return self
     */
    public function setRmtes($rmtes)
    {
        if (is_null($rmtes)) {
            array_push($this->openAPINullablesSetToNull, 'rmtes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rmtes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rmtes'] = $rmtes;

        return $this;
    }

    /**
     * Gets lclses
     *
     * @return string|null
     */
    public function getLclses()
    {
        return $this->container['lclses'];
    }

    /**
     * Sets lclses
     *
     * @param string|null $lclses Local Severely Errored Seconds.
     *
     * @return self
     */
    public function setLclses($lclses)
    {
        if (is_null($lclses)) {
            array_push($this->openAPINullablesSetToNull, 'lclses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lclses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lclses'] = $lclses;

        return $this;
    }

    /**
     * Gets rmtses
     *
     * @return string|null
     */
    public function getRmtses()
    {
        return $this->container['rmtses'];
    }

    /**
     * Sets rmtses
     *
     * @param string|null $rmtses Remote Severely Errored Seconds.
     *
     * @return self
     */
    public function setRmtses($rmtses)
    {
        if (is_null($rmtses)) {
            array_push($this->openAPINullablesSetToNull, 'rmtses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rmtses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rmtses'] = $rmtses;

        return $this;
    }

    /**
     * Gets updatapath
     *
     * @return string|null
     */
    public function getUpdatapath()
    {
        return $this->container['updatapath'];
    }

    /**
     * Sets updatapath
     *
     * @param string|null $updatapath Up Data Path.
     *
     * @return self
     */
    public function setUpdatapath($updatapath)
    {
        if (is_null($updatapath)) {
            array_push($this->openAPINullablesSetToNull, 'updatapath');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatapath', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatapath'] = $updatapath;

        return $this;
    }

    /**
     * Gets downdatapath
     *
     * @return string|null
     */
    public function getDowndatapath()
    {
        return $this->container['downdatapath'];
    }

    /**
     * Sets downdatapath
     *
     * @param string|null $downdatapath Down Data Path.
     *
     * @return self
     */
    public function setDowndatapath($downdatapath)
    {
        if (is_null($downdatapath)) {
            array_push($this->openAPINullablesSetToNull, 'downdatapath');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downdatapath', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downdatapath'] = $downdatapath;

        return $this;
    }

    /**
     * Gets standardused
     *
     * @return string|null
     */
    public function getStandardused()
    {
        return $this->container['standardused'];
    }

    /**
     * Sets standardused
     *
     * @param string|null $standardused Standard Used.
     *
     * @return self
     */
    public function setStandardused($standardused)
    {
        if (is_null($standardused)) {
            array_push($this->openAPINullablesSetToNull, 'standardused');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('standardused', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['standardused'] = $standardused;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


