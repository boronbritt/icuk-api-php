<?php
/**
 * BroadbandKBDIpTestTraffic
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDIpTestTraffic Class Doc Comment
 *
 * @category Class
 * @description BroadbandKBDIpTestTraffic struct
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDIpTestTraffic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDIpTestTraffic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cvlan_configured_rate' => 'string',
        'cvlan_transmitted_rate' => 'string',
        'cvlan_dropped_secs' => 'string',
        'cvlan_dropped_session' => 'string',
        'aggregate_packets_sent' => 'string',
        'aggregate_packets_received' => 'string',
        'aggregate_bytes_sent' => 'string',
        'aggregate_bytes_received' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cvlan_configured_rate' => null,
        'cvlan_transmitted_rate' => null,
        'cvlan_dropped_secs' => null,
        'cvlan_dropped_session' => null,
        'aggregate_packets_sent' => null,
        'aggregate_packets_received' => null,
        'aggregate_bytes_sent' => null,
        'aggregate_bytes_received' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cvlan_configured_rate' => true,
		'cvlan_transmitted_rate' => true,
		'cvlan_dropped_secs' => true,
		'cvlan_dropped_session' => true,
		'aggregate_packets_sent' => true,
		'aggregate_packets_received' => true,
		'aggregate_bytes_sent' => true,
		'aggregate_bytes_received' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cvlan_configured_rate' => 'cvlan_configured_rate',
        'cvlan_transmitted_rate' => 'cvlan_transmitted_rate',
        'cvlan_dropped_secs' => 'cvlan_dropped_secs',
        'cvlan_dropped_session' => 'cvlan_dropped_session',
        'aggregate_packets_sent' => 'aggregate_packets_sent',
        'aggregate_packets_received' => 'aggregate_packets_received',
        'aggregate_bytes_sent' => 'aggregate_bytes_sent',
        'aggregate_bytes_received' => 'aggregate_bytes_received'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cvlan_configured_rate' => 'setCvlanConfiguredRate',
        'cvlan_transmitted_rate' => 'setCvlanTransmittedRate',
        'cvlan_dropped_secs' => 'setCvlanDroppedSecs',
        'cvlan_dropped_session' => 'setCvlanDroppedSession',
        'aggregate_packets_sent' => 'setAggregatePacketsSent',
        'aggregate_packets_received' => 'setAggregatePacketsReceived',
        'aggregate_bytes_sent' => 'setAggregateBytesSent',
        'aggregate_bytes_received' => 'setAggregateBytesReceived'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cvlan_configured_rate' => 'getCvlanConfiguredRate',
        'cvlan_transmitted_rate' => 'getCvlanTransmittedRate',
        'cvlan_dropped_secs' => 'getCvlanDroppedSecs',
        'cvlan_dropped_session' => 'getCvlanDroppedSession',
        'aggregate_packets_sent' => 'getAggregatePacketsSent',
        'aggregate_packets_received' => 'getAggregatePacketsReceived',
        'aggregate_bytes_sent' => 'getAggregateBytesSent',
        'aggregate_bytes_received' => 'getAggregateBytesReceived'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cvlan_configured_rate', $data ?? [], null);
        $this->setIfExists('cvlan_transmitted_rate', $data ?? [], null);
        $this->setIfExists('cvlan_dropped_secs', $data ?? [], null);
        $this->setIfExists('cvlan_dropped_session', $data ?? [], null);
        $this->setIfExists('aggregate_packets_sent', $data ?? [], null);
        $this->setIfExists('aggregate_packets_received', $data ?? [], null);
        $this->setIfExists('aggregate_bytes_sent', $data ?? [], null);
        $this->setIfExists('aggregate_bytes_received', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cvlan_configured_rate
     *
     * @return string|null
     */
    public function getCvlanConfiguredRate()
    {
        return $this->container['cvlan_configured_rate'];
    }

    /**
     * Sets cvlan_configured_rate
     *
     * @param string|null $cvlan_configured_rate Aggregated Traffic – cvlan configured rate.
     *
     * @return self
     */
    public function setCvlanConfiguredRate($cvlan_configured_rate)
    {
        if (is_null($cvlan_configured_rate)) {
            array_push($this->openAPINullablesSetToNull, 'cvlan_configured_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvlan_configured_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvlan_configured_rate'] = $cvlan_configured_rate;

        return $this;
    }

    /**
     * Gets cvlan_transmitted_rate
     *
     * @return string|null
     */
    public function getCvlanTransmittedRate()
    {
        return $this->container['cvlan_transmitted_rate'];
    }

    /**
     * Sets cvlan_transmitted_rate
     *
     * @param string|null $cvlan_transmitted_rate Aggregated Traffic – cvlan transmitted_rate.
     *
     * @return self
     */
    public function setCvlanTransmittedRate($cvlan_transmitted_rate)
    {
        if (is_null($cvlan_transmitted_rate)) {
            array_push($this->openAPINullablesSetToNull, 'cvlan_transmitted_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvlan_transmitted_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvlan_transmitted_rate'] = $cvlan_transmitted_rate;

        return $this;
    }

    /**
     * Gets cvlan_dropped_secs
     *
     * @return string|null
     */
    public function getCvlanDroppedSecs()
    {
        return $this->container['cvlan_dropped_secs'];
    }

    /**
     * Sets cvlan_dropped_secs
     *
     * @param string|null $cvlan_dropped_secs Aggregated Traffic – cvlan dropped_packets_over_10sec.
     *
     * @return self
     */
    public function setCvlanDroppedSecs($cvlan_dropped_secs)
    {
        if (is_null($cvlan_dropped_secs)) {
            array_push($this->openAPINullablesSetToNull, 'cvlan_dropped_secs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvlan_dropped_secs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvlan_dropped_secs'] = $cvlan_dropped_secs;

        return $this;
    }

    /**
     * Gets cvlan_dropped_session
     *
     * @return string|null
     */
    public function getCvlanDroppedSession()
    {
        return $this->container['cvlan_dropped_session'];
    }

    /**
     * Sets cvlan_dropped_session
     *
     * @param string|null $cvlan_dropped_session Aggregated Traffic – cvlan dropped_packets_since_start_of_session.
     *
     * @return self
     */
    public function setCvlanDroppedSession($cvlan_dropped_session)
    {
        if (is_null($cvlan_dropped_session)) {
            array_push($this->openAPINullablesSetToNull, 'cvlan_dropped_session');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cvlan_dropped_session', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cvlan_dropped_session'] = $cvlan_dropped_session;

        return $this;
    }

    /**
     * Gets aggregate_packets_sent
     *
     * @return string|null
     */
    public function getAggregatePacketsSent()
    {
        return $this->container['aggregate_packets_sent'];
    }

    /**
     * Sets aggregate_packets_sent
     *
     * @param string|null $aggregate_packets_sent Aggregated Traffic - No. of packets sent.
     *
     * @return self
     */
    public function setAggregatePacketsSent($aggregate_packets_sent)
    {
        if (is_null($aggregate_packets_sent)) {
            array_push($this->openAPINullablesSetToNull, 'aggregate_packets_sent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregate_packets_sent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregate_packets_sent'] = $aggregate_packets_sent;

        return $this;
    }

    /**
     * Gets aggregate_packets_received
     *
     * @return string|null
     */
    public function getAggregatePacketsReceived()
    {
        return $this->container['aggregate_packets_received'];
    }

    /**
     * Sets aggregate_packets_received
     *
     * @param string|null $aggregate_packets_received Aggregated Traffic - No. of packets received.
     *
     * @return self
     */
    public function setAggregatePacketsReceived($aggregate_packets_received)
    {
        if (is_null($aggregate_packets_received)) {
            array_push($this->openAPINullablesSetToNull, 'aggregate_packets_received');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregate_packets_received', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregate_packets_received'] = $aggregate_packets_received;

        return $this;
    }

    /**
     * Gets aggregate_bytes_sent
     *
     * @return string|null
     */
    public function getAggregateBytesSent()
    {
        return $this->container['aggregate_bytes_sent'];
    }

    /**
     * Sets aggregate_bytes_sent
     *
     * @param string|null $aggregate_bytes_sent Aggregated Traffic - No. of bytes sent.
     *
     * @return self
     */
    public function setAggregateBytesSent($aggregate_bytes_sent)
    {
        if (is_null($aggregate_bytes_sent)) {
            array_push($this->openAPINullablesSetToNull, 'aggregate_bytes_sent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregate_bytes_sent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregate_bytes_sent'] = $aggregate_bytes_sent;

        return $this;
    }

    /**
     * Gets aggregate_bytes_received
     *
     * @return string|null
     */
    public function getAggregateBytesReceived()
    {
        return $this->container['aggregate_bytes_received'];
    }

    /**
     * Sets aggregate_bytes_received
     *
     * @param string|null $aggregate_bytes_received Aggregated Traffic - No. of bytes received.
     *
     * @return self
     */
    public function setAggregateBytesReceived($aggregate_bytes_received)
    {
        if (is_null($aggregate_bytes_received)) {
            array_push($this->openAPINullablesSetToNull, 'aggregate_bytes_received');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregate_bytes_received', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregate_bytes_received'] = $aggregate_bytes_received;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


