<?php
/**
 * BroadbandKBDTam
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDTam Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD TAM Network subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDTam implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDTam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outcome' => 'string',
        'uptxpower' => 'string',
        'downtxpower' => 'string',
        'upstream_psd' => 'string',
        'downstream_psd' => 'string',
        'dsl' => '\OpenAPI\Client\Model\BroadbandKBDTamDsl',
        'inp' => '\OpenAPI\Client\Model\BroadbandKBDTamInp',
        'atm' => '\OpenAPI\Client\Model\BroadbandKBDTamAtm',
        'ppp' => '\OpenAPI\Client\Model\BroadbandKBDTamPPP',
        'ip' => '\OpenAPI\Client\Model\BroadbandKBDTamIP'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outcome' => null,
        'uptxpower' => null,
        'downtxpower' => null,
        'upstream_psd' => null,
        'downstream_psd' => null,
        'dsl' => null,
        'inp' => null,
        'atm' => null,
        'ppp' => null,
        'ip' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outcome' => true,
		'uptxpower' => true,
		'downtxpower' => true,
		'upstream_psd' => true,
		'downstream_psd' => true,
		'dsl' => false,
		'inp' => false,
		'atm' => false,
		'ppp' => false,
		'ip' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outcome' => 'outcome',
        'uptxpower' => 'uptxpower',
        'downtxpower' => 'downtxpower',
        'upstream_psd' => 'upstream_psd',
        'downstream_psd' => 'downstream_psd',
        'dsl' => 'dsl',
        'inp' => 'inp',
        'atm' => 'atm',
        'ppp' => 'ppp',
        'ip' => 'ip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outcome' => 'setOutcome',
        'uptxpower' => 'setUptxpower',
        'downtxpower' => 'setDowntxpower',
        'upstream_psd' => 'setUpstreamPsd',
        'downstream_psd' => 'setDownstreamPsd',
        'dsl' => 'setDsl',
        'inp' => 'setInp',
        'atm' => 'setAtm',
        'ppp' => 'setPpp',
        'ip' => 'setIp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outcome' => 'getOutcome',
        'uptxpower' => 'getUptxpower',
        'downtxpower' => 'getDowntxpower',
        'upstream_psd' => 'getUpstreamPsd',
        'downstream_psd' => 'getDownstreamPsd',
        'dsl' => 'getDsl',
        'inp' => 'getInp',
        'atm' => 'getAtm',
        'ppp' => 'getPpp',
        'ip' => 'getIp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('uptxpower', $data ?? [], null);
        $this->setIfExists('downtxpower', $data ?? [], null);
        $this->setIfExists('upstream_psd', $data ?? [], null);
        $this->setIfExists('downstream_psd', $data ?? [], null);
        $this->setIfExists('dsl', $data ?? [], null);
        $this->setIfExists('inp', $data ?? [], null);
        $this->setIfExists('atm', $data ?? [], null);
        $this->setIfExists('ppp', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome The test outcome.
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        if (is_null($outcome)) {
            array_push($this->openAPINullablesSetToNull, 'outcome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets uptxpower
     *
     * @return string|null
     */
    public function getUptxpower()
    {
        return $this->container['uptxpower'];
    }

    /**
     * Sets uptxpower
     *
     * @param string|null $uptxpower Transmitter Power (Upstream).
     *
     * @return self
     */
    public function setUptxpower($uptxpower)
    {
        if (is_null($uptxpower)) {
            array_push($this->openAPINullablesSetToNull, 'uptxpower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uptxpower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uptxpower'] = $uptxpower;

        return $this;
    }

    /**
     * Gets downtxpower
     *
     * @return string|null
     */
    public function getDowntxpower()
    {
        return $this->container['downtxpower'];
    }

    /**
     * Sets downtxpower
     *
     * @param string|null $downtxpower Transmitter Power (Downstream).
     *
     * @return self
     */
    public function setDowntxpower($downtxpower)
    {
        if (is_null($downtxpower)) {
            array_push($this->openAPINullablesSetToNull, 'downtxpower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downtxpower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downtxpower'] = $downtxpower;

        return $this;
    }

    /**
     * Gets upstream_psd
     *
     * @return string|null
     */
    public function getUpstreamPsd()
    {
        return $this->container['upstream_psd'];
    }

    /**
     * Sets upstream_psd
     *
     * @param string|null $upstream_psd Upstream psd.
     *
     * @return self
     */
    public function setUpstreamPsd($upstream_psd)
    {
        if (is_null($upstream_psd)) {
            array_push($this->openAPINullablesSetToNull, 'upstream_psd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upstream_psd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upstream_psd'] = $upstream_psd;

        return $this;
    }

    /**
     * Gets downstream_psd
     *
     * @return string|null
     */
    public function getDownstreamPsd()
    {
        return $this->container['downstream_psd'];
    }

    /**
     * Sets downstream_psd
     *
     * @param string|null $downstream_psd Downstream psd.
     *
     * @return self
     */
    public function setDownstreamPsd($downstream_psd)
    {
        if (is_null($downstream_psd)) {
            array_push($this->openAPINullablesSetToNull, 'downstream_psd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('downstream_psd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['downstream_psd'] = $downstream_psd;

        return $this;
    }

    /**
     * Gets dsl
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDTamDsl|null
     */
    public function getDsl()
    {
        return $this->container['dsl'];
    }

    /**
     * Sets dsl
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDTamDsl|null $dsl dsl
     *
     * @return self
     */
    public function setDsl($dsl)
    {
        if (is_null($dsl)) {
            throw new \InvalidArgumentException('non-nullable dsl cannot be null');
        }
        $this->container['dsl'] = $dsl;

        return $this;
    }

    /**
     * Gets inp
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDTamInp|null
     */
    public function getInp()
    {
        return $this->container['inp'];
    }

    /**
     * Sets inp
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDTamInp|null $inp inp
     *
     * @return self
     */
    public function setInp($inp)
    {
        if (is_null($inp)) {
            throw new \InvalidArgumentException('non-nullable inp cannot be null');
        }
        $this->container['inp'] = $inp;

        return $this;
    }

    /**
     * Gets atm
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDTamAtm|null
     */
    public function getAtm()
    {
        return $this->container['atm'];
    }

    /**
     * Sets atm
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDTamAtm|null $atm atm
     *
     * @return self
     */
    public function setAtm($atm)
    {
        if (is_null($atm)) {
            throw new \InvalidArgumentException('non-nullable atm cannot be null');
        }
        $this->container['atm'] = $atm;

        return $this;
    }

    /**
     * Gets ppp
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDTamPPP|null
     */
    public function getPpp()
    {
        return $this->container['ppp'];
    }

    /**
     * Sets ppp
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDTamPPP|null $ppp ppp
     *
     * @return self
     */
    public function setPpp($ppp)
    {
        if (is_null($ppp)) {
            throw new \InvalidArgumentException('non-nullable ppp cannot be null');
        }
        $this->container['ppp'] = $ppp;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDTamIP|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDTamIP|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


