<?php
/**
 * BroadbandKBDAccessDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDAccessDetails Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD Access Details subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDAccessDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDAccessDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'result' => 'string',
        'description' => 'string',
        'fault_code' => 'string',
        'fault_pattern' => 'string',
        'fault_date' => 'string',
        'time_of_the_day_issue' => 'string',
        'fault_time' => 'string',
        'prognosis' => 'string',
        'line_rate' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend',
        'snr' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend',
        'error' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend',
        'lineloss' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend',
        'initialization' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend',
        'uptime' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend',
        'fault_subtest' => '\OpenAPI\Client\Model\BroadbandKBDFaultLocalization'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'result' => null,
        'description' => null,
        'fault_code' => null,
        'fault_pattern' => null,
        'fault_date' => null,
        'time_of_the_day_issue' => null,
        'fault_time' => null,
        'prognosis' => null,
        'line_rate' => null,
        'snr' => null,
        'error' => null,
        'lineloss' => null,
        'initialization' => null,
        'uptime' => null,
        'fault_subtest' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'result' => true,
		'description' => true,
		'fault_code' => true,
		'fault_pattern' => true,
		'fault_date' => true,
		'time_of_the_day_issue' => true,
		'fault_time' => true,
		'prognosis' => true,
		'line_rate' => false,
		'snr' => false,
		'error' => false,
		'lineloss' => false,
		'initialization' => false,
		'uptime' => false,
		'fault_subtest' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result' => 'result',
        'description' => 'description',
        'fault_code' => 'fault_code',
        'fault_pattern' => 'fault_pattern',
        'fault_date' => 'fault_date',
        'time_of_the_day_issue' => 'time_of_the_day_issue',
        'fault_time' => 'fault_time',
        'prognosis' => 'prognosis',
        'line_rate' => 'line_rate',
        'snr' => 'snr',
        'error' => 'error',
        'lineloss' => 'lineloss',
        'initialization' => 'initialization',
        'uptime' => 'uptime',
        'fault_subtest' => 'faultSubtest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result' => 'setResult',
        'description' => 'setDescription',
        'fault_code' => 'setFaultCode',
        'fault_pattern' => 'setFaultPattern',
        'fault_date' => 'setFaultDate',
        'time_of_the_day_issue' => 'setTimeOfTheDayIssue',
        'fault_time' => 'setFaultTime',
        'prognosis' => 'setPrognosis',
        'line_rate' => 'setLineRate',
        'snr' => 'setSnr',
        'error' => 'setError',
        'lineloss' => 'setLineloss',
        'initialization' => 'setInitialization',
        'uptime' => 'setUptime',
        'fault_subtest' => 'setFaultSubtest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result' => 'getResult',
        'description' => 'getDescription',
        'fault_code' => 'getFaultCode',
        'fault_pattern' => 'getFaultPattern',
        'fault_date' => 'getFaultDate',
        'time_of_the_day_issue' => 'getTimeOfTheDayIssue',
        'fault_time' => 'getFaultTime',
        'prognosis' => 'getPrognosis',
        'line_rate' => 'getLineRate',
        'snr' => 'getSnr',
        'error' => 'getError',
        'lineloss' => 'getLineloss',
        'initialization' => 'getInitialization',
        'uptime' => 'getUptime',
        'fault_subtest' => 'getFaultSubtest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('fault_code', $data ?? [], null);
        $this->setIfExists('fault_pattern', $data ?? [], null);
        $this->setIfExists('fault_date', $data ?? [], null);
        $this->setIfExists('time_of_the_day_issue', $data ?? [], null);
        $this->setIfExists('fault_time', $data ?? [], null);
        $this->setIfExists('prognosis', $data ?? [], null);
        $this->setIfExists('line_rate', $data ?? [], null);
        $this->setIfExists('snr', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('lineloss', $data ?? [], null);
        $this->setIfExists('initialization', $data ?? [], null);
        $this->setIfExists('uptime', $data ?? [], null);
        $this->setIfExists('fault_subtest', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result The test result.
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The test description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fault_code
     *
     * @return string|null
     */
    public function getFaultCode()
    {
        return $this->container['fault_code'];
    }

    /**
     * Sets fault_code
     *
     * @param string|null $fault_code The Fault Code.
     *
     * @return self
     */
    public function setFaultCode($fault_code)
    {
        if (is_null($fault_code)) {
            array_push($this->openAPINullablesSetToNull, 'fault_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_code'] = $fault_code;

        return $this;
    }

    /**
     * Gets fault_pattern
     *
     * @return string|null
     */
    public function getFaultPattern()
    {
        return $this->container['fault_pattern'];
    }

    /**
     * Sets fault_pattern
     *
     * @param string|null $fault_pattern The Fault Pattern.
     *
     * @return self
     */
    public function setFaultPattern($fault_pattern)
    {
        if (is_null($fault_pattern)) {
            array_push($this->openAPINullablesSetToNull, 'fault_pattern');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_pattern', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_pattern'] = $fault_pattern;

        return $this;
    }

    /**
     * Gets fault_date
     *
     * @return string|null
     */
    public function getFaultDate()
    {
        return $this->container['fault_date'];
    }

    /**
     * Sets fault_date
     *
     * @param string|null $fault_date The Fault Date.
     *
     * @return self
     */
    public function setFaultDate($fault_date)
    {
        if (is_null($fault_date)) {
            array_push($this->openAPINullablesSetToNull, 'fault_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_date'] = $fault_date;

        return $this;
    }

    /**
     * Gets time_of_the_day_issue
     *
     * @return string|null
     */
    public function getTimeOfTheDayIssue()
    {
        return $this->container['time_of_the_day_issue'];
    }

    /**
     * Sets time_of_the_day_issue
     *
     * @param string|null $time_of_the_day_issue Time of Day Issue.
     *
     * @return self
     */
    public function setTimeOfTheDayIssue($time_of_the_day_issue)
    {
        if (is_null($time_of_the_day_issue)) {
            array_push($this->openAPINullablesSetToNull, 'time_of_the_day_issue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_of_the_day_issue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_of_the_day_issue'] = $time_of_the_day_issue;

        return $this;
    }

    /**
     * Gets fault_time
     *
     * @return string|null
     */
    public function getFaultTime()
    {
        return $this->container['fault_time'];
    }

    /**
     * Sets fault_time
     *
     * @param string|null $fault_time The Fault Time.
     *
     * @return self
     */
    public function setFaultTime($fault_time)
    {
        if (is_null($fault_time)) {
            array_push($this->openAPINullablesSetToNull, 'fault_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_time'] = $fault_time;

        return $this;
    }

    /**
     * Gets prognosis
     *
     * @return string|null
     */
    public function getPrognosis()
    {
        return $this->container['prognosis'];
    }

    /**
     * Sets prognosis
     *
     * @param string|null $prognosis The Prognosis.
     *
     * @return self
     */
    public function setPrognosis($prognosis)
    {
        if (is_null($prognosis)) {
            array_push($this->openAPINullablesSetToNull, 'prognosis');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prognosis', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prognosis'] = $prognosis;

        return $this;
    }

    /**
     * Gets line_rate
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null
     */
    public function getLineRate()
    {
        return $this->container['line_rate'];
    }

    /**
     * Sets line_rate
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null $line_rate line_rate
     *
     * @return self
     */
    public function setLineRate($line_rate)
    {
        if (is_null($line_rate)) {
            throw new \InvalidArgumentException('non-nullable line_rate cannot be null');
        }
        $this->container['line_rate'] = $line_rate;

        return $this;
    }

    /**
     * Gets snr
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null
     */
    public function getSnr()
    {
        return $this->container['snr'];
    }

    /**
     * Sets snr
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null $snr snr
     *
     * @return self
     */
    public function setSnr($snr)
    {
        if (is_null($snr)) {
            throw new \InvalidArgumentException('non-nullable snr cannot be null');
        }
        $this->container['snr'] = $snr;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets lineloss
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null
     */
    public function getLineloss()
    {
        return $this->container['lineloss'];
    }

    /**
     * Sets lineloss
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null $lineloss lineloss
     *
     * @return self
     */
    public function setLineloss($lineloss)
    {
        if (is_null($lineloss)) {
            throw new \InvalidArgumentException('non-nullable lineloss cannot be null');
        }
        $this->container['lineloss'] = $lineloss;

        return $this;
    }

    /**
     * Gets initialization
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null
     */
    public function getInitialization()
    {
        return $this->container['initialization'];
    }

    /**
     * Sets initialization
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null $initialization initialization
     *
     * @return self
     */
    public function setInitialization($initialization)
    {
        if (is_null($initialization)) {
            throw new \InvalidArgumentException('non-nullable initialization cannot be null');
        }
        $this->container['initialization'] = $initialization;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetailsTrend|null $uptime uptime
     *
     * @return self
     */
    public function setUptime($uptime)
    {
        if (is_null($uptime)) {
            throw new \InvalidArgumentException('non-nullable uptime cannot be null');
        }
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets fault_subtest
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDFaultLocalization|null
     */
    public function getFaultSubtest()
    {
        return $this->container['fault_subtest'];
    }

    /**
     * Sets fault_subtest
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDFaultLocalization|null $fault_subtest fault_subtest
     *
     * @return self
     */
    public function setFaultSubtest($fault_subtest)
    {
        if (is_null($fault_subtest)) {
            throw new \InvalidArgumentException('non-nullable fault_subtest cannot be null');
        }
        $this->container['fault_subtest'] = $fault_subtest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


