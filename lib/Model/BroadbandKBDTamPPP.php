<?php
/**
 * BroadbandKBDTamPPP
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDTamPPP Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD PPP INP subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDTamPPP implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDTamPPP';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outcome' => 'string',
        'user' => 'string',
        'localip' => 'string',
        'localnetmask' => 'string',
        'localdns' => 'string',
        'remoteip' => 'string',
        'mac' => 'string',
        'pap' => 'string',
        'chap' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outcome' => null,
        'user' => null,
        'localip' => null,
        'localnetmask' => null,
        'localdns' => null,
        'remoteip' => null,
        'mac' => null,
        'pap' => null,
        'chap' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outcome' => true,
		'user' => true,
		'localip' => true,
		'localnetmask' => true,
		'localdns' => true,
		'remoteip' => true,
		'mac' => true,
		'pap' => true,
		'chap' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outcome' => 'outcome',
        'user' => 'user',
        'localip' => 'localip',
        'localnetmask' => 'localnetmask',
        'localdns' => 'localdns',
        'remoteip' => 'remoteip',
        'mac' => 'mac',
        'pap' => 'pap',
        'chap' => 'chap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outcome' => 'setOutcome',
        'user' => 'setUser',
        'localip' => 'setLocalip',
        'localnetmask' => 'setLocalnetmask',
        'localdns' => 'setLocaldns',
        'remoteip' => 'setRemoteip',
        'mac' => 'setMac',
        'pap' => 'setPap',
        'chap' => 'setChap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outcome' => 'getOutcome',
        'user' => 'getUser',
        'localip' => 'getLocalip',
        'localnetmask' => 'getLocalnetmask',
        'localdns' => 'getLocaldns',
        'remoteip' => 'getRemoteip',
        'mac' => 'getMac',
        'pap' => 'getPap',
        'chap' => 'getChap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('localip', $data ?? [], null);
        $this->setIfExists('localnetmask', $data ?? [], null);
        $this->setIfExists('localdns', $data ?? [], null);
        $this->setIfExists('remoteip', $data ?? [], null);
        $this->setIfExists('mac', $data ?? [], null);
        $this->setIfExists('pap', $data ?? [], null);
        $this->setIfExists('chap', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome The test outcome.
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        if (is_null($outcome)) {
            array_push($this->openAPINullablesSetToNull, 'outcome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user User name for PPP login.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets localip
     *
     * @return string|null
     */
    public function getLocalip()
    {
        return $this->container['localip'];
    }

    /**
     * Sets localip
     *
     * @param string|null $localip Local IP address.
     *
     * @return self
     */
    public function setLocalip($localip)
    {
        if (is_null($localip)) {
            array_push($this->openAPINullablesSetToNull, 'localip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localip'] = $localip;

        return $this;
    }

    /**
     * Gets localnetmask
     *
     * @return string|null
     */
    public function getLocalnetmask()
    {
        return $this->container['localnetmask'];
    }

    /**
     * Sets localnetmask
     *
     * @param string|null $localnetmask Local IP netmask.
     *
     * @return self
     */
    public function setLocalnetmask($localnetmask)
    {
        if (is_null($localnetmask)) {
            array_push($this->openAPINullablesSetToNull, 'localnetmask');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localnetmask', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localnetmask'] = $localnetmask;

        return $this;
    }

    /**
     * Gets localdns
     *
     * @return string|null
     */
    public function getLocaldns()
    {
        return $this->container['localdns'];
    }

    /**
     * Sets localdns
     *
     * @param string|null $localdns Local DNS address.
     *
     * @return self
     */
    public function setLocaldns($localdns)
    {
        if (is_null($localdns)) {
            array_push($this->openAPINullablesSetToNull, 'localdns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('localdns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['localdns'] = $localdns;

        return $this;
    }

    /**
     * Gets remoteip
     *
     * @return string|null
     */
    public function getRemoteip()
    {
        return $this->container['remoteip'];
    }

    /**
     * Sets remoteip
     *
     * @param string|null $remoteip Remote IP address.
     *
     * @return self
     */
    public function setRemoteip($remoteip)
    {
        if (is_null($remoteip)) {
            array_push($this->openAPINullablesSetToNull, 'remoteip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remoteip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remoteip'] = $remoteip;

        return $this;
    }

    /**
     * Gets mac
     *
     * @return string|null
     */
    public function getMac()
    {
        return $this->container['mac'];
    }

    /**
     * Sets mac
     *
     * @param string|null $mac MAC address.
     *
     * @return self
     */
    public function setMac($mac)
    {
        if (is_null($mac)) {
            array_push($this->openAPINullablesSetToNull, 'mac');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mac', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mac'] = $mac;

        return $this;
    }

    /**
     * Gets pap
     *
     * @return string|null
     */
    public function getPap()
    {
        return $this->container['pap'];
    }

    /**
     * Sets pap
     *
     * @param string|null $pap PAP authentication.
     *
     * @return self
     */
    public function setPap($pap)
    {
        if (is_null($pap)) {
            array_push($this->openAPINullablesSetToNull, 'pap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pap'] = $pap;

        return $this;
    }

    /**
     * Gets chap
     *
     * @return string|null
     */
    public function getChap()
    {
        return $this->container['chap'];
    }

    /**
     * Sets chap
     *
     * @param string|null $chap CHAP authentication.
     *
     * @return self
     */
    public function setChap($chap)
    {
        if (is_null($chap)) {
            array_push($this->openAPINullablesSetToNull, 'chap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chap'] = $chap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


