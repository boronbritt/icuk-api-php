<?php
/**
 * BroadbandKBDRadiusLog
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDRadiusLog Class Doc Comment
 *
 * @category Class
 * @description Represents Radius Log summary of the KBD radius subtest
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDRadiusLog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDRadiusLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outcome_message' => 'string',
        'total_messages' => 'string',
        'start_messages' => 'string',
        'working_messages' => 'string',
        'worked_messages' => 'string',
        'test_messages' => 'string',
        'ras_messages' => 'string',
        'logon_messages' => 'string',
        'reject_messages' => 'string',
        'messages_1045' => 'string',
        'messages_1083' => 'string',
        'messages_1117' => 'string',
        'messages_1118' => 'string',
        'last_logon' => 'string',
        'last_start_time' => 'string',
        'last_duration' => 'string',
        'last_mbytes_in' => 'string',
        'last_mbytes_out' => 'string',
        'all_logon_id' => 'string',
        'all_start_time' => 'string',
        'all_duration' => 'string',
        'all_mbytes_in' => 'string',
        'all_mbytes_out' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outcome_message' => null,
        'total_messages' => null,
        'start_messages' => null,
        'working_messages' => null,
        'worked_messages' => null,
        'test_messages' => null,
        'ras_messages' => null,
        'logon_messages' => null,
        'reject_messages' => null,
        'messages_1045' => null,
        'messages_1083' => null,
        'messages_1117' => null,
        'messages_1118' => null,
        'last_logon' => null,
        'last_start_time' => null,
        'last_duration' => null,
        'last_mbytes_in' => null,
        'last_mbytes_out' => null,
        'all_logon_id' => null,
        'all_start_time' => null,
        'all_duration' => null,
        'all_mbytes_in' => null,
        'all_mbytes_out' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outcome_message' => true,
		'total_messages' => true,
		'start_messages' => true,
		'working_messages' => true,
		'worked_messages' => true,
		'test_messages' => true,
		'ras_messages' => true,
		'logon_messages' => true,
		'reject_messages' => true,
		'messages_1045' => true,
		'messages_1083' => true,
		'messages_1117' => true,
		'messages_1118' => true,
		'last_logon' => true,
		'last_start_time' => true,
		'last_duration' => true,
		'last_mbytes_in' => true,
		'last_mbytes_out' => true,
		'all_logon_id' => true,
		'all_start_time' => true,
		'all_duration' => true,
		'all_mbytes_in' => true,
		'all_mbytes_out' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outcome_message' => 'outcome_message',
        'total_messages' => 'total_messages',
        'start_messages' => 'start_messages',
        'working_messages' => 'working_messages',
        'worked_messages' => 'worked_messages',
        'test_messages' => 'test_messages',
        'ras_messages' => 'ras_messages',
        'logon_messages' => 'logon_messages',
        'reject_messages' => 'reject_messages',
        'messages_1045' => 'messages_1045',
        'messages_1083' => 'messages_1083',
        'messages_1117' => 'messages_1117',
        'messages_1118' => 'messages_1118',
        'last_logon' => 'last_logon',
        'last_start_time' => 'last_start_time',
        'last_duration' => 'last_duration',
        'last_mbytes_in' => 'last_mbytes_in',
        'last_mbytes_out' => 'last_mbytes_out',
        'all_logon_id' => 'all_logon_id',
        'all_start_time' => 'all_start_time',
        'all_duration' => 'all_duration',
        'all_mbytes_in' => 'all_mbytes_in',
        'all_mbytes_out' => 'all_mbytes_out'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outcome_message' => 'setOutcomeMessage',
        'total_messages' => 'setTotalMessages',
        'start_messages' => 'setStartMessages',
        'working_messages' => 'setWorkingMessages',
        'worked_messages' => 'setWorkedMessages',
        'test_messages' => 'setTestMessages',
        'ras_messages' => 'setRasMessages',
        'logon_messages' => 'setLogonMessages',
        'reject_messages' => 'setRejectMessages',
        'messages_1045' => 'setMessages1045',
        'messages_1083' => 'setMessages1083',
        'messages_1117' => 'setMessages1117',
        'messages_1118' => 'setMessages1118',
        'last_logon' => 'setLastLogon',
        'last_start_time' => 'setLastStartTime',
        'last_duration' => 'setLastDuration',
        'last_mbytes_in' => 'setLastMbytesIn',
        'last_mbytes_out' => 'setLastMbytesOut',
        'all_logon_id' => 'setAllLogonId',
        'all_start_time' => 'setAllStartTime',
        'all_duration' => 'setAllDuration',
        'all_mbytes_in' => 'setAllMbytesIn',
        'all_mbytes_out' => 'setAllMbytesOut'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outcome_message' => 'getOutcomeMessage',
        'total_messages' => 'getTotalMessages',
        'start_messages' => 'getStartMessages',
        'working_messages' => 'getWorkingMessages',
        'worked_messages' => 'getWorkedMessages',
        'test_messages' => 'getTestMessages',
        'ras_messages' => 'getRasMessages',
        'logon_messages' => 'getLogonMessages',
        'reject_messages' => 'getRejectMessages',
        'messages_1045' => 'getMessages1045',
        'messages_1083' => 'getMessages1083',
        'messages_1117' => 'getMessages1117',
        'messages_1118' => 'getMessages1118',
        'last_logon' => 'getLastLogon',
        'last_start_time' => 'getLastStartTime',
        'last_duration' => 'getLastDuration',
        'last_mbytes_in' => 'getLastMbytesIn',
        'last_mbytes_out' => 'getLastMbytesOut',
        'all_logon_id' => 'getAllLogonId',
        'all_start_time' => 'getAllStartTime',
        'all_duration' => 'getAllDuration',
        'all_mbytes_in' => 'getAllMbytesIn',
        'all_mbytes_out' => 'getAllMbytesOut'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outcome_message', $data ?? [], null);
        $this->setIfExists('total_messages', $data ?? [], null);
        $this->setIfExists('start_messages', $data ?? [], null);
        $this->setIfExists('working_messages', $data ?? [], null);
        $this->setIfExists('worked_messages', $data ?? [], null);
        $this->setIfExists('test_messages', $data ?? [], null);
        $this->setIfExists('ras_messages', $data ?? [], null);
        $this->setIfExists('logon_messages', $data ?? [], null);
        $this->setIfExists('reject_messages', $data ?? [], null);
        $this->setIfExists('messages_1045', $data ?? [], null);
        $this->setIfExists('messages_1083', $data ?? [], null);
        $this->setIfExists('messages_1117', $data ?? [], null);
        $this->setIfExists('messages_1118', $data ?? [], null);
        $this->setIfExists('last_logon', $data ?? [], null);
        $this->setIfExists('last_start_time', $data ?? [], null);
        $this->setIfExists('last_duration', $data ?? [], null);
        $this->setIfExists('last_mbytes_in', $data ?? [], null);
        $this->setIfExists('last_mbytes_out', $data ?? [], null);
        $this->setIfExists('all_logon_id', $data ?? [], null);
        $this->setIfExists('all_start_time', $data ?? [], null);
        $this->setIfExists('all_duration', $data ?? [], null);
        $this->setIfExists('all_mbytes_in', $data ?? [], null);
        $this->setIfExists('all_mbytes_out', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outcome_message
     *
     * @return string|null
     */
    public function getOutcomeMessage()
    {
        return $this->container['outcome_message'];
    }

    /**
     * Sets outcome_message
     *
     * @param string|null $outcome_message Test Outcome.
     *
     * @return self
     */
    public function setOutcomeMessage($outcome_message)
    {
        if (is_null($outcome_message)) {
            array_push($this->openAPINullablesSetToNull, 'outcome_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome_message'] = $outcome_message;

        return $this;
    }

    /**
     * Gets total_messages
     *
     * @return string|null
     */
    public function getTotalMessages()
    {
        return $this->container['total_messages'];
    }

    /**
     * Sets total_messages
     *
     * @param string|null $total_messages Total Messages.
     *
     * @return self
     */
    public function setTotalMessages($total_messages)
    {
        if (is_null($total_messages)) {
            array_push($this->openAPINullablesSetToNull, 'total_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_messages'] = $total_messages;

        return $this;
    }

    /**
     * Gets start_messages
     *
     * @return string|null
     */
    public function getStartMessages()
    {
        return $this->container['start_messages'];
    }

    /**
     * Sets start_messages
     *
     * @param string|null $start_messages Start Messages.
     *
     * @return self
     */
    public function setStartMessages($start_messages)
    {
        if (is_null($start_messages)) {
            array_push($this->openAPINullablesSetToNull, 'start_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_messages'] = $start_messages;

        return $this;
    }

    /**
     * Gets working_messages
     *
     * @return string|null
     */
    public function getWorkingMessages()
    {
        return $this->container['working_messages'];
    }

    /**
     * Sets working_messages
     *
     * @param string|null $working_messages Working Messages.
     *
     * @return self
     */
    public function setWorkingMessages($working_messages)
    {
        if (is_null($working_messages)) {
            array_push($this->openAPINullablesSetToNull, 'working_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('working_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['working_messages'] = $working_messages;

        return $this;
    }

    /**
     * Gets worked_messages
     *
     * @return string|null
     */
    public function getWorkedMessages()
    {
        return $this->container['worked_messages'];
    }

    /**
     * Sets worked_messages
     *
     * @param string|null $worked_messages Worked Messages.
     *
     * @return self
     */
    public function setWorkedMessages($worked_messages)
    {
        if (is_null($worked_messages)) {
            array_push($this->openAPINullablesSetToNull, 'worked_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('worked_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['worked_messages'] = $worked_messages;

        return $this;
    }

    /**
     * Gets test_messages
     *
     * @return string|null
     */
    public function getTestMessages()
    {
        return $this->container['test_messages'];
    }

    /**
     * Sets test_messages
     *
     * @param string|null $test_messages Test Messages.
     *
     * @return self
     */
    public function setTestMessages($test_messages)
    {
        if (is_null($test_messages)) {
            array_push($this->openAPINullablesSetToNull, 'test_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('test_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['test_messages'] = $test_messages;

        return $this;
    }

    /**
     * Gets ras_messages
     *
     * @return string|null
     */
    public function getRasMessages()
    {
        return $this->container['ras_messages'];
    }

    /**
     * Sets ras_messages
     *
     * @param string|null $ras_messages RAS Messages.
     *
     * @return self
     */
    public function setRasMessages($ras_messages)
    {
        if (is_null($ras_messages)) {
            array_push($this->openAPINullablesSetToNull, 'ras_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ras_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ras_messages'] = $ras_messages;

        return $this;
    }

    /**
     * Gets logon_messages
     *
     * @return string|null
     */
    public function getLogonMessages()
    {
        return $this->container['logon_messages'];
    }

    /**
     * Sets logon_messages
     *
     * @param string|null $logon_messages Logon Messages.
     *
     * @return self
     */
    public function setLogonMessages($logon_messages)
    {
        if (is_null($logon_messages)) {
            array_push($this->openAPINullablesSetToNull, 'logon_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logon_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logon_messages'] = $logon_messages;

        return $this;
    }

    /**
     * Gets reject_messages
     *
     * @return string|null
     */
    public function getRejectMessages()
    {
        return $this->container['reject_messages'];
    }

    /**
     * Sets reject_messages
     *
     * @param string|null $reject_messages Reject Messages.
     *
     * @return self
     */
    public function setRejectMessages($reject_messages)
    {
        if (is_null($reject_messages)) {
            array_push($this->openAPINullablesSetToNull, 'reject_messages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reject_messages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reject_messages'] = $reject_messages;

        return $this;
    }

    /**
     * Gets messages_1045
     *
     * @return string|null
     */
    public function getMessages1045()
    {
        return $this->container['messages_1045'];
    }

    /**
     * Sets messages_1045
     *
     * @param string|null $messages_1045 1045 Messages.
     *
     * @return self
     */
    public function setMessages1045($messages_1045)
    {
        if (is_null($messages_1045)) {
            array_push($this->openAPINullablesSetToNull, 'messages_1045');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messages_1045', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messages_1045'] = $messages_1045;

        return $this;
    }

    /**
     * Gets messages_1083
     *
     * @return string|null
     */
    public function getMessages1083()
    {
        return $this->container['messages_1083'];
    }

    /**
     * Sets messages_1083
     *
     * @param string|null $messages_1083 1083 Messages.
     *
     * @return self
     */
    public function setMessages1083($messages_1083)
    {
        if (is_null($messages_1083)) {
            array_push($this->openAPINullablesSetToNull, 'messages_1083');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messages_1083', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messages_1083'] = $messages_1083;

        return $this;
    }

    /**
     * Gets messages_1117
     *
     * @return string|null
     */
    public function getMessages1117()
    {
        return $this->container['messages_1117'];
    }

    /**
     * Sets messages_1117
     *
     * @param string|null $messages_1117 1117 Messages.
     *
     * @return self
     */
    public function setMessages1117($messages_1117)
    {
        if (is_null($messages_1117)) {
            array_push($this->openAPINullablesSetToNull, 'messages_1117');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messages_1117', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messages_1117'] = $messages_1117;

        return $this;
    }

    /**
     * Gets messages_1118
     *
     * @return string|null
     */
    public function getMessages1118()
    {
        return $this->container['messages_1118'];
    }

    /**
     * Sets messages_1118
     *
     * @param string|null $messages_1118 1118 Messages.
     *
     * @return self
     */
    public function setMessages1118($messages_1118)
    {
        if (is_null($messages_1118)) {
            array_push($this->openAPINullablesSetToNull, 'messages_1118');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('messages_1118', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['messages_1118'] = $messages_1118;

        return $this;
    }

    /**
     * Gets last_logon
     *
     * @return string|null
     */
    public function getLastLogon()
    {
        return $this->container['last_logon'];
    }

    /**
     * Sets last_logon
     *
     * @param string|null $last_logon Last Logon.
     *
     * @return self
     */
    public function setLastLogon($last_logon)
    {
        if (is_null($last_logon)) {
            array_push($this->openAPINullablesSetToNull, 'last_logon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_logon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_logon'] = $last_logon;

        return $this;
    }

    /**
     * Gets last_start_time
     *
     * @return string|null
     */
    public function getLastStartTime()
    {
        return $this->container['last_start_time'];
    }

    /**
     * Sets last_start_time
     *
     * @param string|null $last_start_time Last Start Time.
     *
     * @return self
     */
    public function setLastStartTime($last_start_time)
    {
        if (is_null($last_start_time)) {
            array_push($this->openAPINullablesSetToNull, 'last_start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_start_time'] = $last_start_time;

        return $this;
    }

    /**
     * Gets last_duration
     *
     * @return string|null
     */
    public function getLastDuration()
    {
        return $this->container['last_duration'];
    }

    /**
     * Sets last_duration
     *
     * @param string|null $last_duration Last Duration.
     *
     * @return self
     */
    public function setLastDuration($last_duration)
    {
        if (is_null($last_duration)) {
            array_push($this->openAPINullablesSetToNull, 'last_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_duration'] = $last_duration;

        return $this;
    }

    /**
     * Gets last_mbytes_in
     *
     * @return string|null
     */
    public function getLastMbytesIn()
    {
        return $this->container['last_mbytes_in'];
    }

    /**
     * Sets last_mbytes_in
     *
     * @param string|null $last_mbytes_in Last MBytes In.
     *
     * @return self
     */
    public function setLastMbytesIn($last_mbytes_in)
    {
        if (is_null($last_mbytes_in)) {
            array_push($this->openAPINullablesSetToNull, 'last_mbytes_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_mbytes_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_mbytes_in'] = $last_mbytes_in;

        return $this;
    }

    /**
     * Gets last_mbytes_out
     *
     * @return string|null
     */
    public function getLastMbytesOut()
    {
        return $this->container['last_mbytes_out'];
    }

    /**
     * Sets last_mbytes_out
     *
     * @param string|null $last_mbytes_out Last MBytes Out.
     *
     * @return self
     */
    public function setLastMbytesOut($last_mbytes_out)
    {
        if (is_null($last_mbytes_out)) {
            array_push($this->openAPINullablesSetToNull, 'last_mbytes_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_mbytes_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_mbytes_out'] = $last_mbytes_out;

        return $this;
    }

    /**
     * Gets all_logon_id
     *
     * @return string|null
     */
    public function getAllLogonId()
    {
        return $this->container['all_logon_id'];
    }

    /**
     * Sets all_logon_id
     *
     * @param string|null $all_logon_id All Logon ID.
     *
     * @return self
     */
    public function setAllLogonId($all_logon_id)
    {
        if (is_null($all_logon_id)) {
            array_push($this->openAPINullablesSetToNull, 'all_logon_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_logon_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_logon_id'] = $all_logon_id;

        return $this;
    }

    /**
     * Gets all_start_time
     *
     * @return string|null
     */
    public function getAllStartTime()
    {
        return $this->container['all_start_time'];
    }

    /**
     * Sets all_start_time
     *
     * @param string|null $all_start_time All Start Time.
     *
     * @return self
     */
    public function setAllStartTime($all_start_time)
    {
        if (is_null($all_start_time)) {
            array_push($this->openAPINullablesSetToNull, 'all_start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_start_time'] = $all_start_time;

        return $this;
    }

    /**
     * Gets all_duration
     *
     * @return string|null
     */
    public function getAllDuration()
    {
        return $this->container['all_duration'];
    }

    /**
     * Sets all_duration
     *
     * @param string|null $all_duration All Duration.
     *
     * @return self
     */
    public function setAllDuration($all_duration)
    {
        if (is_null($all_duration)) {
            array_push($this->openAPINullablesSetToNull, 'all_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_duration'] = $all_duration;

        return $this;
    }

    /**
     * Gets all_mbytes_in
     *
     * @return string|null
     */
    public function getAllMbytesIn()
    {
        return $this->container['all_mbytes_in'];
    }

    /**
     * Sets all_mbytes_in
     *
     * @param string|null $all_mbytes_in All MBytes In.
     *
     * @return self
     */
    public function setAllMbytesIn($all_mbytes_in)
    {
        if (is_null($all_mbytes_in)) {
            array_push($this->openAPINullablesSetToNull, 'all_mbytes_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_mbytes_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_mbytes_in'] = $all_mbytes_in;

        return $this;
    }

    /**
     * Gets all_mbytes_out
     *
     * @return string|null
     */
    public function getAllMbytesOut()
    {
        return $this->container['all_mbytes_out'];
    }

    /**
     * Sets all_mbytes_out
     *
     * @param string|null $all_mbytes_out All MBytes Out.
     *
     * @return self
     */
    public function setAllMbytesOut($all_mbytes_out)
    {
        if (is_null($all_mbytes_out)) {
            array_push($this->openAPINullablesSetToNull, 'all_mbytes_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_mbytes_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_mbytes_out'] = $all_mbytes_out;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


