<?php
/**
 * BroadbandKBDRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDRequest Class Doc Comment
 *
 * @category Class
 * @description Represents a KBD request
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'kbd_type' => 'string',
        'kbd_problem_type' => 'string',
        'kbd_problem_frequency' => 'string',
        'kbd_bet_equipment' => 'string',
        'kbd_damaged_equipment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'kbd_type' => null,
        'kbd_problem_type' => null,
        'kbd_problem_frequency' => null,
        'kbd_bet_equipment' => null,
        'kbd_damaged_equipment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'username' => false,
		'kbd_type' => false,
		'kbd_problem_type' => false,
		'kbd_problem_frequency' => false,
		'kbd_bet_equipment' => false,
		'kbd_damaged_equipment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'kbd_type' => 'kbd_type',
        'kbd_problem_type' => 'kbd_problem_type',
        'kbd_problem_frequency' => 'kbd_problem_frequency',
        'kbd_bet_equipment' => 'kbd_bet_equipment',
        'kbd_damaged_equipment' => 'kbd_damaged_equipment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'kbd_type' => 'setKbdType',
        'kbd_problem_type' => 'setKbdProblemType',
        'kbd_problem_frequency' => 'setKbdProblemFrequency',
        'kbd_bet_equipment' => 'setKbdBetEquipment',
        'kbd_damaged_equipment' => 'setKbdDamagedEquipment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'kbd_type' => 'getKbdType',
        'kbd_problem_type' => 'getKbdProblemType',
        'kbd_problem_frequency' => 'getKbdProblemFrequency',
        'kbd_bet_equipment' => 'getKbdBetEquipment',
        'kbd_damaged_equipment' => 'getKbdDamagedEquipment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const KBD_TYPE_NONE = 'NONE';
    public const KBD_TYPE_INTRUSIVE = 'INTRUSIVE';
    public const KBD_TYPE_NON_INTRUSIVE = 'NON_INTRUSIVE';
    public const KBD_PROBLEM_TYPE_NONE = 'NONE';
    public const KBD_PROBLEM_TYPE_CONNECTION = 'CONNECTION';
    public const KBD_PROBLEM_TYPE_IPV6 = 'IPV6';
    public const KBD_PROBLEM_TYPE_PERFORMANCE = 'PERFORMANCE';
    public const KBD_PROBLEM_TYPE_DAMAGED_EQUIPMENT = 'DAMAGED_EQUIPMENT';
    public const KBD_PROBLEM_FREQUENCY_NONE = 'NONE';
    public const KBD_PROBLEM_FREQUENCY_PERMANENT = 'PERMANENT';
    public const KBD_PROBLEM_FREQUENCY_INTERMITTENT = 'INTERMITTENT';
    public const KBD_BET_EQUIPMENT_NONE = 'NONE';
    public const KBD_BET_EQUIPMENT_YES = 'YES';
    public const KBD_BET_EQUIPMENT_NO = 'NO';
    public const KBD_BET_EQUIPMENT_DONT_KNOW = 'DONT_KNOW';
    public const KBD_DAMAGED_EQUIPMENT_NONE = 'NONE';
    public const KBD_DAMAGED_EQUIPMENT_ROUTER = 'ROUTER';
    public const KBD_DAMAGED_EQUIPMENT_NTE = 'NTE';
    public const KBD_DAMAGED_EQUIPMENT_ONT = 'ONT';
    public const KBD_DAMAGED_EQUIPMENT_WIRING = 'WIRING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKbdTypeAllowableValues()
    {
        return [
            self::KBD_TYPE_NONE,
            self::KBD_TYPE_INTRUSIVE,
            self::KBD_TYPE_NON_INTRUSIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKbdProblemTypeAllowableValues()
    {
        return [
            self::KBD_PROBLEM_TYPE_NONE,
            self::KBD_PROBLEM_TYPE_CONNECTION,
            self::KBD_PROBLEM_TYPE_IPV6,
            self::KBD_PROBLEM_TYPE_PERFORMANCE,
            self::KBD_PROBLEM_TYPE_DAMAGED_EQUIPMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKbdProblemFrequencyAllowableValues()
    {
        return [
            self::KBD_PROBLEM_FREQUENCY_NONE,
            self::KBD_PROBLEM_FREQUENCY_PERMANENT,
            self::KBD_PROBLEM_FREQUENCY_INTERMITTENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKbdBetEquipmentAllowableValues()
    {
        return [
            self::KBD_BET_EQUIPMENT_NONE,
            self::KBD_BET_EQUIPMENT_YES,
            self::KBD_BET_EQUIPMENT_NO,
            self::KBD_BET_EQUIPMENT_DONT_KNOW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKbdDamagedEquipmentAllowableValues()
    {
        return [
            self::KBD_DAMAGED_EQUIPMENT_NONE,
            self::KBD_DAMAGED_EQUIPMENT_ROUTER,
            self::KBD_DAMAGED_EQUIPMENT_NTE,
            self::KBD_DAMAGED_EQUIPMENT_ONT,
            self::KBD_DAMAGED_EQUIPMENT_WIRING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('kbd_type', $data ?? [], null);
        $this->setIfExists('kbd_problem_type', $data ?? [], null);
        $this->setIfExists('kbd_problem_frequency', $data ?? [], null);
        $this->setIfExists('kbd_bet_equipment', $data ?? [], null);
        $this->setIfExists('kbd_damaged_equipment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['kbd_type'] === null) {
            $invalidProperties[] = "'kbd_type' can't be null";
        }
        $allowedValues = $this->getKbdTypeAllowableValues();
        if (!is_null($this->container['kbd_type']) && !in_array($this->container['kbd_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kbd_type', must be one of '%s'",
                $this->container['kbd_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['kbd_problem_type'] === null) {
            $invalidProperties[] = "'kbd_problem_type' can't be null";
        }
        $allowedValues = $this->getKbdProblemTypeAllowableValues();
        if (!is_null($this->container['kbd_problem_type']) && !in_array($this->container['kbd_problem_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kbd_problem_type', must be one of '%s'",
                $this->container['kbd_problem_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['kbd_problem_frequency'] === null) {
            $invalidProperties[] = "'kbd_problem_frequency' can't be null";
        }
        $allowedValues = $this->getKbdProblemFrequencyAllowableValues();
        if (!is_null($this->container['kbd_problem_frequency']) && !in_array($this->container['kbd_problem_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kbd_problem_frequency', must be one of '%s'",
                $this->container['kbd_problem_frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKbdBetEquipmentAllowableValues();
        if (!is_null($this->container['kbd_bet_equipment']) && !in_array($this->container['kbd_bet_equipment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kbd_bet_equipment', must be one of '%s'",
                $this->container['kbd_bet_equipment'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKbdDamagedEquipmentAllowableValues();
        if (!is_null($this->container['kbd_damaged_equipment']) && !in_array($this->container['kbd_damaged_equipment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'kbd_damaged_equipment', must be one of '%s'",
                $this->container['kbd_damaged_equipment'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The full username (user@realm)
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }

        if ((mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling BroadbandKBDRequest., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets kbd_type
     *
     * @return string
     */
    public function getKbdType()
    {
        return $this->container['kbd_type'];
    }

    /**
     * Sets kbd_type
     *
     * @param string $kbd_type The KBD type
     *
     * @return self
     */
    public function setKbdType($kbd_type)
    {
        if (is_null($kbd_type)) {
            throw new \InvalidArgumentException('non-nullable kbd_type cannot be null');
        }
        $allowedValues = $this->getKbdTypeAllowableValues();
        if (!in_array($kbd_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kbd_type', must be one of '%s'",
                    $kbd_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kbd_type'] = $kbd_type;

        return $this;
    }

    /**
     * Gets kbd_problem_type
     *
     * @return string
     */
    public function getKbdProblemType()
    {
        return $this->container['kbd_problem_type'];
    }

    /**
     * Sets kbd_problem_type
     *
     * @param string $kbd_problem_type The KBD problem type
     *
     * @return self
     */
    public function setKbdProblemType($kbd_problem_type)
    {
        if (is_null($kbd_problem_type)) {
            throw new \InvalidArgumentException('non-nullable kbd_problem_type cannot be null');
        }
        $allowedValues = $this->getKbdProblemTypeAllowableValues();
        if (!in_array($kbd_problem_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kbd_problem_type', must be one of '%s'",
                    $kbd_problem_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kbd_problem_type'] = $kbd_problem_type;

        return $this;
    }

    /**
     * Gets kbd_problem_frequency
     *
     * @return string
     */
    public function getKbdProblemFrequency()
    {
        return $this->container['kbd_problem_frequency'];
    }

    /**
     * Sets kbd_problem_frequency
     *
     * @param string $kbd_problem_frequency The KBD problem frequency
     *
     * @return self
     */
    public function setKbdProblemFrequency($kbd_problem_frequency)
    {
        if (is_null($kbd_problem_frequency)) {
            throw new \InvalidArgumentException('non-nullable kbd_problem_frequency cannot be null');
        }
        $allowedValues = $this->getKbdProblemFrequencyAllowableValues();
        if (!in_array($kbd_problem_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kbd_problem_frequency', must be one of '%s'",
                    $kbd_problem_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kbd_problem_frequency'] = $kbd_problem_frequency;

        return $this;
    }

    /**
     * Gets kbd_bet_equipment
     *
     * @return string|null
     */
    public function getKbdBetEquipment()
    {
        return $this->container['kbd_bet_equipment'];
    }

    /**
     * Sets kbd_bet_equipment
     *
     * @param string|null $kbd_bet_equipment The type of BET equipment<p>Possible values:</p>  <ul>  <li><b>0</b> - None</li>  <li><b>1</b> - Yes</li>  <li><b>2</b> - No</li>  <li><b>3</b> - Don't Know</li>  </ul>
     *
     * @return self
     */
    public function setKbdBetEquipment($kbd_bet_equipment)
    {
        if (is_null($kbd_bet_equipment)) {
            throw new \InvalidArgumentException('non-nullable kbd_bet_equipment cannot be null');
        }
        $allowedValues = $this->getKbdBetEquipmentAllowableValues();
        if (!in_array($kbd_bet_equipment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kbd_bet_equipment', must be one of '%s'",
                    $kbd_bet_equipment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kbd_bet_equipment'] = $kbd_bet_equipment;

        return $this;
    }

    /**
     * Gets kbd_damaged_equipment
     *
     * @return string|null
     */
    public function getKbdDamagedEquipment()
    {
        return $this->container['kbd_damaged_equipment'];
    }

    /**
     * Sets kbd_damaged_equipment
     *
     * @param string|null $kbd_damaged_equipment Represents a type of Damaged Equipment. Only available for FTTC Damaged Equipment KBD type<p>Possible values:</p>  <ul>  <li><b>0</b> - None</li>  <li><b>1</b> - Customer Modem/Router</li>  <li><b>2</b> - NTE</li>  <li><b>3</b> - ONT/Openreach Modem</li>  <li><b>4</b> - Wiring</li>  </ul>
     *
     * @return self
     */
    public function setKbdDamagedEquipment($kbd_damaged_equipment)
    {
        if (is_null($kbd_damaged_equipment)) {
            throw new \InvalidArgumentException('non-nullable kbd_damaged_equipment cannot be null');
        }
        $allowedValues = $this->getKbdDamagedEquipmentAllowableValues();
        if (!in_array($kbd_damaged_equipment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'kbd_damaged_equipment', must be one of '%s'",
                    $kbd_damaged_equipment,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kbd_damaged_equipment'] = $kbd_damaged_equipment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


