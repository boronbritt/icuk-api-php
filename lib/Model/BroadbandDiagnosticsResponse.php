<?php
/**
 * BroadbandDiagnosticsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandDiagnosticsResponse Class Doc Comment
 *
 * @category Class
 * @description Represents a broadband diagnostics response
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandDiagnosticsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandDiagnosticsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'tam_test_id' => 'string',
        'sync_status' => 'string',
        'time_in_sync' => 'string',
        'line_data' => '\OpenAPI\Client\Model\BroadbandDiagnosticsLineData',
        'snr_profile' => 'int',
        'interleaving' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'tam_test_id' => null,
        'sync_status' => null,
        'time_in_sync' => null,
        'line_data' => null,
        'snr_profile' => 'int32',
        'interleaving' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'success' => false,
		'tam_test_id' => true,
		'sync_status' => true,
		'time_in_sync' => true,
		'line_data' => false,
		'snr_profile' => false,
		'interleaving' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'tam_test_id' => 'tam_test_id',
        'sync_status' => 'sync_status',
        'time_in_sync' => 'time_in_sync',
        'line_data' => 'line_data',
        'snr_profile' => 'snr_profile',
        'interleaving' => 'interleaving'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'tam_test_id' => 'setTamTestId',
        'sync_status' => 'setSyncStatus',
        'time_in_sync' => 'setTimeInSync',
        'line_data' => 'setLineData',
        'snr_profile' => 'setSnrProfile',
        'interleaving' => 'setInterleaving'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'tam_test_id' => 'getTamTestId',
        'sync_status' => 'getSyncStatus',
        'time_in_sync' => 'getTimeInSync',
        'line_data' => 'getLineData',
        'snr_profile' => 'getSnrProfile',
        'interleaving' => 'getInterleaving'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('success', $data ?? [], null);
        $this->setIfExists('tam_test_id', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
        $this->setIfExists('time_in_sync', $data ?? [], null);
        $this->setIfExists('line_data', $data ?? [], null);
        $this->setIfExists('snr_profile', $data ?? [], null);
        $this->setIfExists('interleaving', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success Whether the diagnostics request is successful
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets tam_test_id
     *
     * @return string|null
     */
    public function getTamTestId()
    {
        return $this->container['tam_test_id'];
    }

    /**
     * Sets tam_test_id
     *
     * @param string|null $tam_test_id The TAM test ID
     *
     * @return self
     */
    public function setTamTestId($tam_test_id)
    {
        if (is_null($tam_test_id)) {
            array_push($this->openAPINullablesSetToNull, 'tam_test_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tam_test_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tam_test_id'] = $tam_test_id;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status Represents sync status. Not available for fibre lines
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        if (is_null($sync_status)) {
            array_push($this->openAPINullablesSetToNull, 'sync_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets time_in_sync
     *
     * @return string|null
     */
    public function getTimeInSync()
    {
        return $this->container['time_in_sync'];
    }

    /**
     * Sets time_in_sync
     *
     * @param string|null $time_in_sync Represents time in sync. Not available for fibre lines
     *
     * @return self
     */
    public function setTimeInSync($time_in_sync)
    {
        if (is_null($time_in_sync)) {
            array_push($this->openAPINullablesSetToNull, 'time_in_sync');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_in_sync', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_in_sync'] = $time_in_sync;

        return $this;
    }

    /**
     * Gets line_data
     *
     * @return \OpenAPI\Client\Model\BroadbandDiagnosticsLineData|null
     */
    public function getLineData()
    {
        return $this->container['line_data'];
    }

    /**
     * Sets line_data
     *
     * @param \OpenAPI\Client\Model\BroadbandDiagnosticsLineData|null $line_data line_data
     *
     * @return self
     */
    public function setLineData($line_data)
    {
        if (is_null($line_data)) {
            throw new \InvalidArgumentException('non-nullable line_data cannot be null');
        }
        $this->container['line_data'] = $line_data;

        return $this;
    }

    /**
     * Gets snr_profile
     *
     * @return int|null
     */
    public function getSnrProfile()
    {
        return $this->container['snr_profile'];
    }

    /**
     * Sets snr_profile
     *
     * @param int|null $snr_profile Current SNR profile margin set in dB. Not available for fibre lines
     *
     * @return self
     */
    public function setSnrProfile($snr_profile)
    {
        if (is_null($snr_profile)) {
            throw new \InvalidArgumentException('non-nullable snr_profile cannot be null');
        }
        $this->container['snr_profile'] = $snr_profile;

        return $this;
    }

    /**
     * Gets interleaving
     *
     * @return bool|null
     */
    public function getInterleaving()
    {
        return $this->container['interleaving'];
    }

    /**
     * Sets interleaving
     *
     * @param bool|null $interleaving Whether interleaving is enabled. Not available for fibre lines
     *
     * @return self
     */
    public function setInterleaving($interleaving)
    {
        if (is_null($interleaving)) {
            throw new \InvalidArgumentException('non-nullable interleaving cannot be null');
        }
        $this->container['interleaving'] = $interleaving;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


