<?php
/**
 * BroadbandDiagnosticsTamResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandDiagnosticsTamResponse Class Doc Comment
 *
 * @category Class
 * @description Represents a broadband diagnostics TAM response
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandDiagnosticsTamResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandDiagnosticsTamResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'requested_date' => '\DateTime',
        'completed_date' => '\DateTime',
        'outcome' => 'string',
        'diagnosis_code' => 'string',
        'fault_location' => 'string',
        'fault_description' => 'string',
        'fibre_info' => '\OpenAPI\Client\Model\BroadbandDiagnosticsTamFibreResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'requested_date' => 'date-time',
        'completed_date' => 'date-time',
        'outcome' => null,
        'diagnosis_code' => null,
        'fault_location' => null,
        'fault_description' => null,
        'fibre_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'success' => false,
		'requested_date' => false,
		'completed_date' => false,
		'outcome' => true,
		'diagnosis_code' => true,
		'fault_location' => true,
		'fault_description' => true,
		'fibre_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'requested_date' => 'requested_date',
        'completed_date' => 'completed_date',
        'outcome' => 'outcome',
        'diagnosis_code' => 'diagnosis_code',
        'fault_location' => 'fault_location',
        'fault_description' => 'fault_description',
        'fibre_info' => 'fibre_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'requested_date' => 'setRequestedDate',
        'completed_date' => 'setCompletedDate',
        'outcome' => 'setOutcome',
        'diagnosis_code' => 'setDiagnosisCode',
        'fault_location' => 'setFaultLocation',
        'fault_description' => 'setFaultDescription',
        'fibre_info' => 'setFibreInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'requested_date' => 'getRequestedDate',
        'completed_date' => 'getCompletedDate',
        'outcome' => 'getOutcome',
        'diagnosis_code' => 'getDiagnosisCode',
        'fault_location' => 'getFaultLocation',
        'fault_description' => 'getFaultDescription',
        'fibre_info' => 'getFibreInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('success', $data ?? [], null);
        $this->setIfExists('requested_date', $data ?? [], null);
        $this->setIfExists('completed_date', $data ?? [], null);
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('diagnosis_code', $data ?? [], null);
        $this->setIfExists('fault_location', $data ?? [], null);
        $this->setIfExists('fault_description', $data ?? [], null);
        $this->setIfExists('fibre_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success Whether the diagnostics request is successful
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets requested_date
     *
     * @return \DateTime|null
     */
    public function getRequestedDate()
    {
        return $this->container['requested_date'];
    }

    /**
     * Sets requested_date
     *
     * @param \DateTime|null $requested_date Test requested date
     *
     * @return self
     */
    public function setRequestedDate($requested_date)
    {
        if (is_null($requested_date)) {
            throw new \InvalidArgumentException('non-nullable requested_date cannot be null');
        }
        $this->container['requested_date'] = $requested_date;

        return $this;
    }

    /**
     * Gets completed_date
     *
     * @return \DateTime|null
     */
    public function getCompletedDate()
    {
        return $this->container['completed_date'];
    }

    /**
     * Sets completed_date
     *
     * @param \DateTime|null $completed_date Test completed date
     *
     * @return self
     */
    public function setCompletedDate($completed_date)
    {
        if (is_null($completed_date)) {
            throw new \InvalidArgumentException('non-nullable completed_date cannot be null');
        }
        $this->container['completed_date'] = $completed_date;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome Test outcome
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        if (is_null($outcome)) {
            array_push($this->openAPINullablesSetToNull, 'outcome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets diagnosis_code
     *
     * @return string|null
     */
    public function getDiagnosisCode()
    {
        return $this->container['diagnosis_code'];
    }

    /**
     * Sets diagnosis_code
     *
     * @param string|null $diagnosis_code Test diagnosis code
     *
     * @return self
     */
    public function setDiagnosisCode($diagnosis_code)
    {
        if (is_null($diagnosis_code)) {
            array_push($this->openAPINullablesSetToNull, 'diagnosis_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('diagnosis_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['diagnosis_code'] = $diagnosis_code;

        return $this;
    }

    /**
     * Gets fault_location
     *
     * @return string|null
     */
    public function getFaultLocation()
    {
        return $this->container['fault_location'];
    }

    /**
     * Sets fault_location
     *
     * @param string|null $fault_location Fault location. Not available for fibre lines
     *
     * @return self
     */
    public function setFaultLocation($fault_location)
    {
        if (is_null($fault_location)) {
            array_push($this->openAPINullablesSetToNull, 'fault_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_location'] = $fault_location;

        return $this;
    }

    /**
     * Gets fault_description
     *
     * @return string|null
     */
    public function getFaultDescription()
    {
        return $this->container['fault_description'];
    }

    /**
     * Sets fault_description
     *
     * @param string|null $fault_description Fault description. Not available for fibre lines
     *
     * @return self
     */
    public function setFaultDescription($fault_description)
    {
        if (is_null($fault_description)) {
            array_push($this->openAPINullablesSetToNull, 'fault_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fault_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fault_description'] = $fault_description;

        return $this;
    }

    /**
     * Gets fibre_info
     *
     * @return \OpenAPI\Client\Model\BroadbandDiagnosticsTamFibreResponse|null
     */
    public function getFibreInfo()
    {
        return $this->container['fibre_info'];
    }

    /**
     * Sets fibre_info
     *
     * @param \OpenAPI\Client\Model\BroadbandDiagnosticsTamFibreResponse|null $fibre_info fibre_info
     *
     * @return self
     */
    public function setFibreInfo($fibre_info)
    {
        if (is_null($fibre_info)) {
            throw new \InvalidArgumentException('non-nullable fibre_info cannot be null');
        }
        $this->container['fibre_info'] = $fibre_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


