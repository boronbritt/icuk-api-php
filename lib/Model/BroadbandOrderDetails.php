<?php
/**
 * BroadbandOrderDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandOrderDetails Class Doc Comment
 *
 * @category Class
 * @description Represents broadband order details
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandOrderDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandOrderDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'username' => 'string',
        'password' => 'string',
        'simultaneous_provide' => 'bool',
        'product_id' => 'int',
        'activation_date' => '\DateTime',
        'care_level' => 'string',
        'send_completion_email' => 'bool',
        'cli' => 'string',
        'sim_code' => 'string',
        'address_reference' => 'string',
        'fast_track' => 'bool',
        'ip' => '\OpenAPI\Client\Model\BroadbandOrderIp',
        'ripe' => '\OpenAPI\Client\Model\BroadbandOrderRIPE',
        'installation_options' => '\OpenAPI\Client\Model\BroadbandOrderInstallationOptions',
        'friendly_name' => 'string',
        'customer_id' => 'int',
        'tariff_id' => 'int',
        'number_transfer' => 'string',
        'cupid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'username' => null,
        'password' => null,
        'simultaneous_provide' => null,
        'product_id' => 'int32',
        'activation_date' => 'date-time',
        'care_level' => null,
        'send_completion_email' => null,
        'cli' => null,
        'sim_code' => null,
        'address_reference' => null,
        'fast_track' => null,
        'ip' => null,
        'ripe' => null,
        'installation_options' => null,
        'friendly_name' => null,
        'customer_id' => 'int32',
        'tariff_id' => 'int32',
        'number_transfer' => null,
        'cupid' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'username' => false,
		'password' => false,
		'simultaneous_provide' => false,
		'product_id' => false,
		'activation_date' => false,
		'care_level' => false,
		'send_completion_email' => false,
		'cli' => true,
		'sim_code' => true,
		'address_reference' => true,
		'fast_track' => false,
		'ip' => false,
		'ripe' => false,
		'installation_options' => false,
		'friendly_name' => true,
		'customer_id' => false,
		'tariff_id' => false,
		'number_transfer' => false,
		'cupid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
        'password' => 'password',
        'simultaneous_provide' => 'simultaneous_provide',
        'product_id' => 'product_id',
        'activation_date' => 'activation_date',
        'care_level' => 'care_level',
        'send_completion_email' => 'send_completion_email',
        'cli' => 'cli',
        'sim_code' => 'sim_code',
        'address_reference' => 'address_reference',
        'fast_track' => 'fast_track',
        'ip' => 'ip',
        'ripe' => 'ripe',
        'installation_options' => 'installation_options',
        'friendly_name' => 'friendly_name',
        'customer_id' => 'customer_id',
        'tariff_id' => 'tariff_id',
        'number_transfer' => 'number_transfer',
        'cupid' => 'cupid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
        'password' => 'setPassword',
        'simultaneous_provide' => 'setSimultaneousProvide',
        'product_id' => 'setProductId',
        'activation_date' => 'setActivationDate',
        'care_level' => 'setCareLevel',
        'send_completion_email' => 'setSendCompletionEmail',
        'cli' => 'setCli',
        'sim_code' => 'setSimCode',
        'address_reference' => 'setAddressReference',
        'fast_track' => 'setFastTrack',
        'ip' => 'setIp',
        'ripe' => 'setRipe',
        'installation_options' => 'setInstallationOptions',
        'friendly_name' => 'setFriendlyName',
        'customer_id' => 'setCustomerId',
        'tariff_id' => 'setTariffId',
        'number_transfer' => 'setNumberTransfer',
        'cupid' => 'setCupid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
        'password' => 'getPassword',
        'simultaneous_provide' => 'getSimultaneousProvide',
        'product_id' => 'getProductId',
        'activation_date' => 'getActivationDate',
        'care_level' => 'getCareLevel',
        'send_completion_email' => 'getSendCompletionEmail',
        'cli' => 'getCli',
        'sim_code' => 'getSimCode',
        'address_reference' => 'getAddressReference',
        'fast_track' => 'getFastTrack',
        'ip' => 'getIp',
        'ripe' => 'getRipe',
        'installation_options' => 'getInstallationOptions',
        'friendly_name' => 'getFriendlyName',
        'customer_id' => 'getCustomerId',
        'tariff_id' => 'getTariffId',
        'number_transfer' => 'getNumberTransfer',
        'cupid' => 'getCupid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CARE_LEVEL_STANDARD = 'STANDARD';
    public const CARE_LEVEL_ENHANCED = 'ENHANCED';
    public const NUMBER_TRANSFER_NONE = 'NONE';
    public const NUMBER_TRANSFER_CEASE = 'CEASE';
    public const NUMBER_TRANSFER_PORT_TO_ICUK = 'PORT_TO_ICUK';
    public const NUMBER_TRANSFER_PORT_TO_3_RDPARTY = 'PORT_TO_3RDPARTY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCareLevelAllowableValues()
    {
        return [
            self::CARE_LEVEL_STANDARD,
            self::CARE_LEVEL_ENHANCED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNumberTransferAllowableValues()
    {
        return [
            self::NUMBER_TRANSFER_NONE,
            self::NUMBER_TRANSFER_CEASE,
            self::NUMBER_TRANSFER_PORT_TO_ICUK,
            self::NUMBER_TRANSFER_PORT_TO_3_RDPARTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('simultaneous_provide', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('activation_date', $data ?? [], null);
        $this->setIfExists('care_level', $data ?? [], null);
        $this->setIfExists('send_completion_email', $data ?? [], null);
        $this->setIfExists('cli', $data ?? [], null);
        $this->setIfExists('sim_code', $data ?? [], null);
        $this->setIfExists('address_reference', $data ?? [], null);
        $this->setIfExists('fast_track', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('ripe', $data ?? [], null);
        $this->setIfExists('installation_options', $data ?? [], null);
        $this->setIfExists('friendly_name', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('tariff_id', $data ?? [], null);
        $this->setIfExists('number_transfer', $data ?? [], null);
        $this->setIfExists('cupid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ((mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((mb_strlen($this->container['password']) < 1)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['simultaneous_provide'] === null) {
            $invalidProperties[] = "'simultaneous_provide' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['activation_date'] === null) {
            $invalidProperties[] = "'activation_date' can't be null";
        }
        if ($this->container['care_level'] === null) {
            $invalidProperties[] = "'care_level' can't be null";
        }
        $allowedValues = $this->getCareLevelAllowableValues();
        if (!is_null($this->container['care_level']) && !in_array($this->container['care_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'care_level', must be one of '%s'",
                $this->container['care_level'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['send_completion_email'] === null) {
            $invalidProperties[] = "'send_completion_email' can't be null";
        }
        $allowedValues = $this->getNumberTransferAllowableValues();
        if (!is_null($this->container['number_transfer']) && !in_array($this->container['number_transfer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'number_transfer', must be one of '%s'",
                $this->container['number_transfer'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username Name of the user
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }

        if ((mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling BroadbandOrderDetails., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password of the user
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }

        if ((mb_strlen($password) < 1)) {
            throw new \InvalidArgumentException('invalid length for $password when calling BroadbandOrderDetails., must be bigger than or equal to 1.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets simultaneous_provide
     *
     * @return bool
     */
    public function getSimultaneousProvide()
    {
        return $this->container['simultaneous_provide'];
    }

    /**
     * Sets simultaneous_provide
     *
     * @param bool $simultaneous_provide Simultaneous provide
     *
     * @return self
     */
    public function setSimultaneousProvide($simultaneous_provide)
    {
        if (is_null($simultaneous_provide)) {
            throw new \InvalidArgumentException('non-nullable simultaneous_provide cannot be null');
        }
        $this->container['simultaneous_provide'] = $simultaneous_provide;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id ID of the product
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime $activation_date Activation date
     *
     * @return self
     */
    public function setActivationDate($activation_date)
    {
        if (is_null($activation_date)) {
            throw new \InvalidArgumentException('non-nullable activation_date cannot be null');
        }
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets care_level
     *
     * @return string
     */
    public function getCareLevel()
    {
        return $this->container['care_level'];
    }

    /**
     * Sets care_level
     *
     * @param string $care_level Care level<p>Possible values:</p>  <ul>  <li><b>1</b> - Standard.</li>  <li><b>2</b> - Enhanced.</li>  </ul>
     *
     * @return self
     */
    public function setCareLevel($care_level)
    {
        if (is_null($care_level)) {
            throw new \InvalidArgumentException('non-nullable care_level cannot be null');
        }
        $allowedValues = $this->getCareLevelAllowableValues();
        if (!in_array($care_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'care_level', must be one of '%s'",
                    $care_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['care_level'] = $care_level;

        return $this;
    }

    /**
     * Gets send_completion_email
     *
     * @return bool
     */
    public function getSendCompletionEmail()
    {
        return $this->container['send_completion_email'];
    }

    /**
     * Sets send_completion_email
     *
     * @param bool $send_completion_email Send completion email
     *
     * @return self
     */
    public function setSendCompletionEmail($send_completion_email)
    {
        if (is_null($send_completion_email)) {
            throw new \InvalidArgumentException('non-nullable send_completion_email cannot be null');
        }
        $this->container['send_completion_email'] = $send_completion_email;

        return $this;
    }

    /**
     * Gets cli
     *
     * @return string|null
     */
    public function getCli()
    {
        return $this->container['cli'];
    }

    /**
     * Sets cli
     *
     * @param string|null $cli Calling line identity
     *
     * @return self
     */
    public function setCli($cli)
    {
        if (is_null($cli)) {
            array_push($this->openAPINullablesSetToNull, 'cli');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cli', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cli'] = $cli;

        return $this;
    }

    /**
     * Gets sim_code
     *
     * @return string|null
     */
    public function getSimCode()
    {
        return $this->container['sim_code'];
    }

    /**
     * Sets sim_code
     *
     * @param string|null $sim_code SIM/LORN Code
     *
     * @return self
     */
    public function setSimCode($sim_code)
    {
        if (is_null($sim_code)) {
            array_push($this->openAPINullablesSetToNull, 'sim_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sim_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sim_code'] = $sim_code;

        return $this;
    }

    /**
     * Gets address_reference
     *
     * @return string|null
     */
    public function getAddressReference()
    {
        return $this->container['address_reference'];
    }

    /**
     * Sets address_reference
     *
     * @param string|null $address_reference The address reference (NAD key). Required for SIM Provide orders
     *
     * @return self
     */
    public function setAddressReference($address_reference)
    {
        if (is_null($address_reference)) {
            array_push($this->openAPINullablesSetToNull, 'address_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_reference'] = $address_reference;

        return $this;
    }

    /**
     * Gets fast_track
     *
     * @return bool|null
     */
    public function getFastTrack()
    {
        return $this->container['fast_track'];
    }

    /**
     * Sets fast_track
     *
     * @param bool|null $fast_track Fast track order
     *
     * @return self
     */
    public function setFastTrack($fast_track)
    {
        if (is_null($fast_track)) {
            throw new \InvalidArgumentException('non-nullable fast_track cannot be null');
        }
        $this->container['fast_track'] = $fast_track;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return \OpenAPI\Client\Model\BroadbandOrderIp|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param \OpenAPI\Client\Model\BroadbandOrderIp|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets ripe
     *
     * @return \OpenAPI\Client\Model\BroadbandOrderRIPE|null
     */
    public function getRipe()
    {
        return $this->container['ripe'];
    }

    /**
     * Sets ripe
     *
     * @param \OpenAPI\Client\Model\BroadbandOrderRIPE|null $ripe ripe
     *
     * @return self
     */
    public function setRipe($ripe)
    {
        if (is_null($ripe)) {
            throw new \InvalidArgumentException('non-nullable ripe cannot be null');
        }
        $this->container['ripe'] = $ripe;

        return $this;
    }

    /**
     * Gets installation_options
     *
     * @return \OpenAPI\Client\Model\BroadbandOrderInstallationOptions|null
     */
    public function getInstallationOptions()
    {
        return $this->container['installation_options'];
    }

    /**
     * Sets installation_options
     *
     * @param \OpenAPI\Client\Model\BroadbandOrderInstallationOptions|null $installation_options installation_options
     *
     * @return self
     */
    public function setInstallationOptions($installation_options)
    {
        if (is_null($installation_options)) {
            throw new \InvalidArgumentException('non-nullable installation_options cannot be null');
        }
        $this->container['installation_options'] = $installation_options;

        return $this;
    }

    /**
     * Gets friendly_name
     *
     * @return string|null
     */
    public function getFriendlyName()
    {
        return $this->container['friendly_name'];
    }

    /**
     * Sets friendly_name
     *
     * @param string|null $friendly_name A friendly name for the connection
     *
     * @return self
     */
    public function setFriendlyName($friendly_name)
    {
        if (is_null($friendly_name)) {
            array_push($this->openAPINullablesSetToNull, 'friendly_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('friendly_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['friendly_name'] = $friendly_name;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id ID of the customer associated to the broadband user
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets tariff_id
     *
     * @return int|null
     */
    public function getTariffId()
    {
        return $this->container['tariff_id'];
    }

    /**
     * Sets tariff_id
     *
     * @param int|null $tariff_id ID of the broadband tariff associated to the broadband user
     *
     * @return self
     */
    public function setTariffId($tariff_id)
    {
        if (is_null($tariff_id)) {
            throw new \InvalidArgumentException('non-nullable tariff_id cannot be null');
        }
        $this->container['tariff_id'] = $tariff_id;

        return $this;
    }

    /**
     * Gets number_transfer
     *
     * @return string|null
     */
    public function getNumberTransfer()
    {
        return $this->container['number_transfer'];
    }

    /**
     * Sets number_transfer
     *
     * @param string|null $number_transfer Number transfer/port option<p>Possible values:</p>  <ul>  <li><b>0</b> - None.</li>  <li><b>1</b> - Morning.</li>  <li><b>2</b> - Afternoon.</li>  <li><b>3</b> - Afternoon.</li>  </ul>
     *
     * @return self
     */
    public function setNumberTransfer($number_transfer)
    {
        if (is_null($number_transfer)) {
            throw new \InvalidArgumentException('non-nullable number_transfer cannot be null');
        }
        $allowedValues = $this->getNumberTransferAllowableValues();
        if (!in_array($number_transfer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'number_transfer', must be one of '%s'",
                    $number_transfer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['number_transfer'] = $number_transfer;

        return $this;
    }

    /**
     * Gets cupid
     *
     * @return int|null
     */
    public function getCupid()
    {
        return $this->container['cupid'];
    }

    /**
     * Sets cupid
     *
     * @param int|null $cupid CUPID for 3rd party number transfers
     *
     * @return self
     */
    public function setCupid($cupid)
    {
        if (is_null($cupid)) {
            throw new \InvalidArgumentException('non-nullable cupid cannot be null');
        }
        $this->container['cupid'] = $cupid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


