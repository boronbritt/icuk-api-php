<?php
/**
 * BroadbandKBDResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDResponse Class Doc Comment
 *
 * @category Class
 * @description Represents a KBD response
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'requested_date' => '\DateTime',
        'id' => 'int',
        'success' => 'bool',
        'decision' => '\OpenAPI\Client\Model\BroadbandKBDDecision',
        'radius' => '\OpenAPI\Client\Model\BroadbandKBDRadius',
        'consistency_check' => '\OpenAPI\Client\Model\BroadbandKBDConsistencyCheck',
        'cu_line' => '\OpenAPI\Client\Model\BroadbandKBDCuline',
        'tam' => '\OpenAPI\Client\Model\BroadbandKBDTam',
        'manage_associate' => '\OpenAPI\Client\Model\BroadbandKBDManageAssociate',
        'neighbour' => '\OpenAPI\Client\Model\BroadbandKBDNeighbour',
        'access_profile' => '\OpenAPI\Client\Model\BroadbandKBDAccessProfile[]',
        'gea' => '\OpenAPI\Client\Model\BroadbandKBDGea',
        'ip_test' => '\OpenAPI\Client\Model\BroadbandKBDIpTest',
        'access_details' => '\OpenAPI\Client\Model\BroadbandKBDAccessDetails',
        'status_check' => '\OpenAPI\Client\Model\BroadbandKBDStatusCheck'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'requested_date' => 'date-time',
        'id' => 'int32',
        'success' => null,
        'decision' => null,
        'radius' => null,
        'consistency_check' => null,
        'cu_line' => null,
        'tam' => null,
        'manage_associate' => null,
        'neighbour' => null,
        'access_profile' => null,
        'gea' => null,
        'ip_test' => null,
        'access_details' => null,
        'status_check' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'requested_date' => false,
		'id' => false,
		'success' => false,
		'decision' => false,
		'radius' => false,
		'consistency_check' => false,
		'cu_line' => false,
		'tam' => false,
		'manage_associate' => false,
		'neighbour' => false,
		'access_profile' => true,
		'gea' => false,
		'ip_test' => false,
		'access_details' => false,
		'status_check' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requested_date' => 'requested_date',
        'id' => 'id',
        'success' => 'success',
        'decision' => 'decision',
        'radius' => 'radius',
        'consistency_check' => 'consistency_check',
        'cu_line' => 'cuLine',
        'tam' => 'tam',
        'manage_associate' => 'manage_associate',
        'neighbour' => 'neighbour',
        'access_profile' => 'access_profile',
        'gea' => 'gea',
        'ip_test' => 'ip_test',
        'access_details' => 'access_details',
        'status_check' => 'status_check'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requested_date' => 'setRequestedDate',
        'id' => 'setId',
        'success' => 'setSuccess',
        'decision' => 'setDecision',
        'radius' => 'setRadius',
        'consistency_check' => 'setConsistencyCheck',
        'cu_line' => 'setCuLine',
        'tam' => 'setTam',
        'manage_associate' => 'setManageAssociate',
        'neighbour' => 'setNeighbour',
        'access_profile' => 'setAccessProfile',
        'gea' => 'setGea',
        'ip_test' => 'setIpTest',
        'access_details' => 'setAccessDetails',
        'status_check' => 'setStatusCheck'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requested_date' => 'getRequestedDate',
        'id' => 'getId',
        'success' => 'getSuccess',
        'decision' => 'getDecision',
        'radius' => 'getRadius',
        'consistency_check' => 'getConsistencyCheck',
        'cu_line' => 'getCuLine',
        'tam' => 'getTam',
        'manage_associate' => 'getManageAssociate',
        'neighbour' => 'getNeighbour',
        'access_profile' => 'getAccessProfile',
        'gea' => 'getGea',
        'ip_test' => 'getIpTest',
        'access_details' => 'getAccessDetails',
        'status_check' => 'getStatusCheck'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('requested_date', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('success', $data ?? [], null);
        $this->setIfExists('decision', $data ?? [], null);
        $this->setIfExists('radius', $data ?? [], null);
        $this->setIfExists('consistency_check', $data ?? [], null);
        $this->setIfExists('cu_line', $data ?? [], null);
        $this->setIfExists('tam', $data ?? [], null);
        $this->setIfExists('manage_associate', $data ?? [], null);
        $this->setIfExists('neighbour', $data ?? [], null);
        $this->setIfExists('access_profile', $data ?? [], null);
        $this->setIfExists('gea', $data ?? [], null);
        $this->setIfExists('ip_test', $data ?? [], null);
        $this->setIfExists('access_details', $data ?? [], null);
        $this->setIfExists('status_check', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requested_date
     *
     * @return \DateTime|null
     */
    public function getRequestedDate()
    {
        return $this->container['requested_date'];
    }

    /**
     * Sets requested_date
     *
     * @param \DateTime|null $requested_date Date of the requested KBD
     *
     * @return self
     */
    public function setRequestedDate($requested_date)
    {
        if (is_null($requested_date)) {
            throw new \InvalidArgumentException('non-nullable requested_date cannot be null');
        }
        $this->container['requested_date'] = $requested_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The KBD ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success Whether the KBD request is successful
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDDecision|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDDecision|null $decision decision
     *
     * @return self
     */
    public function setDecision($decision)
    {
        if (is_null($decision)) {
            throw new \InvalidArgumentException('non-nullable decision cannot be null');
        }
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDRadius|null
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDRadius|null $radius radius
     *
     * @return self
     */
    public function setRadius($radius)
    {
        if (is_null($radius)) {
            throw new \InvalidArgumentException('non-nullable radius cannot be null');
        }
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets consistency_check
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDConsistencyCheck|null
     */
    public function getConsistencyCheck()
    {
        return $this->container['consistency_check'];
    }

    /**
     * Sets consistency_check
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDConsistencyCheck|null $consistency_check consistency_check
     *
     * @return self
     */
    public function setConsistencyCheck($consistency_check)
    {
        if (is_null($consistency_check)) {
            throw new \InvalidArgumentException('non-nullable consistency_check cannot be null');
        }
        $this->container['consistency_check'] = $consistency_check;

        return $this;
    }

    /**
     * Gets cu_line
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDCuline|null
     */
    public function getCuLine()
    {
        return $this->container['cu_line'];
    }

    /**
     * Sets cu_line
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDCuline|null $cu_line cu_line
     *
     * @return self
     */
    public function setCuLine($cu_line)
    {
        if (is_null($cu_line)) {
            throw new \InvalidArgumentException('non-nullable cu_line cannot be null');
        }
        $this->container['cu_line'] = $cu_line;

        return $this;
    }

    /**
     * Gets tam
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDTam|null
     */
    public function getTam()
    {
        return $this->container['tam'];
    }

    /**
     * Sets tam
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDTam|null $tam tam
     *
     * @return self
     */
    public function setTam($tam)
    {
        if (is_null($tam)) {
            throw new \InvalidArgumentException('non-nullable tam cannot be null');
        }
        $this->container['tam'] = $tam;

        return $this;
    }

    /**
     * Gets manage_associate
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDManageAssociate|null
     */
    public function getManageAssociate()
    {
        return $this->container['manage_associate'];
    }

    /**
     * Sets manage_associate
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDManageAssociate|null $manage_associate manage_associate
     *
     * @return self
     */
    public function setManageAssociate($manage_associate)
    {
        if (is_null($manage_associate)) {
            throw new \InvalidArgumentException('non-nullable manage_associate cannot be null');
        }
        $this->container['manage_associate'] = $manage_associate;

        return $this;
    }

    /**
     * Gets neighbour
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDNeighbour|null
     */
    public function getNeighbour()
    {
        return $this->container['neighbour'];
    }

    /**
     * Sets neighbour
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDNeighbour|null $neighbour neighbour
     *
     * @return self
     */
    public function setNeighbour($neighbour)
    {
        if (is_null($neighbour)) {
            throw new \InvalidArgumentException('non-nullable neighbour cannot be null');
        }
        $this->container['neighbour'] = $neighbour;

        return $this;
    }

    /**
     * Gets access_profile
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessProfile[]|null
     */
    public function getAccessProfile()
    {
        return $this->container['access_profile'];
    }

    /**
     * Sets access_profile
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessProfile[]|null $access_profile Represents the KBD access profile subtest
     *
     * @return self
     */
    public function setAccessProfile($access_profile)
    {
        if (is_null($access_profile)) {
            array_push($this->openAPINullablesSetToNull, 'access_profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_profile'] = $access_profile;

        return $this;
    }

    /**
     * Gets gea
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDGea|null
     */
    public function getGea()
    {
        return $this->container['gea'];
    }

    /**
     * Sets gea
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDGea|null $gea gea
     *
     * @return self
     */
    public function setGea($gea)
    {
        if (is_null($gea)) {
            throw new \InvalidArgumentException('non-nullable gea cannot be null');
        }
        $this->container['gea'] = $gea;

        return $this;
    }

    /**
     * Gets ip_test
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDIpTest|null
     */
    public function getIpTest()
    {
        return $this->container['ip_test'];
    }

    /**
     * Sets ip_test
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDIpTest|null $ip_test ip_test
     *
     * @return self
     */
    public function setIpTest($ip_test)
    {
        if (is_null($ip_test)) {
            throw new \InvalidArgumentException('non-nullable ip_test cannot be null');
        }
        $this->container['ip_test'] = $ip_test;

        return $this;
    }

    /**
     * Gets access_details
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDAccessDetails|null
     */
    public function getAccessDetails()
    {
        return $this->container['access_details'];
    }

    /**
     * Sets access_details
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDAccessDetails|null $access_details access_details
     *
     * @return self
     */
    public function setAccessDetails($access_details)
    {
        if (is_null($access_details)) {
            throw new \InvalidArgumentException('non-nullable access_details cannot be null');
        }
        $this->container['access_details'] = $access_details;

        return $this;
    }

    /**
     * Gets status_check
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDStatusCheck|null
     */
    public function getStatusCheck()
    {
        return $this->container['status_check'];
    }

    /**
     * Sets status_check
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDStatusCheck|null $status_check status_check
     *
     * @return self
     */
    public function setStatusCheck($status_check)
    {
        if (is_null($status_check)) {
            throw new \InvalidArgumentException('non-nullable status_check cannot be null');
        }
        $this->container['status_check'] = $status_check;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


