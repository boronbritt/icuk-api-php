<?php
/**
 * BroadbandDiagnosticsTamFibreResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandDiagnosticsTamFibreResponse Class Doc Comment
 *
 * @category Class
 * @description Represents a broadband diagnostics TAM response (additional information for fibre lines)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandDiagnosticsTamFibreResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandDiagnosticsTamFibreResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'report_fault' => 'string',
        'sync_status' => 'string',
        'voice_line_test_result' => 'string',
        'ethernet_traffic' => 'string',
        'nte_power_status' => 'string',
        'repetitive_electrical_impulse_noise' => 'string',
        'radio_frequency_ingress' => 'string',
        'bridge_tap' => 'string',
        'cross_talk' => 'string',
        'current_downstream_speed' => 'int',
        'current_upstream_speed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'report_fault' => null,
        'sync_status' => null,
        'voice_line_test_result' => null,
        'ethernet_traffic' => null,
        'nte_power_status' => null,
        'repetitive_electrical_impulse_noise' => null,
        'radio_frequency_ingress' => null,
        'bridge_tap' => null,
        'cross_talk' => null,
        'current_downstream_speed' => 'int32',
        'current_upstream_speed' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'report_fault' => true,
		'sync_status' => true,
		'voice_line_test_result' => true,
		'ethernet_traffic' => true,
		'nte_power_status' => true,
		'repetitive_electrical_impulse_noise' => true,
		'radio_frequency_ingress' => true,
		'bridge_tap' => true,
		'cross_talk' => true,
		'current_downstream_speed' => false,
		'current_upstream_speed' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'report_fault' => 'report_fault',
        'sync_status' => 'sync_status',
        'voice_line_test_result' => 'voice_line_test_result',
        'ethernet_traffic' => 'ethernet_traffic',
        'nte_power_status' => 'nte_power_status',
        'repetitive_electrical_impulse_noise' => 'repetitive_electrical_impulse_noise',
        'radio_frequency_ingress' => 'radio_frequency_ingress',
        'bridge_tap' => 'bridge_tap',
        'cross_talk' => 'cross_talk',
        'current_downstream_speed' => 'current_downstream_speed',
        'current_upstream_speed' => 'current_upstream_speed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'report_fault' => 'setReportFault',
        'sync_status' => 'setSyncStatus',
        'voice_line_test_result' => 'setVoiceLineTestResult',
        'ethernet_traffic' => 'setEthernetTraffic',
        'nte_power_status' => 'setNtePowerStatus',
        'repetitive_electrical_impulse_noise' => 'setRepetitiveElectricalImpulseNoise',
        'radio_frequency_ingress' => 'setRadioFrequencyIngress',
        'bridge_tap' => 'setBridgeTap',
        'cross_talk' => 'setCrossTalk',
        'current_downstream_speed' => 'setCurrentDownstreamSpeed',
        'current_upstream_speed' => 'setCurrentUpstreamSpeed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'report_fault' => 'getReportFault',
        'sync_status' => 'getSyncStatus',
        'voice_line_test_result' => 'getVoiceLineTestResult',
        'ethernet_traffic' => 'getEthernetTraffic',
        'nte_power_status' => 'getNtePowerStatus',
        'repetitive_electrical_impulse_noise' => 'getRepetitiveElectricalImpulseNoise',
        'radio_frequency_ingress' => 'getRadioFrequencyIngress',
        'bridge_tap' => 'getBridgeTap',
        'cross_talk' => 'getCrossTalk',
        'current_downstream_speed' => 'getCurrentDownstreamSpeed',
        'current_upstream_speed' => 'getCurrentUpstreamSpeed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('report_fault', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
        $this->setIfExists('voice_line_test_result', $data ?? [], null);
        $this->setIfExists('ethernet_traffic', $data ?? [], null);
        $this->setIfExists('nte_power_status', $data ?? [], null);
        $this->setIfExists('repetitive_electrical_impulse_noise', $data ?? [], null);
        $this->setIfExists('radio_frequency_ingress', $data ?? [], null);
        $this->setIfExists('bridge_tap', $data ?? [], null);
        $this->setIfExists('cross_talk', $data ?? [], null);
        $this->setIfExists('current_downstream_speed', $data ?? [], null);
        $this->setIfExists('current_upstream_speed', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets report_fault
     *
     * @return string|null
     */
    public function getReportFault()
    {
        return $this->container['report_fault'];
    }

    /**
     * Sets report_fault
     *
     * @param string|null $report_fault Whether it is recommended to report the fault
     *
     * @return self
     */
    public function setReportFault($report_fault)
    {
        if (is_null($report_fault)) {
            array_push($this->openAPINullablesSetToNull, 'report_fault');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_fault', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['report_fault'] = $report_fault;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status Represents sync status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        if (is_null($sync_status)) {
            array_push($this->openAPINullablesSetToNull, 'sync_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets voice_line_test_result
     *
     * @return string|null
     */
    public function getVoiceLineTestResult()
    {
        return $this->container['voice_line_test_result'];
    }

    /**
     * Sets voice_line_test_result
     *
     * @param string|null $voice_line_test_result Voice line test result
     *
     * @return self
     */
    public function setVoiceLineTestResult($voice_line_test_result)
    {
        if (is_null($voice_line_test_result)) {
            array_push($this->openAPINullablesSetToNull, 'voice_line_test_result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voice_line_test_result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voice_line_test_result'] = $voice_line_test_result;

        return $this;
    }

    /**
     * Gets ethernet_traffic
     *
     * @return string|null
     */
    public function getEthernetTraffic()
    {
        return $this->container['ethernet_traffic'];
    }

    /**
     * Sets ethernet_traffic
     *
     * @param string|null $ethernet_traffic Ethernet_traffic
     *
     * @return self
     */
    public function setEthernetTraffic($ethernet_traffic)
    {
        if (is_null($ethernet_traffic)) {
            array_push($this->openAPINullablesSetToNull, 'ethernet_traffic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethernet_traffic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethernet_traffic'] = $ethernet_traffic;

        return $this;
    }

    /**
     * Gets nte_power_status
     *
     * @return string|null
     */
    public function getNtePowerStatus()
    {
        return $this->container['nte_power_status'];
    }

    /**
     * Sets nte_power_status
     *
     * @param string|null $nte_power_status NTE Power Status
     *
     * @return self
     */
    public function setNtePowerStatus($nte_power_status)
    {
        if (is_null($nte_power_status)) {
            array_push($this->openAPINullablesSetToNull, 'nte_power_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nte_power_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nte_power_status'] = $nte_power_status;

        return $this;
    }

    /**
     * Gets repetitive_electrical_impulse_noise
     *
     * @return string|null
     */
    public function getRepetitiveElectricalImpulseNoise()
    {
        return $this->container['repetitive_electrical_impulse_noise'];
    }

    /**
     * Sets repetitive_electrical_impulse_noise
     *
     * @param string|null $repetitive_electrical_impulse_noise Repetitive Electrical Impulse Noise
     *
     * @return self
     */
    public function setRepetitiveElectricalImpulseNoise($repetitive_electrical_impulse_noise)
    {
        if (is_null($repetitive_electrical_impulse_noise)) {
            array_push($this->openAPINullablesSetToNull, 'repetitive_electrical_impulse_noise');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('repetitive_electrical_impulse_noise', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['repetitive_electrical_impulse_noise'] = $repetitive_electrical_impulse_noise;

        return $this;
    }

    /**
     * Gets radio_frequency_ingress
     *
     * @return string|null
     */
    public function getRadioFrequencyIngress()
    {
        return $this->container['radio_frequency_ingress'];
    }

    /**
     * Sets radio_frequency_ingress
     *
     * @param string|null $radio_frequency_ingress Radio Frequency Ingress
     *
     * @return self
     */
    public function setRadioFrequencyIngress($radio_frequency_ingress)
    {
        if (is_null($radio_frequency_ingress)) {
            array_push($this->openAPINullablesSetToNull, 'radio_frequency_ingress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('radio_frequency_ingress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['radio_frequency_ingress'] = $radio_frequency_ingress;

        return $this;
    }

    /**
     * Gets bridge_tap
     *
     * @return string|null
     */
    public function getBridgeTap()
    {
        return $this->container['bridge_tap'];
    }

    /**
     * Sets bridge_tap
     *
     * @param string|null $bridge_tap Bridge Tap
     *
     * @return self
     */
    public function setBridgeTap($bridge_tap)
    {
        if (is_null($bridge_tap)) {
            array_push($this->openAPINullablesSetToNull, 'bridge_tap');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bridge_tap', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bridge_tap'] = $bridge_tap;

        return $this;
    }

    /**
     * Gets cross_talk
     *
     * @return string|null
     */
    public function getCrossTalk()
    {
        return $this->container['cross_talk'];
    }

    /**
     * Sets cross_talk
     *
     * @param string|null $cross_talk Cross Talk
     *
     * @return self
     */
    public function setCrossTalk($cross_talk)
    {
        if (is_null($cross_talk)) {
            array_push($this->openAPINullablesSetToNull, 'cross_talk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cross_talk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cross_talk'] = $cross_talk;

        return $this;
    }

    /**
     * Gets current_downstream_speed
     *
     * @return int|null
     */
    public function getCurrentDownstreamSpeed()
    {
        return $this->container['current_downstream_speed'];
    }

    /**
     * Sets current_downstream_speed
     *
     * @param int|null $current_downstream_speed Current downstream speed in Mbps
     *
     * @return self
     */
    public function setCurrentDownstreamSpeed($current_downstream_speed)
    {
        if (is_null($current_downstream_speed)) {
            throw new \InvalidArgumentException('non-nullable current_downstream_speed cannot be null');
        }
        $this->container['current_downstream_speed'] = $current_downstream_speed;

        return $this;
    }

    /**
     * Gets current_upstream_speed
     *
     * @return int|null
     */
    public function getCurrentUpstreamSpeed()
    {
        return $this->container['current_upstream_speed'];
    }

    /**
     * Sets current_upstream_speed
     *
     * @param int|null $current_upstream_speed Current upstream speed in Mbps
     *
     * @return self
     */
    public function setCurrentUpstreamSpeed($current_upstream_speed)
    {
        if (is_null($current_upstream_speed)) {
            throw new \InvalidArgumentException('non-nullable current_upstream_speed cannot be null');
        }
        $this->container['current_upstream_speed'] = $current_upstream_speed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


