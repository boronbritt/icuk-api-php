<?php
/**
 * BroadbandKBDIpTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDIpTest Class Doc Comment
 *
 * @category Class
 * @description Represents the KBD IP test
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDIpTest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDIpTest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'outcome' => 'string',
        'description' => 'string',
        'session_ppp' => 'string',
        'session_start_time' => 'string',
        'session_duration' => 'string',
        'session_vp_svlan_status' => 'string',
        'ras_ip' => 'string',
        'hgr_ip_addr' => 'string',
        'ip_v6_address' => 'string',
        'ip_v6_raw_address' => 'string',
        'ip_packet' => '\OpenAPI\Client\Model\BroadbandKBDIpTestPacket',
        'nte_bluebird_indicator' => 'string',
        'nte_message' => 'string',
        'qos' => '\OpenAPI\Client\Model\BroadbandKBDIpTestQos',
        'aggregate_traffic' => '\OpenAPI\Client\Model\BroadbandKBDIpTestTraffic'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'outcome' => null,
        'description' => null,
        'session_ppp' => null,
        'session_start_time' => null,
        'session_duration' => null,
        'session_vp_svlan_status' => null,
        'ras_ip' => null,
        'hgr_ip_addr' => null,
        'ip_v6_address' => null,
        'ip_v6_raw_address' => null,
        'ip_packet' => null,
        'nte_bluebird_indicator' => null,
        'nte_message' => null,
        'qos' => null,
        'aggregate_traffic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'outcome' => true,
		'description' => true,
		'session_ppp' => true,
		'session_start_time' => true,
		'session_duration' => true,
		'session_vp_svlan_status' => true,
		'ras_ip' => true,
		'hgr_ip_addr' => true,
		'ip_v6_address' => true,
		'ip_v6_raw_address' => true,
		'ip_packet' => false,
		'nte_bluebird_indicator' => true,
		'nte_message' => true,
		'qos' => false,
		'aggregate_traffic' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outcome' => 'outcome',
        'description' => 'description',
        'session_ppp' => 'session_ppp',
        'session_start_time' => 'session_start_time',
        'session_duration' => 'session_duration',
        'session_vp_svlan_status' => 'session_vp_svlan_status',
        'ras_ip' => 'ras_ip',
        'hgr_ip_addr' => 'hgr_ip_addr',
        'ip_v6_address' => 'ip_v6_address',
        'ip_v6_raw_address' => 'ip_v6_raw_address',
        'ip_packet' => 'ip_packet',
        'nte_bluebird_indicator' => 'nte_bluebird_indicator',
        'nte_message' => 'nte_message',
        'qos' => 'qos',
        'aggregate_traffic' => 'aggregate_traffic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outcome' => 'setOutcome',
        'description' => 'setDescription',
        'session_ppp' => 'setSessionPpp',
        'session_start_time' => 'setSessionStartTime',
        'session_duration' => 'setSessionDuration',
        'session_vp_svlan_status' => 'setSessionVpSvlanStatus',
        'ras_ip' => 'setRasIp',
        'hgr_ip_addr' => 'setHgrIpAddr',
        'ip_v6_address' => 'setIpV6Address',
        'ip_v6_raw_address' => 'setIpV6RawAddress',
        'ip_packet' => 'setIpPacket',
        'nte_bluebird_indicator' => 'setNteBluebirdIndicator',
        'nte_message' => 'setNteMessage',
        'qos' => 'setQos',
        'aggregate_traffic' => 'setAggregateTraffic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outcome' => 'getOutcome',
        'description' => 'getDescription',
        'session_ppp' => 'getSessionPpp',
        'session_start_time' => 'getSessionStartTime',
        'session_duration' => 'getSessionDuration',
        'session_vp_svlan_status' => 'getSessionVpSvlanStatus',
        'ras_ip' => 'getRasIp',
        'hgr_ip_addr' => 'getHgrIpAddr',
        'ip_v6_address' => 'getIpV6Address',
        'ip_v6_raw_address' => 'getIpV6RawAddress',
        'ip_packet' => 'getIpPacket',
        'nte_bluebird_indicator' => 'getNteBluebirdIndicator',
        'nte_message' => 'getNteMessage',
        'qos' => 'getQos',
        'aggregate_traffic' => 'getAggregateTraffic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('session_ppp', $data ?? [], null);
        $this->setIfExists('session_start_time', $data ?? [], null);
        $this->setIfExists('session_duration', $data ?? [], null);
        $this->setIfExists('session_vp_svlan_status', $data ?? [], null);
        $this->setIfExists('ras_ip', $data ?? [], null);
        $this->setIfExists('hgr_ip_addr', $data ?? [], null);
        $this->setIfExists('ip_v6_address', $data ?? [], null);
        $this->setIfExists('ip_v6_raw_address', $data ?? [], null);
        $this->setIfExists('ip_packet', $data ?? [], null);
        $this->setIfExists('nte_bluebird_indicator', $data ?? [], null);
        $this->setIfExists('nte_message', $data ?? [], null);
        $this->setIfExists('qos', $data ?? [], null);
        $this->setIfExists('aggregate_traffic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome The IP test outcome code.
     *
     * @return self
     */
    public function setOutcome($outcome)
    {
        if (is_null($outcome)) {
            array_push($this->openAPINullablesSetToNull, 'outcome');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outcome', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The IP test description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets session_ppp
     *
     * @return string|null
     */
    public function getSessionPpp()
    {
        return $this->container['session_ppp'];
    }

    /**
     * Sets session_ppp
     *
     * @param string|null $session_ppp PPP Session.
     *
     * @return self
     */
    public function setSessionPpp($session_ppp)
    {
        if (is_null($session_ppp)) {
            array_push($this->openAPINullablesSetToNull, 'session_ppp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_ppp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_ppp'] = $session_ppp;

        return $this;
    }

    /**
     * Gets session_start_time
     *
     * @return string|null
     */
    public function getSessionStartTime()
    {
        return $this->container['session_start_time'];
    }

    /**
     * Sets session_start_time
     *
     * @param string|null $session_start_time Session Start Time.
     *
     * @return self
     */
    public function setSessionStartTime($session_start_time)
    {
        if (is_null($session_start_time)) {
            array_push($this->openAPINullablesSetToNull, 'session_start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_start_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_start_time'] = $session_start_time;

        return $this;
    }

    /**
     * Gets session_duration
     *
     * @return string|null
     */
    public function getSessionDuration()
    {
        return $this->container['session_duration'];
    }

    /**
     * Sets session_duration
     *
     * @param string|null $session_duration Session Duration.
     *
     * @return self
     */
    public function setSessionDuration($session_duration)
    {
        if (is_null($session_duration)) {
            array_push($this->openAPINullablesSetToNull, 'session_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_duration'] = $session_duration;

        return $this;
    }

    /**
     * Gets session_vp_svlan_status
     *
     * @return string|null
     */
    public function getSessionVpSvlanStatus()
    {
        return $this->container['session_vp_svlan_status'];
    }

    /**
     * Sets session_vp_svlan_status
     *
     * @param string|null $session_vp_svlan_status VP or SVLAN Status.
     *
     * @return self
     */
    public function setSessionVpSvlanStatus($session_vp_svlan_status)
    {
        if (is_null($session_vp_svlan_status)) {
            array_push($this->openAPINullablesSetToNull, 'session_vp_svlan_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_vp_svlan_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_vp_svlan_status'] = $session_vp_svlan_status;

        return $this;
    }

    /**
     * Gets ras_ip
     *
     * @return string|null
     */
    public function getRasIp()
    {
        return $this->container['ras_ip'];
    }

    /**
     * Sets ras_ip
     *
     * @param string|null $ras_ip RAS (Remote Access Server) IP.
     *
     * @return self
     */
    public function setRasIp($ras_ip)
    {
        if (is_null($ras_ip)) {
            array_push($this->openAPINullablesSetToNull, 'ras_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ras_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ras_ip'] = $ras_ip;

        return $this;
    }

    /**
     * Gets hgr_ip_addr
     *
     * @return string|null
     */
    public function getHgrIpAddr()
    {
        return $this->container['hgr_ip_addr'];
    }

    /**
     * Sets hgr_ip_addr
     *
     * @param string|null $hgr_ip_addr HGR IP.
     *
     * @return self
     */
    public function setHgrIpAddr($hgr_ip_addr)
    {
        if (is_null($hgr_ip_addr)) {
            array_push($this->openAPINullablesSetToNull, 'hgr_ip_addr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hgr_ip_addr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hgr_ip_addr'] = $hgr_ip_addr;

        return $this;
    }

    /**
     * Gets ip_v6_address
     *
     * @return string|null
     */
    public function getIpV6Address()
    {
        return $this->container['ip_v6_address'];
    }

    /**
     * Sets ip_v6_address
     *
     * @param string|null $ip_v6_address IPv6 address.
     *
     * @return self
     */
    public function setIpV6Address($ip_v6_address)
    {
        if (is_null($ip_v6_address)) {
            array_push($this->openAPINullablesSetToNull, 'ip_v6_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ip_v6_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ip_v6_address'] = $ip_v6_address;

        return $this;
    }

    /**
     * Gets ip_v6_raw_address
     *
     * @return string|null
     */
    public function getIpV6RawAddress()
    {
        return $this->container['ip_v6_raw_address'];
    }

    /**
     * Sets ip_v6_raw_address
     *
     * @param string|null $ip_v6_raw_address IPv6 raw address.
     *
     * @return self
     */
    public function setIpV6RawAddress($ip_v6_raw_address)
    {
        if (is_null($ip_v6_raw_address)) {
            array_push($this->openAPINullablesSetToNull, 'ip_v6_raw_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ip_v6_raw_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ip_v6_raw_address'] = $ip_v6_raw_address;

        return $this;
    }

    /**
     * Gets ip_packet
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDIpTestPacket|null
     */
    public function getIpPacket()
    {
        return $this->container['ip_packet'];
    }

    /**
     * Sets ip_packet
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDIpTestPacket|null $ip_packet ip_packet
     *
     * @return self
     */
    public function setIpPacket($ip_packet)
    {
        if (is_null($ip_packet)) {
            throw new \InvalidArgumentException('non-nullable ip_packet cannot be null');
        }
        $this->container['ip_packet'] = $ip_packet;

        return $this;
    }

    /**
     * Gets nte_bluebird_indicator
     *
     * @return string|null
     */
    public function getNteBluebirdIndicator()
    {
        return $this->container['nte_bluebird_indicator'];
    }

    /**
     * Sets nte_bluebird_indicator
     *
     * @param string|null $nte_bluebird_indicator DSL Max.
     *
     * @return self
     */
    public function setNteBluebirdIndicator($nte_bluebird_indicator)
    {
        if (is_null($nte_bluebird_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'nte_bluebird_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nte_bluebird_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nte_bluebird_indicator'] = $nte_bluebird_indicator;

        return $this;
    }

    /**
     * Gets nte_message
     *
     * @return string|null
     */
    public function getNteMessage()
    {
        return $this->container['nte_message'];
    }

    /**
     * Sets nte_message
     *
     * @param string|null $nte_message NTE Message.
     *
     * @return self
     */
    public function setNteMessage($nte_message)
    {
        if (is_null($nte_message)) {
            array_push($this->openAPINullablesSetToNull, 'nte_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nte_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nte_message'] = $nte_message;

        return $this;
    }

    /**
     * Gets qos
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDIpTestQos|null
     */
    public function getQos()
    {
        return $this->container['qos'];
    }

    /**
     * Sets qos
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDIpTestQos|null $qos qos
     *
     * @return self
     */
    public function setQos($qos)
    {
        if (is_null($qos)) {
            throw new \InvalidArgumentException('non-nullable qos cannot be null');
        }
        $this->container['qos'] = $qos;

        return $this;
    }

    /**
     * Gets aggregate_traffic
     *
     * @return \OpenAPI\Client\Model\BroadbandKBDIpTestTraffic|null
     */
    public function getAggregateTraffic()
    {
        return $this->container['aggregate_traffic'];
    }

    /**
     * Sets aggregate_traffic
     *
     * @param \OpenAPI\Client\Model\BroadbandKBDIpTestTraffic|null $aggregate_traffic aggregate_traffic
     *
     * @return self
     */
    public function setAggregateTraffic($aggregate_traffic)
    {
        if (is_null($aggregate_traffic)) {
            throw new \InvalidArgumentException('non-nullable aggregate_traffic cannot be null');
        }
        $this->container['aggregate_traffic'] = $aggregate_traffic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


