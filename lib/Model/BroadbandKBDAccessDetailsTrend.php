<?php
/**
 * BroadbandKBDAccessDetailsTrend
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandKBDAccessDetailsTrend Class Doc Comment
 *
 * @category Class
 * @description BroadbandKBDAccessDetailsTrend struct
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BroadbandKBDAccessDetailsTrend implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BroadbandKBDAccessDetailsTrend';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'down_message' => 'string',
        'down_min' => 'string',
        'down_max' => 'string',
        'down_avg' => 'string',
        'down_min_date' => 'string',
        'down_max_date' => 'string',
        'up_message' => 'string',
        'up_min' => 'string',
        'up_max' => 'string',
        'up_avg' => 'string',
        'up_min_date' => 'string',
        'up_max_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'down_message' => null,
        'down_min' => null,
        'down_max' => null,
        'down_avg' => null,
        'down_min_date' => null,
        'down_max_date' => null,
        'up_message' => null,
        'up_min' => null,
        'up_max' => null,
        'up_avg' => null,
        'up_min_date' => null,
        'up_max_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'down_message' => true,
		'down_min' => true,
		'down_max' => true,
		'down_avg' => true,
		'down_min_date' => true,
		'down_max_date' => true,
		'up_message' => true,
		'up_min' => true,
		'up_max' => true,
		'up_avg' => true,
		'up_min_date' => true,
		'up_max_date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'down_message' => 'down_message',
        'down_min' => 'down_min',
        'down_max' => 'down_max',
        'down_avg' => 'down_avg',
        'down_min_date' => 'down_min_date',
        'down_max_date' => 'down_max_date',
        'up_message' => 'up_message',
        'up_min' => 'up_min',
        'up_max' => 'up_max',
        'up_avg' => 'up_avg',
        'up_min_date' => 'up_min_date',
        'up_max_date' => 'up_max_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'down_message' => 'setDownMessage',
        'down_min' => 'setDownMin',
        'down_max' => 'setDownMax',
        'down_avg' => 'setDownAvg',
        'down_min_date' => 'setDownMinDate',
        'down_max_date' => 'setDownMaxDate',
        'up_message' => 'setUpMessage',
        'up_min' => 'setUpMin',
        'up_max' => 'setUpMax',
        'up_avg' => 'setUpAvg',
        'up_min_date' => 'setUpMinDate',
        'up_max_date' => 'setUpMaxDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'down_message' => 'getDownMessage',
        'down_min' => 'getDownMin',
        'down_max' => 'getDownMax',
        'down_avg' => 'getDownAvg',
        'down_min_date' => 'getDownMinDate',
        'down_max_date' => 'getDownMaxDate',
        'up_message' => 'getUpMessage',
        'up_min' => 'getUpMin',
        'up_max' => 'getUpMax',
        'up_avg' => 'getUpAvg',
        'up_min_date' => 'getUpMinDate',
        'up_max_date' => 'getUpMaxDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('down_message', $data ?? [], null);
        $this->setIfExists('down_min', $data ?? [], null);
        $this->setIfExists('down_max', $data ?? [], null);
        $this->setIfExists('down_avg', $data ?? [], null);
        $this->setIfExists('down_min_date', $data ?? [], null);
        $this->setIfExists('down_max_date', $data ?? [], null);
        $this->setIfExists('up_message', $data ?? [], null);
        $this->setIfExists('up_min', $data ?? [], null);
        $this->setIfExists('up_max', $data ?? [], null);
        $this->setIfExists('up_avg', $data ?? [], null);
        $this->setIfExists('up_min_date', $data ?? [], null);
        $this->setIfExists('up_max_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets down_message
     *
     * @return string|null
     */
    public function getDownMessage()
    {
        return $this->container['down_message'];
    }

    /**
     * Sets down_message
     *
     * @param string|null $down_message The downstream message.
     *
     * @return self
     */
    public function setDownMessage($down_message)
    {
        if (is_null($down_message)) {
            array_push($this->openAPINullablesSetToNull, 'down_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_message'] = $down_message;

        return $this;
    }

    /**
     * Gets down_min
     *
     * @return string|null
     */
    public function getDownMin()
    {
        return $this->container['down_min'];
    }

    /**
     * Sets down_min
     *
     * @param string|null $down_min The downstream minimum value.
     *
     * @return self
     */
    public function setDownMin($down_min)
    {
        if (is_null($down_min)) {
            array_push($this->openAPINullablesSetToNull, 'down_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_min'] = $down_min;

        return $this;
    }

    /**
     * Gets down_max
     *
     * @return string|null
     */
    public function getDownMax()
    {
        return $this->container['down_max'];
    }

    /**
     * Sets down_max
     *
     * @param string|null $down_max The downstream maximum value.
     *
     * @return self
     */
    public function setDownMax($down_max)
    {
        if (is_null($down_max)) {
            array_push($this->openAPINullablesSetToNull, 'down_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_max'] = $down_max;

        return $this;
    }

    /**
     * Gets down_avg
     *
     * @return string|null
     */
    public function getDownAvg()
    {
        return $this->container['down_avg'];
    }

    /**
     * Sets down_avg
     *
     * @param string|null $down_avg The downstream average value.
     *
     * @return self
     */
    public function setDownAvg($down_avg)
    {
        if (is_null($down_avg)) {
            array_push($this->openAPINullablesSetToNull, 'down_avg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_avg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_avg'] = $down_avg;

        return $this;
    }

    /**
     * Gets down_min_date
     *
     * @return string|null
     */
    public function getDownMinDate()
    {
        return $this->container['down_min_date'];
    }

    /**
     * Sets down_min_date
     *
     * @param string|null $down_min_date The downstream minimum date.
     *
     * @return self
     */
    public function setDownMinDate($down_min_date)
    {
        if (is_null($down_min_date)) {
            array_push($this->openAPINullablesSetToNull, 'down_min_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_min_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_min_date'] = $down_min_date;

        return $this;
    }

    /**
     * Gets down_max_date
     *
     * @return string|null
     */
    public function getDownMaxDate()
    {
        return $this->container['down_max_date'];
    }

    /**
     * Sets down_max_date
     *
     * @param string|null $down_max_date The downstream maximum date.
     *
     * @return self
     */
    public function setDownMaxDate($down_max_date)
    {
        if (is_null($down_max_date)) {
            array_push($this->openAPINullablesSetToNull, 'down_max_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_max_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_max_date'] = $down_max_date;

        return $this;
    }

    /**
     * Gets up_message
     *
     * @return string|null
     */
    public function getUpMessage()
    {
        return $this->container['up_message'];
    }

    /**
     * Sets up_message
     *
     * @param string|null $up_message The upstream message.
     *
     * @return self
     */
    public function setUpMessage($up_message)
    {
        if (is_null($up_message)) {
            array_push($this->openAPINullablesSetToNull, 'up_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('up_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['up_message'] = $up_message;

        return $this;
    }

    /**
     * Gets up_min
     *
     * @return string|null
     */
    public function getUpMin()
    {
        return $this->container['up_min'];
    }

    /**
     * Sets up_min
     *
     * @param string|null $up_min The upstream minimum value.
     *
     * @return self
     */
    public function setUpMin($up_min)
    {
        if (is_null($up_min)) {
            array_push($this->openAPINullablesSetToNull, 'up_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('up_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['up_min'] = $up_min;

        return $this;
    }

    /**
     * Gets up_max
     *
     * @return string|null
     */
    public function getUpMax()
    {
        return $this->container['up_max'];
    }

    /**
     * Sets up_max
     *
     * @param string|null $up_max The upstream maximum value.
     *
     * @return self
     */
    public function setUpMax($up_max)
    {
        if (is_null($up_max)) {
            array_push($this->openAPINullablesSetToNull, 'up_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('up_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['up_max'] = $up_max;

        return $this;
    }

    /**
     * Gets up_avg
     *
     * @return string|null
     */
    public function getUpAvg()
    {
        return $this->container['up_avg'];
    }

    /**
     * Sets up_avg
     *
     * @param string|null $up_avg The upstream average value.
     *
     * @return self
     */
    public function setUpAvg($up_avg)
    {
        if (is_null($up_avg)) {
            array_push($this->openAPINullablesSetToNull, 'up_avg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('up_avg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['up_avg'] = $up_avg;

        return $this;
    }

    /**
     * Gets up_min_date
     *
     * @return string|null
     */
    public function getUpMinDate()
    {
        return $this->container['up_min_date'];
    }

    /**
     * Sets up_min_date
     *
     * @param string|null $up_min_date The upstream minimum date.
     *
     * @return self
     */
    public function setUpMinDate($up_min_date)
    {
        if (is_null($up_min_date)) {
            array_push($this->openAPINullablesSetToNull, 'up_min_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('up_min_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['up_min_date'] = $up_min_date;

        return $this;
    }

    /**
     * Gets up_max_date
     *
     * @return string|null
     */
    public function getUpMaxDate()
    {
        return $this->container['up_max_date'];
    }

    /**
     * Sets up_max_date
     *
     * @param string|null $up_max_date The upstream maximum date.
     *
     * @return self
     */
    public function setUpMaxDate($up_max_date)
    {
        if (is_null($up_max_date)) {
            array_push($this->openAPINullablesSetToNull, 'up_max_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('up_max_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['up_max_date'] = $up_max_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


