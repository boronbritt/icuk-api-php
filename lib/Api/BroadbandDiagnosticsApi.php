<?php
/**
 * BroadbandDiagnosticsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandDiagnosticsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BroadbandDiagnosticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'broadbandDiagnosticsResultsUsernameTestIdGet' => [
            'application/json',
        ],
        'broadbandDiagnosticsUsernameGet' => [
            'application/json',
        ],
        'broadbandKbdPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'broadbandKbdResultUsernameGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation broadbandDiagnosticsResultsUsernameTestIdGet
     *
     * Gets the results of complete diagnostics test for a certain user and test ID for a TTB line
     *
     * @param  string $username The name of the user (required)
     * @param  string $test_id The test ID (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDiagnosticsResultsUsernameTestIdGet($username, $test_id, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'][0])
    {
        list($response) = $this->broadbandDiagnosticsResultsUsernameTestIdGetWithHttpInfo($username, $test_id, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDiagnosticsResultsUsernameTestIdGetWithHttpInfo
     *
     * Gets the results of complete diagnostics test for a certain user and test ID for a TTB line
     *
     * @param  string $username The name of the user (required)
     * @param  string $test_id The test ID (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDiagnosticsResultsUsernameTestIdGetWithHttpInfo($username, $test_id, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'][0])
    {
        $request = $this->broadbandDiagnosticsResultsUsernameTestIdGetRequest($username, $test_id, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDiagnosticsResultsUsernameTestIdGetAsync
     *
     * Gets the results of complete diagnostics test for a certain user and test ID for a TTB line
     *
     * @param  string $username The name of the user (required)
     * @param  string $test_id The test ID (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDiagnosticsResultsUsernameTestIdGetAsync($username, $test_id, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'][0])
    {
        return $this->broadbandDiagnosticsResultsUsernameTestIdGetAsyncWithHttpInfo($username, $test_id, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDiagnosticsResultsUsernameTestIdGetAsyncWithHttpInfo
     *
     * Gets the results of complete diagnostics test for a certain user and test ID for a TTB line
     *
     * @param  string $username The name of the user (required)
     * @param  string $test_id The test ID (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDiagnosticsResultsUsernameTestIdGetAsyncWithHttpInfo($username, $test_id, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDiagnosticsTamResponse';
        $request = $this->broadbandDiagnosticsResultsUsernameTestIdGetRequest($username, $test_id, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDiagnosticsResultsUsernameTestIdGet'
     *
     * @param  string $username The name of the user (required)
     * @param  string $test_id The test ID (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDiagnosticsResultsUsernameTestIdGetRequest($username, $test_id, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsResultsUsernameTestIdGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDiagnosticsResultsUsernameTestIdGet'
            );
        }

        // verify the required parameter 'test_id' is set
        if ($test_id === null || (is_array($test_id) && count($test_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $test_id when calling broadbandDiagnosticsResultsUsernameTestIdGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDiagnosticsResultsUsernameTestIdGet'
            );
        }


        $resourcePath = '/broadband/diagnostics/results/{username}/{test_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($test_id !== null) {
            $resourcePath = str_replace(
                '{' . 'test_id' . '}',
                ObjectSerializer::toPathValue($test_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDiagnosticsUsernameGet
     *
     * Carry out a TalkTalk diagnostics test on the user line
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDiagnosticsResponse|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDiagnosticsUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsUsernameGet'][0])
    {
        list($response) = $this->broadbandDiagnosticsUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDiagnosticsUsernameGetWithHttpInfo
     *
     * Carry out a TalkTalk diagnostics test on the user line
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDiagnosticsResponse|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDiagnosticsUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsUsernameGet'][0])
    {
        $request = $this->broadbandDiagnosticsUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDiagnosticsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDiagnosticsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDiagnosticsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDiagnosticsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDiagnosticsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDiagnosticsUsernameGetAsync
     *
     * Carry out a TalkTalk diagnostics test on the user line
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDiagnosticsUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsUsernameGet'][0])
    {
        return $this->broadbandDiagnosticsUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDiagnosticsUsernameGetAsyncWithHttpInfo
     *
     * Carry out a TalkTalk diagnostics test on the user line
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDiagnosticsUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDiagnosticsResponse';
        $request = $this->broadbandDiagnosticsUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDiagnosticsUsernameGet'
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDiagnosticsUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDiagnosticsUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandDiagnosticsUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDiagnosticsUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDiagnosticsUsernameGet'
            );
        }


        $resourcePath = '/broadband/diagnostics/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandKbdPost
     *
     * Carry out a Knowledge Based Diagnostics test on a BT Openreach line
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandKBDRequest $broadband_kbd_request Represent a KBD request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandKBDResponse|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandKbdPost($api_platform, $broadband_kbd_request = null, string $contentType = self::contentTypes['broadbandKbdPost'][0])
    {
        list($response) = $this->broadbandKbdPostWithHttpInfo($api_platform, $broadband_kbd_request, $contentType);
        return $response;
    }

    /**
     * Operation broadbandKbdPostWithHttpInfo
     *
     * Carry out a Knowledge Based Diagnostics test on a BT Openreach line
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandKBDRequest $broadband_kbd_request Represent a KBD request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandKBDResponse|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandKbdPostWithHttpInfo($api_platform, $broadband_kbd_request = null, string $contentType = self::contentTypes['broadbandKbdPost'][0])
    {
        $request = $this->broadbandKbdPostRequest($api_platform, $broadband_kbd_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandKBDResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandKBDResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandKBDResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandKBDResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandKBDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandKbdPostAsync
     *
     * Carry out a Knowledge Based Diagnostics test on a BT Openreach line
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandKBDRequest $broadband_kbd_request Represent a KBD request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandKbdPostAsync($api_platform, $broadband_kbd_request = null, string $contentType = self::contentTypes['broadbandKbdPost'][0])
    {
        return $this->broadbandKbdPostAsyncWithHttpInfo($api_platform, $broadband_kbd_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandKbdPostAsyncWithHttpInfo
     *
     * Carry out a Knowledge Based Diagnostics test on a BT Openreach line
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandKBDRequest $broadband_kbd_request Represent a KBD request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandKbdPostAsyncWithHttpInfo($api_platform, $broadband_kbd_request = null, string $contentType = self::contentTypes['broadbandKbdPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandKBDResponse';
        $request = $this->broadbandKbdPostRequest($api_platform, $broadband_kbd_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandKbdPost'
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandKBDRequest $broadband_kbd_request Represent a KBD request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandKbdPostRequest($api_platform, $broadband_kbd_request = null, string $contentType = self::contentTypes['broadbandKbdPost'][0])
    {

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandKbdPost'
            );
        }



        $resourcePath = '/broadband/kbd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($broadband_kbd_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($broadband_kbd_request));
            } else {
                $httpBody = $broadband_kbd_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandKbdResultUsernameGet
     *
     * Gets the results of complete KBD&#39;s for a certain user
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdResultUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandKBDResponse[]|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandKbdResultUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandKbdResultUsernameGet'][0])
    {
        list($response) = $this->broadbandKbdResultUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandKbdResultUsernameGetWithHttpInfo
     *
     * Gets the results of complete KBD&#39;s for a certain user
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdResultUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandKBDResponse[]|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandKbdResultUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandKbdResultUsernameGet'][0])
    {
        $request = $this->broadbandKbdResultUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandKBDResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandKBDResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandKBDResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandKBDResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandKBDResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandKbdResultUsernameGetAsync
     *
     * Gets the results of complete KBD&#39;s for a certain user
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdResultUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandKbdResultUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandKbdResultUsernameGet'][0])
    {
        return $this->broadbandKbdResultUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandKbdResultUsernameGetAsyncWithHttpInfo
     *
     * Gets the results of complete KBD&#39;s for a certain user
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdResultUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandKbdResultUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandKbdResultUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandKBDResponse[]';
        $request = $this->broadbandKbdResultUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandKbdResultUsernameGet'
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandKbdResultUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandKbdResultUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandKbdResultUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandKbdResultUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandKbdResultUsernameGet'
            );
        }


        $resourcePath = '/broadband/kbd/result/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
