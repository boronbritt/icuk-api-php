<?php
/**
 * BroadbandSNRApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandSNRApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BroadbandSNRApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'broadbandInterleavingCurrentUsernameGet' => [
            'application/json',
        ],
        'broadbandInterleavingPut' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'broadbandProfileCurrentUsernameGet' => [
            'application/json',
        ],
        'broadbandProfilePut' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'broadbandSnrLogsUsernameGet' => [
            'application/json',
        ],
        'broadbandSnrUsernameGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation broadbandInterleavingCurrentUsernameGet
     *
     * Retrieves the current interleaving option. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandInterleaving|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandInterleavingCurrentUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandInterleavingCurrentUsernameGet'][0])
    {
        list($response) = $this->broadbandInterleavingCurrentUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandInterleavingCurrentUsernameGetWithHttpInfo
     *
     * Retrieves the current interleaving option. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandInterleaving|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandInterleavingCurrentUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandInterleavingCurrentUsernameGet'][0])
    {
        $request = $this->broadbandInterleavingCurrentUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandInterleaving' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandInterleaving' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandInterleaving', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandInterleaving';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandInterleaving',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandInterleavingCurrentUsernameGetAsync
     *
     * Retrieves the current interleaving option. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandInterleavingCurrentUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandInterleavingCurrentUsernameGet'][0])
    {
        return $this->broadbandInterleavingCurrentUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandInterleavingCurrentUsernameGetAsyncWithHttpInfo
     *
     * Retrieves the current interleaving option. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandInterleavingCurrentUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandInterleavingCurrentUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandInterleaving';
        $request = $this->broadbandInterleavingCurrentUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandInterleavingCurrentUsernameGet'
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandInterleavingCurrentUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandInterleavingCurrentUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandInterleavingCurrentUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandInterleavingCurrentUsernameGet'
            );
        }


        $resourcePath = '/broadband/interleaving/current/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandInterleavingPut
     *
     * Updates the interleaving profile. Only available for users with BT Wholesale broadband products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandInterleaving $broadband_interleaving A BroadbandInterleaving structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function broadbandInterleavingPut($api_platform, $broadband_interleaving = null, string $contentType = self::contentTypes['broadbandInterleavingPut'][0])
    {
        $this->broadbandInterleavingPutWithHttpInfo($api_platform, $broadband_interleaving, $contentType);
    }

    /**
     * Operation broadbandInterleavingPutWithHttpInfo
     *
     * Updates the interleaving profile. Only available for users with BT Wholesale broadband products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandInterleaving $broadband_interleaving A BroadbandInterleaving structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandInterleavingPutWithHttpInfo($api_platform, $broadband_interleaving = null, string $contentType = self::contentTypes['broadbandInterleavingPut'][0])
    {
        $request = $this->broadbandInterleavingPutRequest($api_platform, $broadband_interleaving, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandInterleavingPutAsync
     *
     * Updates the interleaving profile. Only available for users with BT Wholesale broadband products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandInterleaving $broadband_interleaving A BroadbandInterleaving structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandInterleavingPutAsync($api_platform, $broadband_interleaving = null, string $contentType = self::contentTypes['broadbandInterleavingPut'][0])
    {
        return $this->broadbandInterleavingPutAsyncWithHttpInfo($api_platform, $broadband_interleaving, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandInterleavingPutAsyncWithHttpInfo
     *
     * Updates the interleaving profile. Only available for users with BT Wholesale broadband products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandInterleaving $broadband_interleaving A BroadbandInterleaving structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandInterleavingPutAsyncWithHttpInfo($api_platform, $broadband_interleaving = null, string $contentType = self::contentTypes['broadbandInterleavingPut'][0])
    {
        $returnType = '';
        $request = $this->broadbandInterleavingPutRequest($api_platform, $broadband_interleaving, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandInterleavingPut'
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandInterleaving $broadband_interleaving A BroadbandInterleaving structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandInterleavingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandInterleavingPutRequest($api_platform, $broadband_interleaving = null, string $contentType = self::contentTypes['broadbandInterleavingPut'][0])
    {

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandInterleavingPut'
            );
        }



        $resourcePath = '/broadband/interleaving';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($broadband_interleaving)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($broadband_interleaving));
            } else {
                $httpBody = $broadband_interleaving;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandProfileCurrentUsernameGet
     *
     * Gets the current SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfileCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandSnrProfile|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandProfileCurrentUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandProfileCurrentUsernameGet'][0])
    {
        list($response) = $this->broadbandProfileCurrentUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandProfileCurrentUsernameGetWithHttpInfo
     *
     * Gets the current SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfileCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandSnrProfile|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandProfileCurrentUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandProfileCurrentUsernameGet'][0])
    {
        $request = $this->broadbandProfileCurrentUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandSnrProfile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandSnrProfile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandSnrProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandSnrProfile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandSnrProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandProfileCurrentUsernameGetAsync
     *
     * Gets the current SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfileCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandProfileCurrentUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandProfileCurrentUsernameGet'][0])
    {
        return $this->broadbandProfileCurrentUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandProfileCurrentUsernameGetAsyncWithHttpInfo
     *
     * Gets the current SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfileCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandProfileCurrentUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandProfileCurrentUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandSnrProfile';
        $request = $this->broadbandProfileCurrentUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandProfileCurrentUsernameGet'
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfileCurrentUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandProfileCurrentUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandProfileCurrentUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandProfileCurrentUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandProfileCurrentUsernameGet'
            );
        }


        $resourcePath = '/broadband/profile/current/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandProfilePut
     *
     * Updates SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandSnrProfile $broadband_snr_profile A BroadbandSnrProfile structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfilePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandSnrProfile|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandProfilePut($api_platform, $broadband_snr_profile = null, string $contentType = self::contentTypes['broadbandProfilePut'][0])
    {
        list($response) = $this->broadbandProfilePutWithHttpInfo($api_platform, $broadband_snr_profile, $contentType);
        return $response;
    }

    /**
     * Operation broadbandProfilePutWithHttpInfo
     *
     * Updates SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandSnrProfile $broadband_snr_profile A BroadbandSnrProfile structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfilePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandSnrProfile|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandProfilePutWithHttpInfo($api_platform, $broadband_snr_profile = null, string $contentType = self::contentTypes['broadbandProfilePut'][0])
    {
        $request = $this->broadbandProfilePutRequest($api_platform, $broadband_snr_profile, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandSnrProfile' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandSnrProfile' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandSnrProfile', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandSnrProfile';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandSnrProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandProfilePutAsync
     *
     * Updates SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandSnrProfile $broadband_snr_profile A BroadbandSnrProfile structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfilePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandProfilePutAsync($api_platform, $broadband_snr_profile = null, string $contentType = self::contentTypes['broadbandProfilePut'][0])
    {
        return $this->broadbandProfilePutAsyncWithHttpInfo($api_platform, $broadband_snr_profile, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandProfilePutAsyncWithHttpInfo
     *
     * Updates SNR and interleaving profile. Only available for users with TalkTalk products
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandSnrProfile $broadband_snr_profile A BroadbandSnrProfile structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfilePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandProfilePutAsyncWithHttpInfo($api_platform, $broadband_snr_profile = null, string $contentType = self::contentTypes['broadbandProfilePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandSnrProfile';
        $request = $this->broadbandProfilePutRequest($api_platform, $broadband_snr_profile, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandProfilePut'
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  \OpenAPI\Client\Model\BroadbandSnrProfile $broadband_snr_profile A BroadbandSnrProfile structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandProfilePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandProfilePutRequest($api_platform, $broadband_snr_profile = null, string $contentType = self::contentTypes['broadbandProfilePut'][0])
    {

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandProfilePut'
            );
        }



        $resourcePath = '/broadband/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($broadband_snr_profile)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($broadband_snr_profile));
            } else {
                $httpBody = $broadband_snr_profile;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandSnrLogsUsernameGet
     *
     * Gets SNR logs for a user. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrLogsUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandSnr[]|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandSnrLogsUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrLogsUsernameGet'][0])
    {
        list($response) = $this->broadbandSnrLogsUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandSnrLogsUsernameGetWithHttpInfo
     *
     * Gets SNR logs for a user. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrLogsUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandSnr[]|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandSnrLogsUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrLogsUsernameGet'][0])
    {
        $request = $this->broadbandSnrLogsUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandSnr[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandSnr[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandSnr[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandSnr[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandSnr[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandSnrLogsUsernameGetAsync
     *
     * Gets SNR logs for a user. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrLogsUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandSnrLogsUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrLogsUsernameGet'][0])
    {
        return $this->broadbandSnrLogsUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandSnrLogsUsernameGetAsyncWithHttpInfo
     *
     * Gets SNR logs for a user. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrLogsUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandSnrLogsUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrLogsUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandSnr[]';
        $request = $this->broadbandSnrLogsUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandSnrLogsUsernameGet'
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrLogsUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandSnrLogsUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrLogsUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandSnrLogsUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandSnrLogsUsernameGet'
            );
        }


        $resourcePath = '/broadband/snr/logs/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandSnrUsernameGet
     *
     * Reset the SNR of the user line. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandSnr|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandSnrUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrUsernameGet'][0])
    {
        list($response) = $this->broadbandSnrUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandSnrUsernameGetWithHttpInfo
     *
     * Reset the SNR of the user line. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandSnr|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandSnrUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrUsernameGet'][0])
    {
        $request = $this->broadbandSnrUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandSnr' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandSnr' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandSnr', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandSnr';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandSnr',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandSnrUsernameGetAsync
     *
     * Reset the SNR of the user line. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandSnrUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrUsernameGet'][0])
    {
        return $this->broadbandSnrUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandSnrUsernameGetAsyncWithHttpInfo
     *
     * Reset the SNR of the user line. Only available for users with BT Wholesale products
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandSnrUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandSnr';
        $request = $this->broadbandSnrUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandSnrUsernameGet'
     *
     * @param  string $username The user name (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandSnrUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandSnrUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandSnrUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandSnrUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandSnrUsernameGet'
            );
        }


        $resourcePath = '/broadband/snr/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
