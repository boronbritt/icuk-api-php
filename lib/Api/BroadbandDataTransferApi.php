<?php
/**
 * BroadbandDataTransferApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation
 *
 * The ICUK API provides an interface to the reseller control panel which can be used to control the provisioning and configuration of facilities remotely
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * BroadbandDataTransferApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BroadbandDataTransferApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'broadbandDataTransferDailyUsernameGet' => [
            'application/json',
        ],
        'broadbandDataTransferDailyUsernameYearMonthGet' => [
            'application/json',
        ],
        'broadbandDataTransferHourlyUsernameGet' => [
            'application/json',
        ],
        'broadbandDataTransferHourlyUsernameYearMonthDayGet' => [
            'application/json',
        ],
        'broadbandDataTransferMonthlyGet' => [
            'application/json',
        ],
        'broadbandDataTransferMonthlyUsernameGet' => [
            'application/json',
        ],
        'broadbandDataTransferMonthlyUsernameYearMonthGet' => [
            'application/json',
        ],
        'broadbandDataTransferMonthlyYearMonthGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation broadbandDataTransferDailyUsernameGet
     *
     * Retrieves the daily data transfer usage for a broadband user for the current month
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferDailyResult|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDataTransferDailyUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameGet'][0])
    {
        list($response) = $this->broadbandDataTransferDailyUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferDailyUsernameGetWithHttpInfo
     *
     * Retrieves the daily data transfer usage for a broadband user for the current month
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferDailyResult|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferDailyUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameGet'][0])
    {
        $request = $this->broadbandDataTransferDailyUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferDailyResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferDailyResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferDailyUsernameGetAsync
     *
     * Retrieves the daily data transfer usage for a broadband user for the current month
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferDailyUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameGet'][0])
    {
        return $this->broadbandDataTransferDailyUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferDailyUsernameGetAsyncWithHttpInfo
     *
     * Retrieves the daily data transfer usage for a broadband user for the current month
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferDailyUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult';
        $request = $this->broadbandDataTransferDailyUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferDailyUsernameGet'
     *
     * @param  string $username The name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferDailyUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDataTransferDailyUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferDailyUsernameGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/daily/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferDailyUsernameYearMonthGet
     *
     * Retrieves the daily data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferDailyResult|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDataTransferDailyUsernameYearMonthGet($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'][0])
    {
        list($response) = $this->broadbandDataTransferDailyUsernameYearMonthGetWithHttpInfo($username, $year, $month, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferDailyUsernameYearMonthGetWithHttpInfo
     *
     * Retrieves the daily data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferDailyResult|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferDailyUsernameYearMonthGetWithHttpInfo($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'][0])
    {
        $request = $this->broadbandDataTransferDailyUsernameYearMonthGetRequest($username, $year, $month, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferDailyResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferDailyResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferDailyUsernameYearMonthGetAsync
     *
     * Retrieves the daily data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferDailyUsernameYearMonthGetAsync($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'][0])
    {
        return $this->broadbandDataTransferDailyUsernameYearMonthGetAsyncWithHttpInfo($username, $year, $month, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferDailyUsernameYearMonthGetAsyncWithHttpInfo
     *
     * Retrieves the daily data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferDailyUsernameYearMonthGetAsyncWithHttpInfo($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferDailyResult';
        $request = $this->broadbandDataTransferDailyUsernameYearMonthGetRequest($username, $year, $month, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferDailyUsernameYearMonthGet'
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferDailyUsernameYearMonthGetRequest($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferDailyUsernameYearMonthGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDataTransferDailyUsernameYearMonthGet'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling broadbandDataTransferDailyUsernameYearMonthGet'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling broadbandDataTransferDailyUsernameYearMonthGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferDailyUsernameYearMonthGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/daily/{username}/{year}/{month}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameGet
     *
     * Retrieves the hourly data transfer usage for a broadband user for the current day
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferHourlyResult|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDataTransferHourlyUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameGet'][0])
    {
        list($response) = $this->broadbandDataTransferHourlyUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameGetWithHttpInfo
     *
     * Retrieves the hourly data transfer usage for a broadband user for the current day
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferHourlyResult|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferHourlyUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameGet'][0])
    {
        $request = $this->broadbandDataTransferHourlyUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameGetAsync
     *
     * Retrieves the hourly data transfer usage for a broadband user for the current day
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferHourlyUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameGet'][0])
    {
        return $this->broadbandDataTransferHourlyUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameGetAsyncWithHttpInfo
     *
     * Retrieves the hourly data transfer usage for a broadband user for the current day
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferHourlyUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult';
        $request = $this->broadbandDataTransferHourlyUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferHourlyUsernameGet'
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferHourlyUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDataTransferHourlyUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferHourlyUsernameGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/hourly/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameYearMonthDayGet
     *
     * Retrieves the hourly data transfer usage for a broadband user for the specified day, month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  int $day Day (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferHourlyResult|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDataTransferHourlyUsernameYearMonthDayGet($username, $year, $month, $day, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'][0])
    {
        list($response) = $this->broadbandDataTransferHourlyUsernameYearMonthDayGetWithHttpInfo($username, $year, $month, $day, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameYearMonthDayGetWithHttpInfo
     *
     * Retrieves the hourly data transfer usage for a broadband user for the specified day, month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  int $day Day (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferHourlyResult|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferHourlyUsernameYearMonthDayGetWithHttpInfo($username, $year, $month, $day, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'][0])
    {
        $request = $this->broadbandDataTransferHourlyUsernameYearMonthDayGetRequest($username, $year, $month, $day, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameYearMonthDayGetAsync
     *
     * Retrieves the hourly data transfer usage for a broadband user for the specified day, month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  int $day Day (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferHourlyUsernameYearMonthDayGetAsync($username, $year, $month, $day, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'][0])
    {
        return $this->broadbandDataTransferHourlyUsernameYearMonthDayGetAsyncWithHttpInfo($username, $year, $month, $day, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferHourlyUsernameYearMonthDayGetAsyncWithHttpInfo
     *
     * Retrieves the hourly data transfer usage for a broadband user for the specified day, month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  int $day Day (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferHourlyUsernameYearMonthDayGetAsyncWithHttpInfo($username, $year, $month, $day, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferHourlyResult';
        $request = $this->broadbandDataTransferHourlyUsernameYearMonthDayGetRequest($username, $year, $month, $day, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferHourlyUsernameYearMonthDayGet'
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  int $day Day (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferHourlyUsernameYearMonthDayGetRequest($username, $year, $month, $day, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferHourlyUsernameYearMonthDayGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDataTransferHourlyUsernameYearMonthDayGet'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling broadbandDataTransferHourlyUsernameYearMonthDayGet'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling broadbandDataTransferHourlyUsernameYearMonthDayGet'
            );
        }

        // verify the required parameter 'day' is set
        if ($day === null || (is_array($day) && count($day) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $day when calling broadbandDataTransferHourlyUsernameYearMonthDayGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferHourlyUsernameYearMonthDayGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/hourly/{username}/{year}/{month}/{day}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }
        // path params
        if ($day !== null) {
            $resourcePath = str_replace(
                '{' . 'day' . '}',
                ObjectSerializer::toPathValue($day),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferMonthlyGet
     *
     * Retrieves the monthly data transfer usage for all users for the current month
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults
     */
    public function broadbandDataTransferMonthlyGet($api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyGet'][0])
    {
        list($response) = $this->broadbandDataTransferMonthlyGetWithHttpInfo($api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferMonthlyGetWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for all users for the current month
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferMonthlyGetWithHttpInfo($api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyGet'][0])
    {
        $request = $this->broadbandDataTransferMonthlyGetRequest($api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferMonthlyGetAsync
     *
     * Retrieves the monthly data transfer usage for all users for the current month
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyGetAsync($api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyGet'][0])
    {
        return $this->broadbandDataTransferMonthlyGetAsyncWithHttpInfo($api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferMonthlyGetAsyncWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for all users for the current month
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyGetAsyncWithHttpInfo($api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
        $request = $this->broadbandDataTransferMonthlyGetRequest($api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferMonthlyGet'
     *
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferMonthlyGetRequest($api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyGet'][0])
    {

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferMonthlyGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/monthly';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameGet
     *
     * Retrieves the monthly data transfer usage for a broadband user for the current month
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDataTransferMonthlyUsernameGet($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameGet'][0])
    {
        list($response) = $this->broadbandDataTransferMonthlyUsernameGetWithHttpInfo($username, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameGetWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for a broadband user for the current month
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferMonthlyUsernameGetWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameGet'][0])
    {
        $request = $this->broadbandDataTransferMonthlyUsernameGetRequest($username, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameGetAsync
     *
     * Retrieves the monthly data transfer usage for a broadband user for the current month
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyUsernameGetAsync($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameGet'][0])
    {
        return $this->broadbandDataTransferMonthlyUsernameGetAsyncWithHttpInfo($username, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameGetAsyncWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for a broadband user for the current month
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyUsernameGetAsyncWithHttpInfo($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
        $request = $this->broadbandDataTransferMonthlyUsernameGetRequest($username, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferMonthlyUsernameGet'
     *
     * @param  string $username Name of the user (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferMonthlyUsernameGetRequest($username, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDataTransferMonthlyUsernameGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferMonthlyUsernameGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/monthly/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameYearMonthGet
     *
     * Retrieves the monthly data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults|\OpenAPI\Client\Model\ApiExceptionResponse
     */
    public function broadbandDataTransferMonthlyUsernameYearMonthGet($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'][0])
    {
        list($response) = $this->broadbandDataTransferMonthlyUsernameYearMonthGetWithHttpInfo($username, $year, $month, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameYearMonthGetWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults|\OpenAPI\Client\Model\ApiExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferMonthlyUsernameYearMonthGetWithHttpInfo($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'][0])
    {
        $request = $this->broadbandDataTransferMonthlyUsernameYearMonthGetRequest($username, $year, $month, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ApiExceptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiExceptionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiExceptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameYearMonthGetAsync
     *
     * Retrieves the monthly data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyUsernameYearMonthGetAsync($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'][0])
    {
        return $this->broadbandDataTransferMonthlyUsernameYearMonthGetAsyncWithHttpInfo($username, $year, $month, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferMonthlyUsernameYearMonthGetAsyncWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for a broadband user for the specified month and year
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyUsernameYearMonthGetAsyncWithHttpInfo($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
        $request = $this->broadbandDataTransferMonthlyUsernameYearMonthGetRequest($username, $year, $month, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferMonthlyUsernameYearMonthGet'
     *
     * @param  string $username Name of the user (required)
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferMonthlyUsernameYearMonthGetRequest($username, $year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyUsernameYearMonthGet'][0])
    {

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling broadbandDataTransferMonthlyUsernameYearMonthGet'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling broadbandDataTransferMonthlyUsernameYearMonthGet'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling broadbandDataTransferMonthlyUsernameYearMonthGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferMonthlyUsernameYearMonthGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/monthly/{username}/{year}/{month}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation broadbandDataTransferMonthlyYearMonthGet
     *
     * Retrieves the monthly data transfer usage for all users for the specified month and year
     *
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults
     */
    public function broadbandDataTransferMonthlyYearMonthGet($year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'][0])
    {
        list($response) = $this->broadbandDataTransferMonthlyYearMonthGetWithHttpInfo($year, $month, $api_platform, $contentType);
        return $response;
    }

    /**
     * Operation broadbandDataTransferMonthlyYearMonthGetWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for all users for the specified month and year
     *
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function broadbandDataTransferMonthlyYearMonthGetWithHttpInfo($year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'][0])
    {
        $request = $this->broadbandDataTransferMonthlyYearMonthGetRequest($year, $month, $api_platform, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation broadbandDataTransferMonthlyYearMonthGetAsync
     *
     * Retrieves the monthly data transfer usage for all users for the specified month and year
     *
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyYearMonthGetAsync($year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'][0])
    {
        return $this->broadbandDataTransferMonthlyYearMonthGetAsyncWithHttpInfo($year, $month, $api_platform, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation broadbandDataTransferMonthlyYearMonthGetAsyncWithHttpInfo
     *
     * Retrieves the monthly data transfer usage for all users for the specified month and year
     *
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function broadbandDataTransferMonthlyYearMonthGetAsyncWithHttpInfo($year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BroadbandDataTransferMonthlyResults';
        $request = $this->broadbandDataTransferMonthlyYearMonthGetRequest($year, $month, $api_platform, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'broadbandDataTransferMonthlyYearMonthGet'
     *
     * @param  int $year Year (required)
     * @param  int $month Month (required)
     * @param  string $api_platform The API provides access to two separate platforms: test and live. The test platform allows you to experiment with the API without incurring charges or affecting customer orders. The live platform allows you to make real world changes. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function broadbandDataTransferMonthlyYearMonthGetRequest($year, $month, $api_platform, string $contentType = self::contentTypes['broadbandDataTransferMonthlyYearMonthGet'][0])
    {

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling broadbandDataTransferMonthlyYearMonthGet'
            );
        }

        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling broadbandDataTransferMonthlyYearMonthGet'
            );
        }

        // verify the required parameter 'api_platform' is set
        if ($api_platform === null || (is_array($api_platform) && count($api_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_platform when calling broadbandDataTransferMonthlyYearMonthGet'
            );
        }


        $resourcePath = '/broadband/data_transfer/monthly/{year}/{month}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($api_platform !== null) {
            $headerParams['ApiPlatform'] = ObjectSerializer::toHeaderValue($api_platform);
        }

        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
